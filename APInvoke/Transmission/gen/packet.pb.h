// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace AP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class Connect;
class ConnectAck;
class Request;
class Response;
class CallbackReq;
class CallbackRsp;

// ===================================================================

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();
  
  Connect(const Connect& from);
  
  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();
  
  void Swap(Connect* other);
  
  // implements Message ----------------------------------------------
  
  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:AP.Connect)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* userid_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();
  
  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// -------------------------------------------------------------------

class ConnectAck : public ::google::protobuf::Message {
 public:
  ConnectAck();
  virtual ~ConnectAck();
  
  ConnectAck(const ConnectAck& from);
  
  inline ConnectAck& operator=(const ConnectAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectAck& default_instance();
  
  void Swap(ConnectAck* other);
  
  // implements Message ----------------------------------------------
  
  ConnectAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectAck& from);
  void MergeFrom(const ConnectAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);
  
  // required string session = 2;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 2;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  
  // @@protoc_insertion_point(class_scope:AP.ConnectAck)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_session();
  inline void clear_has_session();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* session_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();
  
  void InitAsDefaultInstance();
  static ConnectAck* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  
  // required string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // required bytes param_data = 3;
  inline bool has_param_data() const;
  inline void clear_param_data();
  static const int kParamDataFieldNumber = 3;
  inline const ::std::string& param_data() const;
  inline void set_param_data(const ::std::string& value);
  inline void set_param_data(const char* value);
  inline void set_param_data(const void* value, size_t size);
  inline ::std::string* mutable_param_data();
  inline ::std::string* release_param_data();
  
  // @@protoc_insertion_point(class_scope:AP.Request)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_param_data();
  inline void clear_has_param_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* session_;
  ::std::string* method_;
  ::std::string* param_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // required bytes return_data = 2;
  inline bool has_return_data() const;
  inline void clear_return_data();
  static const int kReturnDataFieldNumber = 2;
  inline const ::std::string& return_data() const;
  inline void set_return_data(const ::std::string& value);
  inline void set_return_data(const char* value);
  inline void set_return_data(const void* value, size_t size);
  inline ::std::string* mutable_return_data();
  inline ::std::string* release_return_data();
  
  // @@protoc_insertion_point(class_scope:AP.Response)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_return_data();
  inline void clear_has_return_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* method_;
  ::std::string* return_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class CallbackReq : public ::google::protobuf::Message {
 public:
  CallbackReq();
  virtual ~CallbackReq();
  
  CallbackReq(const CallbackReq& from);
  
  inline CallbackReq& operator=(const CallbackReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallbackReq& default_instance();
  
  void Swap(CallbackReq* other);
  
  // implements Message ----------------------------------------------
  
  CallbackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallbackReq& from);
  void MergeFrom(const CallbackReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // required bytes param_data = 2;
  inline bool has_param_data() const;
  inline void clear_param_data();
  static const int kParamDataFieldNumber = 2;
  inline const ::std::string& param_data() const;
  inline void set_param_data(const ::std::string& value);
  inline void set_param_data(const char* value);
  inline void set_param_data(const void* value, size_t size);
  inline ::std::string* mutable_param_data();
  inline ::std::string* release_param_data();
  
  // @@protoc_insertion_point(class_scope:AP.CallbackReq)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_param_data();
  inline void clear_has_param_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* method_;
  ::std::string* param_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();
  
  void InitAsDefaultInstance();
  static CallbackReq* default_instance_;
};
// -------------------------------------------------------------------

class CallbackRsp : public ::google::protobuf::Message {
 public:
  CallbackRsp();
  virtual ~CallbackRsp();
  
  CallbackRsp(const CallbackRsp& from);
  
  inline CallbackRsp& operator=(const CallbackRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallbackRsp& default_instance();
  
  void Swap(CallbackRsp* other);
  
  // implements Message ----------------------------------------------
  
  CallbackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallbackRsp& from);
  void MergeFrom(const CallbackRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  
  // required string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // required bytes return_data = 3;
  inline bool has_return_data() const;
  inline void clear_return_data();
  static const int kReturnDataFieldNumber = 3;
  inline const ::std::string& return_data() const;
  inline void set_return_data(const ::std::string& value);
  inline void set_return_data(const char* value);
  inline void set_return_data(const void* value, size_t size);
  inline ::std::string* mutable_return_data();
  inline ::std::string* release_return_data();
  
  // @@protoc_insertion_point(class_scope:AP.CallbackRsp)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_return_data();
  inline void clear_has_return_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* session_;
  ::std::string* method_;
  ::std::string* return_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();
  
  void InitAsDefaultInstance();
  static CallbackRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// Connect

// required string userid = 1;
inline bool Connect::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& Connect::userid() const {
  return *userid_;
}
inline void Connect::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void Connect::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void Connect::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connect::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* Connect::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool Connect::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connect::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connect::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connect::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Connect::password() const {
  return *password_;
}
inline void Connect::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Connect::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Connect::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connect::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Connect::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ConnectAck

// required bool success = 1;
inline bool ConnectAck::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectAck::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectAck::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectAck::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ConnectAck::success() const {
  return success_;
}
inline void ConnectAck::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// required string session = 2;
inline bool ConnectAck::has_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectAck::set_has_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectAck::clear_has_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectAck::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& ConnectAck::session() const {
  return *session_;
}
inline void ConnectAck::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void ConnectAck::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void ConnectAck::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectAck::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* ConnectAck::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Request

// required string session = 1;
inline bool Request::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& Request::session() const {
  return *session_;
}
inline void Request::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void Request::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void Request::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* Request::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string method = 2;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  return *method_;
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Request::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes param_data = 3;
inline bool Request::has_param_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_param_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_param_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_param_data() {
  if (param_data_ != &::google::protobuf::internal::kEmptyString) {
    param_data_->clear();
  }
  clear_has_param_data();
}
inline const ::std::string& Request::param_data() const {
  return *param_data_;
}
inline void Request::set_param_data(const ::std::string& value) {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  param_data_->assign(value);
}
inline void Request::set_param_data(const char* value) {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  param_data_->assign(value);
}
inline void Request::set_param_data(const void* value, size_t size) {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  param_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_param_data() {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  return param_data_;
}
inline ::std::string* Request::release_param_data() {
  clear_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_data_;
    param_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Response

// required string method = 1;
inline bool Response::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Response::method() const {
  return *method_;
}
inline void Response::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Response::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Response::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Response::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes return_data = 2;
inline bool Response::has_return_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_return_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_return_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_return_data() {
  if (return_data_ != &::google::protobuf::internal::kEmptyString) {
    return_data_->clear();
  }
  clear_has_return_data();
}
inline const ::std::string& Response::return_data() const {
  return *return_data_;
}
inline void Response::set_return_data(const ::std::string& value) {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return_data_->assign(value);
}
inline void Response::set_return_data(const char* value) {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return_data_->assign(value);
}
inline void Response::set_return_data(const void* value, size_t size) {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_return_data() {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return return_data_;
}
inline ::std::string* Response::release_return_data() {
  clear_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = return_data_;
    return_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CallbackReq

// required string method = 1;
inline bool CallbackReq::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallbackReq::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallbackReq::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallbackReq::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& CallbackReq::method() const {
  return *method_;
}
inline void CallbackReq::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void CallbackReq::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void CallbackReq::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CallbackReq::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* CallbackReq::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes param_data = 2;
inline bool CallbackReq::has_param_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallbackReq::set_has_param_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallbackReq::clear_has_param_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallbackReq::clear_param_data() {
  if (param_data_ != &::google::protobuf::internal::kEmptyString) {
    param_data_->clear();
  }
  clear_has_param_data();
}
inline const ::std::string& CallbackReq::param_data() const {
  return *param_data_;
}
inline void CallbackReq::set_param_data(const ::std::string& value) {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  param_data_->assign(value);
}
inline void CallbackReq::set_param_data(const char* value) {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  param_data_->assign(value);
}
inline void CallbackReq::set_param_data(const void* value, size_t size) {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  param_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CallbackReq::mutable_param_data() {
  set_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    param_data_ = new ::std::string;
  }
  return param_data_;
}
inline ::std::string* CallbackReq::release_param_data() {
  clear_has_param_data();
  if (param_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_data_;
    param_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CallbackRsp

// required string session = 1;
inline bool CallbackRsp::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallbackRsp::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallbackRsp::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallbackRsp::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& CallbackRsp::session() const {
  return *session_;
}
inline void CallbackRsp::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void CallbackRsp::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void CallbackRsp::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CallbackRsp::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* CallbackRsp::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string method = 2;
inline bool CallbackRsp::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallbackRsp::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallbackRsp::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallbackRsp::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& CallbackRsp::method() const {
  return *method_;
}
inline void CallbackRsp::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void CallbackRsp::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void CallbackRsp::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CallbackRsp::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* CallbackRsp::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes return_data = 3;
inline bool CallbackRsp::has_return_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallbackRsp::set_has_return_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallbackRsp::clear_has_return_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallbackRsp::clear_return_data() {
  if (return_data_ != &::google::protobuf::internal::kEmptyString) {
    return_data_->clear();
  }
  clear_has_return_data();
}
inline const ::std::string& CallbackRsp::return_data() const {
  return *return_data_;
}
inline void CallbackRsp::set_return_data(const ::std::string& value) {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return_data_->assign(value);
}
inline void CallbackRsp::set_return_data(const char* value) {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return_data_->assign(value);
}
inline void CallbackRsp::set_return_data(const void* value, size_t size) {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CallbackRsp::mutable_return_data() {
  set_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return_data_ = new ::std::string;
  }
  return return_data_;
}
inline ::std::string* CallbackRsp::release_return_data() {
  clear_has_return_data();
  if (return_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = return_data_;
    return_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AP

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
