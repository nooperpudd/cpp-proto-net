// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "entity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Entity {

namespace {

const ::google::protobuf::Descriptor* TestHelloParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestHelloParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestHelloReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestHelloReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestCallbackParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestCallbackParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestCallbackReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestCallbackReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_entity_2eproto() {
  protobuf_AddDesc_entity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "entity.proto");
  GOOGLE_CHECK(file != NULL);
  TestHelloParams_descriptor_ = file->message_type(0);
  static const int TestHelloParams_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloParams, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloParams, param2_),
  };
  TestHelloParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestHelloParams_descriptor_,
      TestHelloParams::default_instance_,
      TestHelloParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestHelloParams));
  TestHelloReturn_descriptor_ = file->message_type(1);
  static const int TestHelloReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloReturn, success_),
  };
  TestHelloReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestHelloReturn_descriptor_,
      TestHelloReturn::default_instance_,
      TestHelloReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestHelloReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestHelloReturn));
  TestCallbackParams_descriptor_ = file->message_type(2);
  static const int TestCallbackParams_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackParams, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackParams, param4_),
  };
  TestCallbackParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestCallbackParams_descriptor_,
      TestCallbackParams::default_instance_,
      TestCallbackParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestCallbackParams));
  TestCallbackReturn_descriptor_ = file->message_type(3);
  static const int TestCallbackReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackReturn, retval_),
  };
  TestCallbackReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestCallbackReturn_descriptor_,
      TestCallbackReturn::default_instance_,
      TestCallbackReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCallbackReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestCallbackReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_entity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestHelloParams_descriptor_, &TestHelloParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestHelloReturn_descriptor_, &TestHelloReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestCallbackParams_descriptor_, &TestCallbackParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestCallbackReturn_descriptor_, &TestCallbackReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_entity_2eproto() {
  delete TestHelloParams::default_instance_;
  delete TestHelloParams_reflection_;
  delete TestHelloReturn::default_instance_;
  delete TestHelloReturn_reflection_;
  delete TestCallbackParams::default_instance_;
  delete TestCallbackParams_reflection_;
  delete TestCallbackReturn::default_instance_;
  delete TestCallbackReturn_reflection_;
}

void protobuf_AddDesc_entity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014entity.proto\022\006Entity\"1\n\017TestHelloParam"
    "s\022\016\n\006param1\030\001 \002(\t\022\016\n\006param2\030\002 \002(\t\"\"\n\017Tes"
    "tHelloReturn\022\017\n\007success\030\001 \002(\010\"4\n\022TestCal"
    "lbackParams\022\016\n\006param3\030\001 \002(\t\022\016\n\006param4\030\002 "
    "\002(\t\"$\n\022TestCallbackReturn\022\016\n\006RetVal\030\001 \002("
    "\005", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "entity.proto", &protobuf_RegisterTypes);
  TestHelloParams::default_instance_ = new TestHelloParams();
  TestHelloReturn::default_instance_ = new TestHelloReturn();
  TestCallbackParams::default_instance_ = new TestCallbackParams();
  TestCallbackReturn::default_instance_ = new TestCallbackReturn();
  TestHelloParams::default_instance_->InitAsDefaultInstance();
  TestHelloReturn::default_instance_->InitAsDefaultInstance();
  TestCallbackParams::default_instance_->InitAsDefaultInstance();
  TestCallbackReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_entity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_entity_2eproto {
  StaticDescriptorInitializer_entity_2eproto() {
    protobuf_AddDesc_entity_2eproto();
  }
} static_descriptor_initializer_entity_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TestHelloParams::kParam1FieldNumber;
const int TestHelloParams::kParam2FieldNumber;
#endif  // !_MSC_VER

TestHelloParams::TestHelloParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestHelloParams::InitAsDefaultInstance() {
}

TestHelloParams::TestHelloParams(const TestHelloParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestHelloParams::SharedCtor() {
  _cached_size_ = 0;
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestHelloParams::~TestHelloParams() {
  SharedDtor();
}

void TestHelloParams::SharedDtor() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (this != default_instance_) {
  }
}

void TestHelloParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestHelloParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestHelloParams_descriptor_;
}

const TestHelloParams& TestHelloParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

TestHelloParams* TestHelloParams::default_instance_ = NULL;

TestHelloParams* TestHelloParams::New() const {
  return new TestHelloParams;
}

void TestHelloParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::kEmptyString) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::kEmptyString) {
        param2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestHelloParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param2;
        break;
      }
      
      // required string param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestHelloParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->param1(), output);
  }
  
  // required string param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestHelloParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param1(), target);
  }
  
  // required string param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestHelloParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }
    
    // required string param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestHelloParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestHelloParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestHelloParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestHelloParams::MergeFrom(const TestHelloParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestHelloParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestHelloParams::CopyFrom(const TestHelloParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHelloParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TestHelloParams::Swap(TestHelloParams* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestHelloParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestHelloParams_descriptor_;
  metadata.reflection = TestHelloParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestHelloReturn::kSuccessFieldNumber;
#endif  // !_MSC_VER

TestHelloReturn::TestHelloReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestHelloReturn::InitAsDefaultInstance() {
}

TestHelloReturn::TestHelloReturn(const TestHelloReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestHelloReturn::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestHelloReturn::~TestHelloReturn() {
  SharedDtor();
}

void TestHelloReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestHelloReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestHelloReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestHelloReturn_descriptor_;
}

const TestHelloReturn& TestHelloReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

TestHelloReturn* TestHelloReturn::default_instance_ = NULL;

TestHelloReturn* TestHelloReturn::New() const {
  return new TestHelloReturn;
}

void TestHelloReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestHelloReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestHelloReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestHelloReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestHelloReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestHelloReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestHelloReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestHelloReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestHelloReturn::MergeFrom(const TestHelloReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestHelloReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestHelloReturn::CopyFrom(const TestHelloReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHelloReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestHelloReturn::Swap(TestHelloReturn* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestHelloReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestHelloReturn_descriptor_;
  metadata.reflection = TestHelloReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestCallbackParams::kParam3FieldNumber;
const int TestCallbackParams::kParam4FieldNumber;
#endif  // !_MSC_VER

TestCallbackParams::TestCallbackParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestCallbackParams::InitAsDefaultInstance() {
}

TestCallbackParams::TestCallbackParams(const TestCallbackParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestCallbackParams::SharedCtor() {
  _cached_size_ = 0;
  param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestCallbackParams::~TestCallbackParams() {
  SharedDtor();
}

void TestCallbackParams::SharedDtor() {
  if (param3_ != &::google::protobuf::internal::kEmptyString) {
    delete param3_;
  }
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (this != default_instance_) {
  }
}

void TestCallbackParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestCallbackParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestCallbackParams_descriptor_;
}

const TestCallbackParams& TestCallbackParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

TestCallbackParams* TestCallbackParams::default_instance_ = NULL;

TestCallbackParams* TestCallbackParams::New() const {
  return new TestCallbackParams;
}

void TestCallbackParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_param3()) {
      if (param3_ != &::google::protobuf::internal::kEmptyString) {
        param3_->clear();
      }
    }
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::kEmptyString) {
        param4_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestCallbackParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string param3 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param3().data(), this->param3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param4;
        break;
      }
      
      // required string param4 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestCallbackParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string param3 = 1;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->param3(), output);
  }
  
  // required string param4 = 2;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestCallbackParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string param3 = 1;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param3(), target);
  }
  
  // required string param4 = 2;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestCallbackParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string param3 = 1;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param3());
    }
    
    // required string param4 = 2;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestCallbackParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestCallbackParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestCallbackParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestCallbackParams::MergeFrom(const TestCallbackParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestCallbackParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCallbackParams::CopyFrom(const TestCallbackParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCallbackParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TestCallbackParams::Swap(TestCallbackParams* other) {
  if (other != this) {
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestCallbackParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestCallbackParams_descriptor_;
  metadata.reflection = TestCallbackParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestCallbackReturn::kRetValFieldNumber;
#endif  // !_MSC_VER

TestCallbackReturn::TestCallbackReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestCallbackReturn::InitAsDefaultInstance() {
}

TestCallbackReturn::TestCallbackReturn(const TestCallbackReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestCallbackReturn::SharedCtor() {
  _cached_size_ = 0;
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestCallbackReturn::~TestCallbackReturn() {
  SharedDtor();
}

void TestCallbackReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestCallbackReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestCallbackReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestCallbackReturn_descriptor_;
}

const TestCallbackReturn& TestCallbackReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

TestCallbackReturn* TestCallbackReturn::default_instance_ = NULL;

TestCallbackReturn* TestCallbackReturn::New() const {
  return new TestCallbackReturn;
}

void TestCallbackReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestCallbackReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RetVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestCallbackReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RetVal = 1;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestCallbackReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RetVal = 1;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestCallbackReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RetVal = 1;
    if (has_retval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestCallbackReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestCallbackReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestCallbackReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestCallbackReturn::MergeFrom(const TestCallbackReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestCallbackReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCallbackReturn::CopyFrom(const TestCallbackReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCallbackReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestCallbackReturn::Swap(TestCallbackReturn* other) {
  if (other != this) {
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestCallbackReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestCallbackReturn_descriptor_;
  metadata.reflection = TestCallbackReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Entity

// @@protoc_insertion_point(global_scope)
