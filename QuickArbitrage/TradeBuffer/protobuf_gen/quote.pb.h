// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quote.proto

#ifndef PROTOBUF_quote_2eproto__INCLUDED
#define PROTOBUF_quote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace CTP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_quote_2eproto();
void protobuf_AssignDesc_quote_2eproto();
void protobuf_ShutdownFile_quote_2eproto();

class Quote;

// ===================================================================

class Quote : public ::google::protobuf::Message {
 public:
  Quote();
  virtual ~Quote();
  
  Quote(const Quote& from);
  
  inline Quote& operator=(const Quote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quote& default_instance();
  
  void Swap(Quote* other);
  
  // implements Message ----------------------------------------------
  
  Quote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quote& from);
  void MergeFrom(const Quote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  
  // required string trading_day = 2;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  inline const ::std::string& trading_day() const;
  inline void set_trading_day(const ::std::string& value);
  inline void set_trading_day(const char* value);
  inline void set_trading_day(const char* value, size_t size);
  inline ::std::string* mutable_trading_day();
  inline ::std::string* release_trading_day();
  
  // required string exchange_id = 3;
  inline bool has_exchange_id() const;
  inline void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 3;
  inline const ::std::string& exchange_id() const;
  inline void set_exchange_id(const ::std::string& value);
  inline void set_exchange_id(const char* value);
  inline void set_exchange_id(const char* value, size_t size);
  inline ::std::string* mutable_exchange_id();
  inline ::std::string* release_exchange_id();
  
  // required string exchange_symbol_id = 4;
  inline bool has_exchange_symbol_id() const;
  inline void clear_exchange_symbol_id();
  static const int kExchangeSymbolIdFieldNumber = 4;
  inline const ::std::string& exchange_symbol_id() const;
  inline void set_exchange_symbol_id(const ::std::string& value);
  inline void set_exchange_symbol_id(const char* value);
  inline void set_exchange_symbol_id(const char* value, size_t size);
  inline ::std::string* mutable_exchange_symbol_id();
  inline ::std::string* release_exchange_symbol_id();
  
  // required double last = 5;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 5;
  inline double last() const;
  inline void set_last(double value);
  
  // required double prev_settlement_price = 6;
  inline bool has_prev_settlement_price() const;
  inline void clear_prev_settlement_price();
  static const int kPrevSettlementPriceFieldNumber = 6;
  inline double prev_settlement_price() const;
  inline void set_prev_settlement_price(double value);
  
  // required double prev_close = 7;
  inline bool has_prev_close() const;
  inline void clear_prev_close();
  static const int kPrevCloseFieldNumber = 7;
  inline double prev_close() const;
  inline void set_prev_close(double value);
  
  // required double prev_open_interest = 8;
  inline bool has_prev_open_interest() const;
  inline void clear_prev_open_interest();
  static const int kPrevOpenInterestFieldNumber = 8;
  inline double prev_open_interest() const;
  inline void set_prev_open_interest(double value);
  
  // required double open = 9;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 9;
  inline double open() const;
  inline void set_open(double value);
  
  // required double high = 10;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 10;
  inline double high() const;
  inline void set_high(double value);
  
  // required double low = 11;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 11;
  inline double low() const;
  inline void set_low(double value);
  
  // required int32 volume = 12;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 12;
  inline ::google::protobuf::int32 volume() const;
  inline void set_volume(::google::protobuf::int32 value);
  
  // required double turnover = 13;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 13;
  inline double turnover() const;
  inline void set_turnover(double value);
  
  // required double open_interest = 14;
  inline bool has_open_interest() const;
  inline void clear_open_interest();
  static const int kOpenInterestFieldNumber = 14;
  inline double open_interest() const;
  inline void set_open_interest(double value);
  
  // required double close = 15;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 15;
  inline double close() const;
  inline void set_close(double value);
  
  // required double settlement_price = 16;
  inline bool has_settlement_price() const;
  inline void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 16;
  inline double settlement_price() const;
  inline void set_settlement_price(double value);
  
  // required double upper_limit_price = 17;
  inline bool has_upper_limit_price() const;
  inline void clear_upper_limit_price();
  static const int kUpperLimitPriceFieldNumber = 17;
  inline double upper_limit_price() const;
  inline void set_upper_limit_price(double value);
  
  // required double lower_limit_price = 18;
  inline bool has_lower_limit_price() const;
  inline void clear_lower_limit_price();
  static const int kLowerLimitPriceFieldNumber = 18;
  inline double lower_limit_price() const;
  inline void set_lower_limit_price(double value);
  
  // required double prev_delta = 19;
  inline bool has_prev_delta() const;
  inline void clear_prev_delta();
  static const int kPrevDeltaFieldNumber = 19;
  inline double prev_delta() const;
  inline void set_prev_delta(double value);
  
  // required double curr_delta = 20;
  inline bool has_curr_delta() const;
  inline void clear_curr_delta();
  static const int kCurrDeltaFieldNumber = 20;
  inline double curr_delta() const;
  inline void set_curr_delta(double value);
  
  // required string update_time = 21;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 21;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const char* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  
  // required int32 update_millisec = 22;
  inline bool has_update_millisec() const;
  inline void clear_update_millisec();
  static const int kUpdateMillisecFieldNumber = 22;
  inline ::google::protobuf::int32 update_millisec() const;
  inline void set_update_millisec(::google::protobuf::int32 value);
  
  // required double bid = 23;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 23;
  inline double bid() const;
  inline void set_bid(double value);
  
  // required int32 bid_size = 24;
  inline bool has_bid_size() const;
  inline void clear_bid_size();
  static const int kBidSizeFieldNumber = 24;
  inline ::google::protobuf::int32 bid_size() const;
  inline void set_bid_size(::google::protobuf::int32 value);
  
  // required double ask = 25;
  inline bool has_ask() const;
  inline void clear_ask();
  static const int kAskFieldNumber = 25;
  inline double ask() const;
  inline void set_ask(double value);
  
  // required int32 ask_size = 26;
  inline bool has_ask_size() const;
  inline void clear_ask_size();
  static const int kAskSizeFieldNumber = 26;
  inline ::google::protobuf::int32 ask_size() const;
  inline void set_ask_size(::google::protobuf::int32 value);
  
  // required double bid_2 = 27;
  inline bool has_bid_2() const;
  inline void clear_bid_2();
  static const int kBid2FieldNumber = 27;
  inline double bid_2() const;
  inline void set_bid_2(double value);
  
  // required int32 bid_size_2 = 28;
  inline bool has_bid_size_2() const;
  inline void clear_bid_size_2();
  static const int kBidSize2FieldNumber = 28;
  inline ::google::protobuf::int32 bid_size_2() const;
  inline void set_bid_size_2(::google::protobuf::int32 value);
  
  // required double ask_2 = 29;
  inline bool has_ask_2() const;
  inline void clear_ask_2();
  static const int kAsk2FieldNumber = 29;
  inline double ask_2() const;
  inline void set_ask_2(double value);
  
  // required int32 ask_size_2 = 30;
  inline bool has_ask_size_2() const;
  inline void clear_ask_size_2();
  static const int kAskSize2FieldNumber = 30;
  inline ::google::protobuf::int32 ask_size_2() const;
  inline void set_ask_size_2(::google::protobuf::int32 value);
  
  // required double bid_3 = 31;
  inline bool has_bid_3() const;
  inline void clear_bid_3();
  static const int kBid3FieldNumber = 31;
  inline double bid_3() const;
  inline void set_bid_3(double value);
  
  // required int32 bid_size_3 = 32;
  inline bool has_bid_size_3() const;
  inline void clear_bid_size_3();
  static const int kBidSize3FieldNumber = 32;
  inline ::google::protobuf::int32 bid_size_3() const;
  inline void set_bid_size_3(::google::protobuf::int32 value);
  
  // required double ask_3 = 33;
  inline bool has_ask_3() const;
  inline void clear_ask_3();
  static const int kAsk3FieldNumber = 33;
  inline double ask_3() const;
  inline void set_ask_3(double value);
  
  // required int32 ask_size_3 = 34;
  inline bool has_ask_size_3() const;
  inline void clear_ask_size_3();
  static const int kAskSize3FieldNumber = 34;
  inline ::google::protobuf::int32 ask_size_3() const;
  inline void set_ask_size_3(::google::protobuf::int32 value);
  
  // required double bid_4 = 35;
  inline bool has_bid_4() const;
  inline void clear_bid_4();
  static const int kBid4FieldNumber = 35;
  inline double bid_4() const;
  inline void set_bid_4(double value);
  
  // required int32 bid_size_4 = 36;
  inline bool has_bid_size_4() const;
  inline void clear_bid_size_4();
  static const int kBidSize4FieldNumber = 36;
  inline ::google::protobuf::int32 bid_size_4() const;
  inline void set_bid_size_4(::google::protobuf::int32 value);
  
  // required double ask_4 = 37;
  inline bool has_ask_4() const;
  inline void clear_ask_4();
  static const int kAsk4FieldNumber = 37;
  inline double ask_4() const;
  inline void set_ask_4(double value);
  
  // required int32 ask_size_4 = 38;
  inline bool has_ask_size_4() const;
  inline void clear_ask_size_4();
  static const int kAskSize4FieldNumber = 38;
  inline ::google::protobuf::int32 ask_size_4() const;
  inline void set_ask_size_4(::google::protobuf::int32 value);
  
  // required double bid_5 = 39;
  inline bool has_bid_5() const;
  inline void clear_bid_5();
  static const int kBid5FieldNumber = 39;
  inline double bid_5() const;
  inline void set_bid_5(double value);
  
  // required int32 bid_size_5 = 40;
  inline bool has_bid_size_5() const;
  inline void clear_bid_size_5();
  static const int kBidSize5FieldNumber = 40;
  inline ::google::protobuf::int32 bid_size_5() const;
  inline void set_bid_size_5(::google::protobuf::int32 value);
  
  // required double ask_5 = 41;
  inline bool has_ask_5() const;
  inline void clear_ask_5();
  static const int kAsk5FieldNumber = 41;
  inline double ask_5() const;
  inline void set_ask_5(double value);
  
  // required int32 ask_size_5 = 42;
  inline bool has_ask_size_5() const;
  inline void clear_ask_size_5();
  static const int kAskSize5FieldNumber = 42;
  inline ::google::protobuf::int32 ask_size_5() const;
  inline void set_ask_size_5(::google::protobuf::int32 value);
  
  // required double average_price = 43;
  inline bool has_average_price() const;
  inline void clear_average_price();
  static const int kAveragePriceFieldNumber = 43;
  inline double average_price() const;
  inline void set_average_price(double value);
  
  // @@protoc_insertion_point(class_scope:CTP.Quote)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_exchange_id();
  inline void clear_has_exchange_id();
  inline void set_has_exchange_symbol_id();
  inline void clear_has_exchange_symbol_id();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_prev_settlement_price();
  inline void clear_has_prev_settlement_price();
  inline void set_has_prev_close();
  inline void clear_has_prev_close();
  inline void set_has_prev_open_interest();
  inline void clear_has_prev_open_interest();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_open_interest();
  inline void clear_has_open_interest();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_settlement_price();
  inline void clear_has_settlement_price();
  inline void set_has_upper_limit_price();
  inline void clear_has_upper_limit_price();
  inline void set_has_lower_limit_price();
  inline void clear_has_lower_limit_price();
  inline void set_has_prev_delta();
  inline void clear_has_prev_delta();
  inline void set_has_curr_delta();
  inline void clear_has_curr_delta();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_update_millisec();
  inline void clear_has_update_millisec();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_bid_size();
  inline void clear_has_bid_size();
  inline void set_has_ask();
  inline void clear_has_ask();
  inline void set_has_ask_size();
  inline void clear_has_ask_size();
  inline void set_has_bid_2();
  inline void clear_has_bid_2();
  inline void set_has_bid_size_2();
  inline void clear_has_bid_size_2();
  inline void set_has_ask_2();
  inline void clear_has_ask_2();
  inline void set_has_ask_size_2();
  inline void clear_has_ask_size_2();
  inline void set_has_bid_3();
  inline void clear_has_bid_3();
  inline void set_has_bid_size_3();
  inline void clear_has_bid_size_3();
  inline void set_has_ask_3();
  inline void clear_has_ask_3();
  inline void set_has_ask_size_3();
  inline void clear_has_ask_size_3();
  inline void set_has_bid_4();
  inline void clear_has_bid_4();
  inline void set_has_bid_size_4();
  inline void clear_has_bid_size_4();
  inline void set_has_ask_4();
  inline void clear_has_ask_4();
  inline void set_has_ask_size_4();
  inline void clear_has_ask_size_4();
  inline void set_has_bid_5();
  inline void clear_has_bid_5();
  inline void set_has_bid_size_5();
  inline void clear_has_bid_size_5();
  inline void set_has_ask_5();
  inline void clear_has_ask_5();
  inline void set_has_ask_size_5();
  inline void clear_has_ask_size_5();
  inline void set_has_average_price();
  inline void clear_has_average_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* symbol_;
  ::std::string* trading_day_;
  ::std::string* exchange_id_;
  ::std::string* exchange_symbol_id_;
  double last_;
  double prev_settlement_price_;
  double prev_close_;
  double prev_open_interest_;
  double open_;
  double high_;
  double low_;
  double turnover_;
  double open_interest_;
  double close_;
  double settlement_price_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 update_millisec_;
  double upper_limit_price_;
  double lower_limit_price_;
  double prev_delta_;
  double curr_delta_;
  ::std::string* update_time_;
  double bid_;
  double ask_;
  ::google::protobuf::int32 bid_size_;
  ::google::protobuf::int32 ask_size_;
  double bid_2_;
  double ask_2_;
  ::google::protobuf::int32 bid_size_2_;
  ::google::protobuf::int32 ask_size_2_;
  double bid_3_;
  double ask_3_;
  ::google::protobuf::int32 bid_size_3_;
  ::google::protobuf::int32 ask_size_3_;
  double bid_4_;
  double ask_4_;
  ::google::protobuf::int32 bid_size_4_;
  ::google::protobuf::int32 ask_size_4_;
  double bid_5_;
  double ask_5_;
  ::google::protobuf::int32 bid_size_5_;
  ::google::protobuf::int32 ask_size_5_;
  double average_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(43 + 31) / 32];
  
  friend void  protobuf_AddDesc_quote_2eproto();
  friend void protobuf_AssignDesc_quote_2eproto();
  friend void protobuf_ShutdownFile_quote_2eproto();
  
  void InitAsDefaultInstance();
  static Quote* default_instance_;
};
// ===================================================================


// ===================================================================

// Quote

// required string symbol = 1;
inline bool Quote::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quote::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quote::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Quote::symbol() const {
  return *symbol_;
}
inline void Quote::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Quote::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Quote::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Quote::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Quote::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string trading_day = 2;
inline bool Quote::has_trading_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quote::set_has_trading_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quote::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quote::clear_trading_day() {
  if (trading_day_ != &::google::protobuf::internal::kEmptyString) {
    trading_day_->clear();
  }
  clear_has_trading_day();
}
inline const ::std::string& Quote::trading_day() const {
  return *trading_day_;
}
inline void Quote::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  if (trading_day_ == &::google::protobuf::internal::kEmptyString) {
    trading_day_ = new ::std::string;
  }
  trading_day_->assign(value);
}
inline void Quote::set_trading_day(const char* value) {
  set_has_trading_day();
  if (trading_day_ == &::google::protobuf::internal::kEmptyString) {
    trading_day_ = new ::std::string;
  }
  trading_day_->assign(value);
}
inline void Quote::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  if (trading_day_ == &::google::protobuf::internal::kEmptyString) {
    trading_day_ = new ::std::string;
  }
  trading_day_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Quote::mutable_trading_day() {
  set_has_trading_day();
  if (trading_day_ == &::google::protobuf::internal::kEmptyString) {
    trading_day_ = new ::std::string;
  }
  return trading_day_;
}
inline ::std::string* Quote::release_trading_day() {
  clear_has_trading_day();
  if (trading_day_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trading_day_;
    trading_day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string exchange_id = 3;
inline bool Quote::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quote::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quote::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quote::clear_exchange_id() {
  if (exchange_id_ != &::google::protobuf::internal::kEmptyString) {
    exchange_id_->clear();
  }
  clear_has_exchange_id();
}
inline const ::std::string& Quote::exchange_id() const {
  return *exchange_id_;
}
inline void Quote::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  if (exchange_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_id_ = new ::std::string;
  }
  exchange_id_->assign(value);
}
inline void Quote::set_exchange_id(const char* value) {
  set_has_exchange_id();
  if (exchange_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_id_ = new ::std::string;
  }
  exchange_id_->assign(value);
}
inline void Quote::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  if (exchange_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_id_ = new ::std::string;
  }
  exchange_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Quote::mutable_exchange_id() {
  set_has_exchange_id();
  if (exchange_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_id_ = new ::std::string;
  }
  return exchange_id_;
}
inline ::std::string* Quote::release_exchange_id() {
  clear_has_exchange_id();
  if (exchange_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchange_id_;
    exchange_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string exchange_symbol_id = 4;
inline bool Quote::has_exchange_symbol_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quote::set_has_exchange_symbol_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quote::clear_has_exchange_symbol_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quote::clear_exchange_symbol_id() {
  if (exchange_symbol_id_ != &::google::protobuf::internal::kEmptyString) {
    exchange_symbol_id_->clear();
  }
  clear_has_exchange_symbol_id();
}
inline const ::std::string& Quote::exchange_symbol_id() const {
  return *exchange_symbol_id_;
}
inline void Quote::set_exchange_symbol_id(const ::std::string& value) {
  set_has_exchange_symbol_id();
  if (exchange_symbol_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_symbol_id_ = new ::std::string;
  }
  exchange_symbol_id_->assign(value);
}
inline void Quote::set_exchange_symbol_id(const char* value) {
  set_has_exchange_symbol_id();
  if (exchange_symbol_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_symbol_id_ = new ::std::string;
  }
  exchange_symbol_id_->assign(value);
}
inline void Quote::set_exchange_symbol_id(const char* value, size_t size) {
  set_has_exchange_symbol_id();
  if (exchange_symbol_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_symbol_id_ = new ::std::string;
  }
  exchange_symbol_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Quote::mutable_exchange_symbol_id() {
  set_has_exchange_symbol_id();
  if (exchange_symbol_id_ == &::google::protobuf::internal::kEmptyString) {
    exchange_symbol_id_ = new ::std::string;
  }
  return exchange_symbol_id_;
}
inline ::std::string* Quote::release_exchange_symbol_id() {
  clear_has_exchange_symbol_id();
  if (exchange_symbol_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchange_symbol_id_;
    exchange_symbol_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required double last = 5;
inline bool Quote::has_last() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Quote::set_has_last() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Quote::clear_has_last() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Quote::clear_last() {
  last_ = 0;
  clear_has_last();
}
inline double Quote::last() const {
  return last_;
}
inline void Quote::set_last(double value) {
  set_has_last();
  last_ = value;
}

// required double prev_settlement_price = 6;
inline bool Quote::has_prev_settlement_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Quote::set_has_prev_settlement_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Quote::clear_has_prev_settlement_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Quote::clear_prev_settlement_price() {
  prev_settlement_price_ = 0;
  clear_has_prev_settlement_price();
}
inline double Quote::prev_settlement_price() const {
  return prev_settlement_price_;
}
inline void Quote::set_prev_settlement_price(double value) {
  set_has_prev_settlement_price();
  prev_settlement_price_ = value;
}

// required double prev_close = 7;
inline bool Quote::has_prev_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Quote::set_has_prev_close() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Quote::clear_has_prev_close() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Quote::clear_prev_close() {
  prev_close_ = 0;
  clear_has_prev_close();
}
inline double Quote::prev_close() const {
  return prev_close_;
}
inline void Quote::set_prev_close(double value) {
  set_has_prev_close();
  prev_close_ = value;
}

// required double prev_open_interest = 8;
inline bool Quote::has_prev_open_interest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Quote::set_has_prev_open_interest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Quote::clear_has_prev_open_interest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Quote::clear_prev_open_interest() {
  prev_open_interest_ = 0;
  clear_has_prev_open_interest();
}
inline double Quote::prev_open_interest() const {
  return prev_open_interest_;
}
inline void Quote::set_prev_open_interest(double value) {
  set_has_prev_open_interest();
  prev_open_interest_ = value;
}

// required double open = 9;
inline bool Quote::has_open() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Quote::set_has_open() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Quote::clear_has_open() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Quote::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double Quote::open() const {
  return open_;
}
inline void Quote::set_open(double value) {
  set_has_open();
  open_ = value;
}

// required double high = 10;
inline bool Quote::has_high() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Quote::set_has_high() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Quote::clear_has_high() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Quote::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double Quote::high() const {
  return high_;
}
inline void Quote::set_high(double value) {
  set_has_high();
  high_ = value;
}

// required double low = 11;
inline bool Quote::has_low() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Quote::set_has_low() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Quote::clear_has_low() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Quote::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double Quote::low() const {
  return low_;
}
inline void Quote::set_low(double value) {
  set_has_low();
  low_ = value;
}

// required int32 volume = 12;
inline bool Quote::has_volume() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Quote::set_has_volume() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Quote::clear_has_volume() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Quote::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline ::google::protobuf::int32 Quote::volume() const {
  return volume_;
}
inline void Quote::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
}

// required double turnover = 13;
inline bool Quote::has_turnover() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Quote::set_has_turnover() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Quote::clear_has_turnover() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Quote::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double Quote::turnover() const {
  return turnover_;
}
inline void Quote::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
}

// required double open_interest = 14;
inline bool Quote::has_open_interest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Quote::set_has_open_interest() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Quote::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Quote::clear_open_interest() {
  open_interest_ = 0;
  clear_has_open_interest();
}
inline double Quote::open_interest() const {
  return open_interest_;
}
inline void Quote::set_open_interest(double value) {
  set_has_open_interest();
  open_interest_ = value;
}

// required double close = 15;
inline bool Quote::has_close() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Quote::set_has_close() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Quote::clear_has_close() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Quote::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double Quote::close() const {
  return close_;
}
inline void Quote::set_close(double value) {
  set_has_close();
  close_ = value;
}

// required double settlement_price = 16;
inline bool Quote::has_settlement_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Quote::set_has_settlement_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Quote::clear_has_settlement_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Quote::clear_settlement_price() {
  settlement_price_ = 0;
  clear_has_settlement_price();
}
inline double Quote::settlement_price() const {
  return settlement_price_;
}
inline void Quote::set_settlement_price(double value) {
  set_has_settlement_price();
  settlement_price_ = value;
}

// required double upper_limit_price = 17;
inline bool Quote::has_upper_limit_price() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Quote::set_has_upper_limit_price() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Quote::clear_has_upper_limit_price() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Quote::clear_upper_limit_price() {
  upper_limit_price_ = 0;
  clear_has_upper_limit_price();
}
inline double Quote::upper_limit_price() const {
  return upper_limit_price_;
}
inline void Quote::set_upper_limit_price(double value) {
  set_has_upper_limit_price();
  upper_limit_price_ = value;
}

// required double lower_limit_price = 18;
inline bool Quote::has_lower_limit_price() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Quote::set_has_lower_limit_price() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Quote::clear_has_lower_limit_price() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Quote::clear_lower_limit_price() {
  lower_limit_price_ = 0;
  clear_has_lower_limit_price();
}
inline double Quote::lower_limit_price() const {
  return lower_limit_price_;
}
inline void Quote::set_lower_limit_price(double value) {
  set_has_lower_limit_price();
  lower_limit_price_ = value;
}

// required double prev_delta = 19;
inline bool Quote::has_prev_delta() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Quote::set_has_prev_delta() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Quote::clear_has_prev_delta() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Quote::clear_prev_delta() {
  prev_delta_ = 0;
  clear_has_prev_delta();
}
inline double Quote::prev_delta() const {
  return prev_delta_;
}
inline void Quote::set_prev_delta(double value) {
  set_has_prev_delta();
  prev_delta_ = value;
}

// required double curr_delta = 20;
inline bool Quote::has_curr_delta() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Quote::set_has_curr_delta() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Quote::clear_has_curr_delta() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Quote::clear_curr_delta() {
  curr_delta_ = 0;
  clear_has_curr_delta();
}
inline double Quote::curr_delta() const {
  return curr_delta_;
}
inline void Quote::set_curr_delta(double value) {
  set_has_curr_delta();
  curr_delta_ = value;
}

// required string update_time = 21;
inline bool Quote::has_update_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Quote::set_has_update_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Quote::clear_has_update_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Quote::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& Quote::update_time() const {
  return *update_time_;
}
inline void Quote::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
}
inline void Quote::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
}
inline void Quote::set_update_time(const char* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Quote::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  return update_time_;
}
inline ::std::string* Quote::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 update_millisec = 22;
inline bool Quote::has_update_millisec() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Quote::set_has_update_millisec() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Quote::clear_has_update_millisec() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Quote::clear_update_millisec() {
  update_millisec_ = 0;
  clear_has_update_millisec();
}
inline ::google::protobuf::int32 Quote::update_millisec() const {
  return update_millisec_;
}
inline void Quote::set_update_millisec(::google::protobuf::int32 value) {
  set_has_update_millisec();
  update_millisec_ = value;
}

// required double bid = 23;
inline bool Quote::has_bid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Quote::set_has_bid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Quote::clear_has_bid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Quote::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline double Quote::bid() const {
  return bid_;
}
inline void Quote::set_bid(double value) {
  set_has_bid();
  bid_ = value;
}

// required int32 bid_size = 24;
inline bool Quote::has_bid_size() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Quote::set_has_bid_size() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Quote::clear_has_bid_size() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Quote::clear_bid_size() {
  bid_size_ = 0;
  clear_has_bid_size();
}
inline ::google::protobuf::int32 Quote::bid_size() const {
  return bid_size_;
}
inline void Quote::set_bid_size(::google::protobuf::int32 value) {
  set_has_bid_size();
  bid_size_ = value;
}

// required double ask = 25;
inline bool Quote::has_ask() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Quote::set_has_ask() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Quote::clear_has_ask() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Quote::clear_ask() {
  ask_ = 0;
  clear_has_ask();
}
inline double Quote::ask() const {
  return ask_;
}
inline void Quote::set_ask(double value) {
  set_has_ask();
  ask_ = value;
}

// required int32 ask_size = 26;
inline bool Quote::has_ask_size() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Quote::set_has_ask_size() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Quote::clear_has_ask_size() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Quote::clear_ask_size() {
  ask_size_ = 0;
  clear_has_ask_size();
}
inline ::google::protobuf::int32 Quote::ask_size() const {
  return ask_size_;
}
inline void Quote::set_ask_size(::google::protobuf::int32 value) {
  set_has_ask_size();
  ask_size_ = value;
}

// required double bid_2 = 27;
inline bool Quote::has_bid_2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Quote::set_has_bid_2() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Quote::clear_has_bid_2() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Quote::clear_bid_2() {
  bid_2_ = 0;
  clear_has_bid_2();
}
inline double Quote::bid_2() const {
  return bid_2_;
}
inline void Quote::set_bid_2(double value) {
  set_has_bid_2();
  bid_2_ = value;
}

// required int32 bid_size_2 = 28;
inline bool Quote::has_bid_size_2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Quote::set_has_bid_size_2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Quote::clear_has_bid_size_2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Quote::clear_bid_size_2() {
  bid_size_2_ = 0;
  clear_has_bid_size_2();
}
inline ::google::protobuf::int32 Quote::bid_size_2() const {
  return bid_size_2_;
}
inline void Quote::set_bid_size_2(::google::protobuf::int32 value) {
  set_has_bid_size_2();
  bid_size_2_ = value;
}

// required double ask_2 = 29;
inline bool Quote::has_ask_2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Quote::set_has_ask_2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Quote::clear_has_ask_2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Quote::clear_ask_2() {
  ask_2_ = 0;
  clear_has_ask_2();
}
inline double Quote::ask_2() const {
  return ask_2_;
}
inline void Quote::set_ask_2(double value) {
  set_has_ask_2();
  ask_2_ = value;
}

// required int32 ask_size_2 = 30;
inline bool Quote::has_ask_size_2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Quote::set_has_ask_size_2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Quote::clear_has_ask_size_2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Quote::clear_ask_size_2() {
  ask_size_2_ = 0;
  clear_has_ask_size_2();
}
inline ::google::protobuf::int32 Quote::ask_size_2() const {
  return ask_size_2_;
}
inline void Quote::set_ask_size_2(::google::protobuf::int32 value) {
  set_has_ask_size_2();
  ask_size_2_ = value;
}

// required double bid_3 = 31;
inline bool Quote::has_bid_3() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Quote::set_has_bid_3() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Quote::clear_has_bid_3() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Quote::clear_bid_3() {
  bid_3_ = 0;
  clear_has_bid_3();
}
inline double Quote::bid_3() const {
  return bid_3_;
}
inline void Quote::set_bid_3(double value) {
  set_has_bid_3();
  bid_3_ = value;
}

// required int32 bid_size_3 = 32;
inline bool Quote::has_bid_size_3() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Quote::set_has_bid_size_3() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Quote::clear_has_bid_size_3() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Quote::clear_bid_size_3() {
  bid_size_3_ = 0;
  clear_has_bid_size_3();
}
inline ::google::protobuf::int32 Quote::bid_size_3() const {
  return bid_size_3_;
}
inline void Quote::set_bid_size_3(::google::protobuf::int32 value) {
  set_has_bid_size_3();
  bid_size_3_ = value;
}

// required double ask_3 = 33;
inline bool Quote::has_ask_3() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Quote::set_has_ask_3() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Quote::clear_has_ask_3() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Quote::clear_ask_3() {
  ask_3_ = 0;
  clear_has_ask_3();
}
inline double Quote::ask_3() const {
  return ask_3_;
}
inline void Quote::set_ask_3(double value) {
  set_has_ask_3();
  ask_3_ = value;
}

// required int32 ask_size_3 = 34;
inline bool Quote::has_ask_size_3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Quote::set_has_ask_size_3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Quote::clear_has_ask_size_3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Quote::clear_ask_size_3() {
  ask_size_3_ = 0;
  clear_has_ask_size_3();
}
inline ::google::protobuf::int32 Quote::ask_size_3() const {
  return ask_size_3_;
}
inline void Quote::set_ask_size_3(::google::protobuf::int32 value) {
  set_has_ask_size_3();
  ask_size_3_ = value;
}

// required double bid_4 = 35;
inline bool Quote::has_bid_4() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Quote::set_has_bid_4() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Quote::clear_has_bid_4() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Quote::clear_bid_4() {
  bid_4_ = 0;
  clear_has_bid_4();
}
inline double Quote::bid_4() const {
  return bid_4_;
}
inline void Quote::set_bid_4(double value) {
  set_has_bid_4();
  bid_4_ = value;
}

// required int32 bid_size_4 = 36;
inline bool Quote::has_bid_size_4() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Quote::set_has_bid_size_4() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Quote::clear_has_bid_size_4() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Quote::clear_bid_size_4() {
  bid_size_4_ = 0;
  clear_has_bid_size_4();
}
inline ::google::protobuf::int32 Quote::bid_size_4() const {
  return bid_size_4_;
}
inline void Quote::set_bid_size_4(::google::protobuf::int32 value) {
  set_has_bid_size_4();
  bid_size_4_ = value;
}

// required double ask_4 = 37;
inline bool Quote::has_ask_4() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Quote::set_has_ask_4() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Quote::clear_has_ask_4() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Quote::clear_ask_4() {
  ask_4_ = 0;
  clear_has_ask_4();
}
inline double Quote::ask_4() const {
  return ask_4_;
}
inline void Quote::set_ask_4(double value) {
  set_has_ask_4();
  ask_4_ = value;
}

// required int32 ask_size_4 = 38;
inline bool Quote::has_ask_size_4() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Quote::set_has_ask_size_4() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Quote::clear_has_ask_size_4() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Quote::clear_ask_size_4() {
  ask_size_4_ = 0;
  clear_has_ask_size_4();
}
inline ::google::protobuf::int32 Quote::ask_size_4() const {
  return ask_size_4_;
}
inline void Quote::set_ask_size_4(::google::protobuf::int32 value) {
  set_has_ask_size_4();
  ask_size_4_ = value;
}

// required double bid_5 = 39;
inline bool Quote::has_bid_5() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Quote::set_has_bid_5() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Quote::clear_has_bid_5() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Quote::clear_bid_5() {
  bid_5_ = 0;
  clear_has_bid_5();
}
inline double Quote::bid_5() const {
  return bid_5_;
}
inline void Quote::set_bid_5(double value) {
  set_has_bid_5();
  bid_5_ = value;
}

// required int32 bid_size_5 = 40;
inline bool Quote::has_bid_size_5() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Quote::set_has_bid_size_5() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Quote::clear_has_bid_size_5() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Quote::clear_bid_size_5() {
  bid_size_5_ = 0;
  clear_has_bid_size_5();
}
inline ::google::protobuf::int32 Quote::bid_size_5() const {
  return bid_size_5_;
}
inline void Quote::set_bid_size_5(::google::protobuf::int32 value) {
  set_has_bid_size_5();
  bid_size_5_ = value;
}

// required double ask_5 = 41;
inline bool Quote::has_ask_5() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Quote::set_has_ask_5() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Quote::clear_has_ask_5() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Quote::clear_ask_5() {
  ask_5_ = 0;
  clear_has_ask_5();
}
inline double Quote::ask_5() const {
  return ask_5_;
}
inline void Quote::set_ask_5(double value) {
  set_has_ask_5();
  ask_5_ = value;
}

// required int32 ask_size_5 = 42;
inline bool Quote::has_ask_size_5() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Quote::set_has_ask_size_5() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Quote::clear_has_ask_size_5() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Quote::clear_ask_size_5() {
  ask_size_5_ = 0;
  clear_has_ask_size_5();
}
inline ::google::protobuf::int32 Quote::ask_size_5() const {
  return ask_size_5_;
}
inline void Quote::set_ask_size_5(::google::protobuf::int32 value) {
  set_has_ask_size_5();
  ask_size_5_ = value;
}

// required double average_price = 43;
inline bool Quote::has_average_price() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Quote::set_has_average_price() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Quote::clear_has_average_price() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Quote::clear_average_price() {
  average_price_ = 0;
  clear_has_average_price();
}
inline double Quote::average_price() const {
  return average_price_;
}
inline void Quote::set_average_price(double value) {
  set_has_average_price();
  average_price_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CTP

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_quote_2eproto__INCLUDED
