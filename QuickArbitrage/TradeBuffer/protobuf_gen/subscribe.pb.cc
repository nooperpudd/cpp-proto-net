// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "subscribe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MSG {

namespace {

const ::google::protobuf::Descriptor* ReqSubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspSubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspSubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUnsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUnsubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspUnsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspUnsubscribe_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_subscribe_2eproto() {
  protobuf_AddDesc_subscribe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "subscribe.proto");
  GOOGLE_CHECK(file != NULL);
  ReqSubscribe_descriptor_ = file->message_type(0);
  static const int ReqSubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscribe, symbols_),
  };
  ReqSubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubscribe_descriptor_,
      ReqSubscribe::default_instance_,
      ReqSubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubscribe));
  RspSubscribe_descriptor_ = file->message_type(1);
  static const int RspSubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubscribe, succ_),
  };
  RspSubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspSubscribe_descriptor_,
      RspSubscribe::default_instance_,
      RspSubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspSubscribe));
  ReqUnsubscribe_descriptor_ = file->message_type(2);
  static const int ReqUnsubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUnsubscribe, symbols_),
  };
  ReqUnsubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUnsubscribe_descriptor_,
      ReqUnsubscribe::default_instance_,
      ReqUnsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUnsubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUnsubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUnsubscribe));
  RspUnsubscribe_descriptor_ = file->message_type(3);
  static const int RspUnsubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnsubscribe, succ_),
  };
  RspUnsubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspUnsubscribe_descriptor_,
      RspUnsubscribe::default_instance_,
      RspUnsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnsubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnsubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspUnsubscribe));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_subscribe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubscribe_descriptor_, &ReqSubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspSubscribe_descriptor_, &RspSubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUnsubscribe_descriptor_, &ReqUnsubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspUnsubscribe_descriptor_, &RspUnsubscribe::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_subscribe_2eproto() {
  delete ReqSubscribe::default_instance_;
  delete ReqSubscribe_reflection_;
  delete RspSubscribe::default_instance_;
  delete RspSubscribe_reflection_;
  delete ReqUnsubscribe::default_instance_;
  delete ReqUnsubscribe_reflection_;
  delete RspUnsubscribe::default_instance_;
  delete RspUnsubscribe_reflection_;
}

void protobuf_AddDesc_subscribe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017subscribe.proto\022\003MSG\"\037\n\014ReqSubscribe\022\017"
    "\n\007symbols\030\001 \003(\t\"\034\n\014RspSubscribe\022\014\n\004succ\030"
    "\001 \002(\010\"!\n\016ReqUnsubscribe\022\017\n\007symbols\030\001 \003(\t"
    "\"\036\n\016RspUnsubscribe\022\014\n\004succ\030\001 \002(\010", 152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subscribe.proto", &protobuf_RegisterTypes);
  ReqSubscribe::default_instance_ = new ReqSubscribe();
  RspSubscribe::default_instance_ = new RspSubscribe();
  ReqUnsubscribe::default_instance_ = new ReqUnsubscribe();
  RspUnsubscribe::default_instance_ = new RspUnsubscribe();
  ReqSubscribe::default_instance_->InitAsDefaultInstance();
  RspSubscribe::default_instance_->InitAsDefaultInstance();
  ReqUnsubscribe::default_instance_->InitAsDefaultInstance();
  RspUnsubscribe::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_subscribe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_subscribe_2eproto {
  StaticDescriptorInitializer_subscribe_2eproto() {
    protobuf_AddDesc_subscribe_2eproto();
  }
} static_descriptor_initializer_subscribe_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqSubscribe::kSymbolsFieldNumber;
#endif  // !_MSC_VER

ReqSubscribe::ReqSubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSubscribe::InitAsDefaultInstance() {
}

ReqSubscribe::ReqSubscribe(const ReqSubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSubscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubscribe::~ReqSubscribe() {
  SharedDtor();
}

void ReqSubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubscribe_descriptor_;
}

const ReqSubscribe& ReqSubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscribe_2eproto();  return *default_instance_;
}

ReqSubscribe* ReqSubscribe::default_instance_ = NULL;

ReqSubscribe* ReqSubscribe::New() const {
  return new ReqSubscribe;
}

void ReqSubscribe::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string symbols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbols(0).data(), this->symbols(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->symbols(i).data(), this->symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbols(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbols(i).data(), this->symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->symbols(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSubscribe::ByteSize() const {
  int total_size = 0;
  
  // repeated string symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubscribe::MergeFrom(const ReqSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubscribe::CopyFrom(const ReqSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubscribe::IsInitialized() const {
  
  return true;
}

void ReqSubscribe::Swap(ReqSubscribe* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubscribe_descriptor_;
  metadata.reflection = ReqSubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspSubscribe::kSuccFieldNumber;
#endif  // !_MSC_VER

RspSubscribe::RspSubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspSubscribe::InitAsDefaultInstance() {
}

RspSubscribe::RspSubscribe(const RspSubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspSubscribe::SharedCtor() {
  _cached_size_ = 0;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspSubscribe::~RspSubscribe() {
  SharedDtor();
}

void RspSubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspSubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspSubscribe_descriptor_;
}

const RspSubscribe& RspSubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscribe_2eproto();  return *default_instance_;
}

RspSubscribe* RspSubscribe::default_instance_ = NULL;

RspSubscribe* RspSubscribe::New() const {
  return new RspSubscribe;
}

void RspSubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    succ_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool succ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool succ = 1;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succ(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspSubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool succ = 1;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succ(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspSubscribe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool succ = 1;
    if (has_succ()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspSubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspSubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspSubscribe::MergeFrom(const RspSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSubscribe::CopyFrom(const RspSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RspSubscribe::Swap(RspSubscribe* other) {
  if (other != this) {
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspSubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspSubscribe_descriptor_;
  metadata.reflection = RspSubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUnsubscribe::kSymbolsFieldNumber;
#endif  // !_MSC_VER

ReqUnsubscribe::ReqUnsubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUnsubscribe::InitAsDefaultInstance() {
}

ReqUnsubscribe::ReqUnsubscribe(const ReqUnsubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUnsubscribe::~ReqUnsubscribe() {
  SharedDtor();
}

void ReqUnsubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUnsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUnsubscribe_descriptor_;
}

const ReqUnsubscribe& ReqUnsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscribe_2eproto();  return *default_instance_;
}

ReqUnsubscribe* ReqUnsubscribe::default_instance_ = NULL;

ReqUnsubscribe* ReqUnsubscribe::New() const {
  return new ReqUnsubscribe;
}

void ReqUnsubscribe::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string symbols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbols(0).data(), this->symbols(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->symbols(i).data(), this->symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbols(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUnsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbols(i).data(), this->symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->symbols(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUnsubscribe::ByteSize() const {
  int total_size = 0;
  
  // repeated string symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUnsubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUnsubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUnsubscribe::MergeFrom(const ReqUnsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnsubscribe::CopyFrom(const ReqUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnsubscribe::IsInitialized() const {
  
  return true;
}

void ReqUnsubscribe::Swap(ReqUnsubscribe* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUnsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUnsubscribe_descriptor_;
  metadata.reflection = ReqUnsubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspUnsubscribe::kSuccFieldNumber;
#endif  // !_MSC_VER

RspUnsubscribe::RspUnsubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspUnsubscribe::InitAsDefaultInstance() {
}

RspUnsubscribe::RspUnsubscribe(const RspUnsubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspUnsubscribe::~RspUnsubscribe() {
  SharedDtor();
}

void RspUnsubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspUnsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspUnsubscribe_descriptor_;
}

const RspUnsubscribe& RspUnsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscribe_2eproto();  return *default_instance_;
}

RspUnsubscribe* RspUnsubscribe::default_instance_ = NULL;

RspUnsubscribe* RspUnsubscribe::New() const {
  return new RspUnsubscribe;
}

void RspUnsubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    succ_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool succ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool succ = 1;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succ(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspUnsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool succ = 1;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succ(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspUnsubscribe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool succ = 1;
    if (has_succ()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspUnsubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspUnsubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspUnsubscribe::MergeFrom(const RspUnsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUnsubscribe::CopyFrom(const RspUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUnsubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RspUnsubscribe::Swap(RspUnsubscribe* other) {
  if (other != this) {
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspUnsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspUnsubscribe_descriptor_;
  metadata.reflection = RspUnsubscribe_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MSG

// @@protoc_insertion_point(global_scope)
