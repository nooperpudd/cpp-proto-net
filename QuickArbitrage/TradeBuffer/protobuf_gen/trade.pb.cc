// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protoc {

namespace {

const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_trade_2eproto() {
  protobuf_AddDesc_trade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trade.proto");
  GOOGLE_CHECK(file != NULL);
  AccountInfo_descriptor_ = file->message_type(0);
  static const int AccountInfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, premortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, precredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, predeposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, interestbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, currmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, withdrawquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, deliverymargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, exchangedeliverymargin_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  PositionInfo_descriptor_ = file->message_type(1);
  static const int PositionInfo_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, posidirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, positiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, ydposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, longfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, shortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, longfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, shortfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, openvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, openamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, positioncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, usemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, opencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, combposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, comblongfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, combshortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, todayposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, marginratebymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, marginratebyvolume_),
  };
  PositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInfo_descriptor_,
      PositionInfo::default_instance_,
      PositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInfo_descriptor_, &PositionInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trade_2eproto() {
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete PositionInfo::default_instance_;
  delete PositionInfo_reflection_;
}

void protobuf_AddDesc_trade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013trade.proto\022\006protoc\"\361\004\n\013AccountInfo\022\020\n"
    "\010BrokerID\030\001 \002(\t\022\021\n\tAccountID\030\002 \002(\t\022\023\n\013Pr"
    "eMortgage\030\003 \002(\001\022\021\n\tPreCredit\030\004 \002(\001\022\022\n\nPr"
    "eDeposit\030\005 \002(\001\022\022\n\nPreBalance\030\006 \002(\001\022\021\n\tPr"
    "eMargin\030\007 \002(\001\022\024\n\014InterestBase\030\010 \002(\001\022\020\n\010I"
    "nterest\030\t \002(\001\022\017\n\007Deposit\030\n \002(\001\022\020\n\010Withdr"
    "aw\030\013 \002(\001\022\024\n\014FrozenMargin\030\014 \002(\001\022\022\n\nFrozen"
    "Cash\030\r \002(\001\022\030\n\020FrozenCommission\030\016 \002(\001\022\022\n\n"
    "CurrMargin\030\017 \002(\001\022\016\n\006CashIn\030\020 \002(\001\022\022\n\nComm"
    "ission\030\021 \002(\001\022\023\n\013CloseProfit\030\022 \002(\001\022\026\n\016Pos"
    "itionProfit\030\023 \002(\001\022\017\n\007Balance\030\024 \002(\001\022\021\n\tAv"
    "ailable\030\025 \002(\001\022\025\n\rWithdrawQuota\030\026 \002(\001\022\017\n\007"
    "Reserve\030\027 \002(\001\022\022\n\nTradingDay\030\030 \002(\t\022\024\n\014Set"
    "tlementID\030\031 \002(\005\022\016\n\006Credit\030\032 \002(\001\022\020\n\010Mortg"
    "age\030\033 \002(\001\022\026\n\016ExchangeMargin\030\034 \002(\001\022\026\n\016Del"
    "iveryMargin\030\035 \002(\001\022\036\n\026ExchangeDeliveryMar"
    "gin\030\036 \002(\001\"\206\007\n\014PositionInfo\022\024\n\014Instrument"
    "ID\030\001 \002(\t\022\020\n\010BrokerID\030\002 \002(\t\022\022\n\nInvestorID"
    "\030\003 \002(\t\022\025\n\rPosiDirection\030\004 \002(\t\022\021\n\tHedgeFl"
    "ag\030\005 \002(\t\022\024\n\014PositionDate\030\006 \002(\t\022\022\n\nYdPosi"
    "tion\030\007 \002(\005\022\020\n\010Position\030\010 \002(\005\022\022\n\nLongFroz"
    "en\030\t \002(\005\022\023\n\013ShortFrozen\030\n \002(\005\022\030\n\020LongFro"
    "zenAmount\030\013 \002(\001\022\031\n\021ShortFrozenAmount\030\014 \002"
    "(\001\022\022\n\nOpenVolume\030\r \002(\005\022\023\n\013CloseVolume\030\016 "
    "\002(\005\022\022\n\nOpenAmount\030\017 \002(\001\022\023\n\013CloseAmount\030\020"
    " \002(\001\022\024\n\014PositionCost\030\021 \002(\001\022\021\n\tPreMargin\030"
    "\022 \002(\001\022\021\n\tUseMargin\030\023 \002(\001\022\024\n\014FrozenMargin"
    "\030\024 \002(\001\022\022\n\nFrozenCash\030\025 \002(\001\022\030\n\020FrozenComm"
    "ission\030\026 \002(\001\022\016\n\006CashIn\030\027 \002(\001\022\022\n\nCommissi"
    "on\030\030 \002(\001\022\023\n\013CloseProfit\030\031 \002(\001\022\026\n\016Positio"
    "nProfit\030\032 \002(\001\022\032\n\022PreSettlementPrice\030\033 \002("
    "\001\022\027\n\017SettlementPrice\030\034 \002(\001\022\022\n\nTradingDay"
    "\030\035 \002(\t\022\024\n\014SettlementID\030\036 \002(\005\022\020\n\010OpenCost"
    "\030\037 \002(\001\022\026\n\016ExchangeMargin\030  \002(\001\022\024\n\014CombPo"
    "sition\030! \002(\005\022\026\n\016CombLongFrozen\030\" \002(\005\022\027\n\017"
    "CombShortFrozen\030# \002(\005\022\031\n\021CloseProfitByDa"
    "te\030$ \002(\001\022\032\n\022CloseProfitByTrade\030% \002(\001\022\025\n\r"
    "TodayPosition\030& \002(\005\022\031\n\021MarginRateByMoney"
    "\030\' \002(\001\022\032\n\022MarginRateByVolume\030( \002(\001", 1554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade.proto", &protobuf_RegisterTypes);
  AccountInfo::default_instance_ = new AccountInfo();
  PositionInfo::default_instance_ = new PositionInfo();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  PositionInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trade_2eproto {
  StaticDescriptorInitializer_trade_2eproto() {
    protobuf_AddDesc_trade_2eproto();
  }
} static_descriptor_initializer_trade_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kBrokerIDFieldNumber;
const int AccountInfo::kAccountIDFieldNumber;
const int AccountInfo::kPreMortgageFieldNumber;
const int AccountInfo::kPreCreditFieldNumber;
const int AccountInfo::kPreDepositFieldNumber;
const int AccountInfo::kPreBalanceFieldNumber;
const int AccountInfo::kPreMarginFieldNumber;
const int AccountInfo::kInterestBaseFieldNumber;
const int AccountInfo::kInterestFieldNumber;
const int AccountInfo::kDepositFieldNumber;
const int AccountInfo::kWithdrawFieldNumber;
const int AccountInfo::kFrozenMarginFieldNumber;
const int AccountInfo::kFrozenCashFieldNumber;
const int AccountInfo::kFrozenCommissionFieldNumber;
const int AccountInfo::kCurrMarginFieldNumber;
const int AccountInfo::kCashInFieldNumber;
const int AccountInfo::kCommissionFieldNumber;
const int AccountInfo::kCloseProfitFieldNumber;
const int AccountInfo::kPositionProfitFieldNumber;
const int AccountInfo::kBalanceFieldNumber;
const int AccountInfo::kAvailableFieldNumber;
const int AccountInfo::kWithdrawQuotaFieldNumber;
const int AccountInfo::kReserveFieldNumber;
const int AccountInfo::kTradingDayFieldNumber;
const int AccountInfo::kSettlementIDFieldNumber;
const int AccountInfo::kCreditFieldNumber;
const int AccountInfo::kMortgageFieldNumber;
const int AccountInfo::kExchangeMarginFieldNumber;
const int AccountInfo::kDeliveryMarginFieldNumber;
const int AccountInfo::kExchangeDeliveryMarginFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  premortgage_ = 0;
  precredit_ = 0;
  predeposit_ = 0;
  prebalance_ = 0;
  premargin_ = 0;
  interestbase_ = 0;
  interest_ = 0;
  deposit_ = 0;
  withdraw_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  currmargin_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  balance_ = 0;
  available_ = 0;
  withdrawquota_ = 0;
  reserve_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  credit_ = 0;
  mortgage_ = 0;
  exchangemargin_ = 0;
  deliverymargin_ = 0;
  exchangedeliverymargin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    premortgage_ = 0;
    precredit_ = 0;
    predeposit_ = 0;
    prebalance_ = 0;
    premargin_ = 0;
    interestbase_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    interest_ = 0;
    deposit_ = 0;
    withdraw_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    currmargin_ = 0;
    cashin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    commission_ = 0;
    closeprofit_ = 0;
    positionprofit_ = 0;
    balance_ = 0;
    available_ = 0;
    withdrawquota_ = 0;
    reserve_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    settlementid_ = 0;
    credit_ = 0;
    mortgage_ = 0;
    exchangemargin_ = 0;
    deliverymargin_ = 0;
    exchangedeliverymargin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountID;
        break;
      }
      
      // required string AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_PreMortgage;
        break;
      }
      
      // required double PreMortgage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premortgage_)));
          set_has_premortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_PreCredit;
        break;
      }
      
      // required double PreCredit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreCredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precredit_)));
          set_has_precredit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_PreDeposit;
        break;
      }
      
      // required double PreDeposit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreDeposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predeposit_)));
          set_has_predeposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PreBalance;
        break;
      }
      
      // required double PreBalance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));
          set_has_prebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_PreMargin;
        break;
      }
      
      // required double PreMargin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_InterestBase;
        break;
      }
      
      // required double InterestBase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_InterestBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interestbase_)));
          set_has_interestbase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Interest;
        break;
      }
      
      // required double Interest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_Deposit;
        break;
      }
      
      // required double Deposit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
          set_has_deposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_Withdraw;
        break;
      }
      
      // required double Withdraw = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
          set_has_withdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_FrozenMargin;
        break;
      }
      
      // required double FrozenMargin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_FrozenCash;
        break;
      }
      
      // required double FrozenCash = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_FrozenCommission;
        break;
      }
      
      // required double FrozenCommission = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_CurrMargin;
        break;
      }
      
      // required double CurrMargin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurrMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));
          set_has_currmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_CashIn;
        break;
      }
      
      // required double CashIn = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_Commission;
        break;
      }
      
      // required double Commission = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_CloseProfit;
        break;
      }
      
      // required double CloseProfit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PositionProfit;
        break;
      }
      
      // required double PositionProfit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_Balance;
        break;
      }
      
      // required double Balance = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_Available;
        break;
      }
      
      // required double Available = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_WithdrawQuota;
        break;
      }
      
      // required double WithdrawQuota = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WithdrawQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));
          set_has_withdrawquota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_Reserve;
        break;
      }
      
      // required double Reserve = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_TradingDay;
        break;
      }
      
      // required string TradingDay = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_SettlementID;
        break;
      }
      
      // required int32 SettlementID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_Credit;
        break;
      }
      
      // required double Credit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_Mortgage;
        break;
      }
      
      // required double Mortgage = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));
          set_has_mortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_ExchangeMargin;
        break;
      }
      
      // required double ExchangeMargin = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_DeliveryMargin;
        break;
      }
      
      // required double DeliveryMargin = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deliverymargin_)));
          set_has_deliverymargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_ExchangeDeliveryMargin;
        break;
      }
      
      // required double ExchangeDeliveryMargin = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeDeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangedeliverymargin_)));
          set_has_exchangedeliverymargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }
  
  // required string AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountid(), output);
  }
  
  // required double PreMortgage = 3;
  if (has_premortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->premortgage(), output);
  }
  
  // required double PreCredit = 4;
  if (has_precredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->precredit(), output);
  }
  
  // required double PreDeposit = 5;
  if (has_predeposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->predeposit(), output);
  }
  
  // required double PreBalance = 6;
  if (has_prebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->prebalance(), output);
  }
  
  // required double PreMargin = 7;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->premargin(), output);
  }
  
  // required double InterestBase = 8;
  if (has_interestbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->interestbase(), output);
  }
  
  // required double Interest = 9;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->interest(), output);
  }
  
  // required double Deposit = 10;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->deposit(), output);
  }
  
  // required double Withdraw = 11;
  if (has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->withdraw(), output);
  }
  
  // required double FrozenMargin = 12;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->frozenmargin(), output);
  }
  
  // required double FrozenCash = 13;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->frozencash(), output);
  }
  
  // required double FrozenCommission = 14;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozencommission(), output);
  }
  
  // required double CurrMargin = 15;
  if (has_currmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->currmargin(), output);
  }
  
  // required double CashIn = 16;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->cashin(), output);
  }
  
  // required double Commission = 17;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->commission(), output);
  }
  
  // required double CloseProfit = 18;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->closeprofit(), output);
  }
  
  // required double PositionProfit = 19;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->positionprofit(), output);
  }
  
  // required double Balance = 20;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->balance(), output);
  }
  
  // required double Available = 21;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->available(), output);
  }
  
  // required double WithdrawQuota = 22;
  if (has_withdrawquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->withdrawquota(), output);
  }
  
  // required double Reserve = 23;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->reserve(), output);
  }
  
  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tradingday(), output);
  }
  
  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->settlementid(), output);
  }
  
  // required double Credit = 26;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->credit(), output);
  }
  
  // required double Mortgage = 27;
  if (has_mortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->mortgage(), output);
  }
  
  // required double ExchangeMargin = 28;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->exchangemargin(), output);
  }
  
  // required double DeliveryMargin = 29;
  if (has_deliverymargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->deliverymargin(), output);
  }
  
  // required double ExchangeDeliveryMargin = 30;
  if (has_exchangedeliverymargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->exchangedeliverymargin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }
  
  // required string AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }
  
  // required double PreMortgage = 3;
  if (has_premortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->premortgage(), target);
  }
  
  // required double PreCredit = 4;
  if (has_precredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->precredit(), target);
  }
  
  // required double PreDeposit = 5;
  if (has_predeposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->predeposit(), target);
  }
  
  // required double PreBalance = 6;
  if (has_prebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->prebalance(), target);
  }
  
  // required double PreMargin = 7;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->premargin(), target);
  }
  
  // required double InterestBase = 8;
  if (has_interestbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->interestbase(), target);
  }
  
  // required double Interest = 9;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->interest(), target);
  }
  
  // required double Deposit = 10;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->deposit(), target);
  }
  
  // required double Withdraw = 11;
  if (has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->withdraw(), target);
  }
  
  // required double FrozenMargin = 12;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->frozenmargin(), target);
  }
  
  // required double FrozenCash = 13;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->frozencash(), target);
  }
  
  // required double FrozenCommission = 14;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozencommission(), target);
  }
  
  // required double CurrMargin = 15;
  if (has_currmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->currmargin(), target);
  }
  
  // required double CashIn = 16;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->cashin(), target);
  }
  
  // required double Commission = 17;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->commission(), target);
  }
  
  // required double CloseProfit = 18;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->closeprofit(), target);
  }
  
  // required double PositionProfit = 19;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->positionprofit(), target);
  }
  
  // required double Balance = 20;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->balance(), target);
  }
  
  // required double Available = 21;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->available(), target);
  }
  
  // required double WithdrawQuota = 22;
  if (has_withdrawquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->withdrawquota(), target);
  }
  
  // required double Reserve = 23;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->reserve(), target);
  }
  
  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->tradingday(), target);
  }
  
  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->settlementid(), target);
  }
  
  // required double Credit = 26;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->credit(), target);
  }
  
  // required double Mortgage = 27;
  if (has_mortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->mortgage(), target);
  }
  
  // required double ExchangeMargin = 28;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->exchangemargin(), target);
  }
  
  // required double DeliveryMargin = 29;
  if (has_deliverymargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->deliverymargin(), target);
  }
  
  // required double ExchangeDeliveryMargin = 30;
  if (has_exchangedeliverymargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->exchangedeliverymargin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }
    
    // required double PreMortgage = 3;
    if (has_premortgage()) {
      total_size += 1 + 8;
    }
    
    // required double PreCredit = 4;
    if (has_precredit()) {
      total_size += 1 + 8;
    }
    
    // required double PreDeposit = 5;
    if (has_predeposit()) {
      total_size += 1 + 8;
    }
    
    // required double PreBalance = 6;
    if (has_prebalance()) {
      total_size += 1 + 8;
    }
    
    // required double PreMargin = 7;
    if (has_premargin()) {
      total_size += 1 + 8;
    }
    
    // required double InterestBase = 8;
    if (has_interestbase()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double Interest = 9;
    if (has_interest()) {
      total_size += 1 + 8;
    }
    
    // required double Deposit = 10;
    if (has_deposit()) {
      total_size += 1 + 8;
    }
    
    // required double Withdraw = 11;
    if (has_withdraw()) {
      total_size += 1 + 8;
    }
    
    // required double FrozenMargin = 12;
    if (has_frozenmargin()) {
      total_size += 1 + 8;
    }
    
    // required double FrozenCash = 13;
    if (has_frozencash()) {
      total_size += 1 + 8;
    }
    
    // required double FrozenCommission = 14;
    if (has_frozencommission()) {
      total_size += 1 + 8;
    }
    
    // required double CurrMargin = 15;
    if (has_currmargin()) {
      total_size += 1 + 8;
    }
    
    // required double CashIn = 16;
    if (has_cashin()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double Commission = 17;
    if (has_commission()) {
      total_size += 2 + 8;
    }
    
    // required double CloseProfit = 18;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }
    
    // required double PositionProfit = 19;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }
    
    // required double Balance = 20;
    if (has_balance()) {
      total_size += 2 + 8;
    }
    
    // required double Available = 21;
    if (has_available()) {
      total_size += 2 + 8;
    }
    
    // required double WithdrawQuota = 22;
    if (has_withdrawquota()) {
      total_size += 2 + 8;
    }
    
    // required double Reserve = 23;
    if (has_reserve()) {
      total_size += 2 + 8;
    }
    
    // required string TradingDay = 24;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 SettlementID = 25;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }
    
    // required double Credit = 26;
    if (has_credit()) {
      total_size += 2 + 8;
    }
    
    // required double Mortgage = 27;
    if (has_mortgage()) {
      total_size += 2 + 8;
    }
    
    // required double ExchangeMargin = 28;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }
    
    // required double DeliveryMargin = 29;
    if (has_deliverymargin()) {
      total_size += 2 + 8;
    }
    
    // required double ExchangeDeliveryMargin = 30;
    if (has_exchangedeliverymargin()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_premortgage()) {
      set_premortgage(from.premortgage());
    }
    if (from.has_precredit()) {
      set_precredit(from.precredit());
    }
    if (from.has_predeposit()) {
      set_predeposit(from.predeposit());
    }
    if (from.has_prebalance()) {
      set_prebalance(from.prebalance());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_interestbase()) {
      set_interestbase(from.interestbase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_deposit()) {
      set_deposit(from.deposit());
    }
    if (from.has_withdraw()) {
      set_withdraw(from.withdraw());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_currmargin()) {
      set_currmargin(from.currmargin());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_withdrawquota()) {
      set_withdrawquota(from.withdrawquota());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_mortgage()) {
      set_mortgage(from.mortgage());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
    if (from.has_deliverymargin()) {
      set_deliverymargin(from.deliverymargin());
    }
    if (from.has_exchangedeliverymargin()) {
      set_exchangedeliverymargin(from.exchangedeliverymargin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;
  
  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(premortgage_, other->premortgage_);
    std::swap(precredit_, other->precredit_);
    std::swap(predeposit_, other->predeposit_);
    std::swap(prebalance_, other->prebalance_);
    std::swap(premargin_, other->premargin_);
    std::swap(interestbase_, other->interestbase_);
    std::swap(interest_, other->interest_);
    std::swap(deposit_, other->deposit_);
    std::swap(withdraw_, other->withdraw_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(currmargin_, other->currmargin_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(balance_, other->balance_);
    std::swap(available_, other->available_);
    std::swap(withdrawquota_, other->withdrawquota_);
    std::swap(reserve_, other->reserve_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(credit_, other->credit_);
    std::swap(mortgage_, other->mortgage_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(deliverymargin_, other->deliverymargin_);
    std::swap(exchangedeliverymargin_, other->exchangedeliverymargin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionInfo::kInstrumentIDFieldNumber;
const int PositionInfo::kBrokerIDFieldNumber;
const int PositionInfo::kInvestorIDFieldNumber;
const int PositionInfo::kPosiDirectionFieldNumber;
const int PositionInfo::kHedgeFlagFieldNumber;
const int PositionInfo::kPositionDateFieldNumber;
const int PositionInfo::kYdPositionFieldNumber;
const int PositionInfo::kPositionFieldNumber;
const int PositionInfo::kLongFrozenFieldNumber;
const int PositionInfo::kShortFrozenFieldNumber;
const int PositionInfo::kLongFrozenAmountFieldNumber;
const int PositionInfo::kShortFrozenAmountFieldNumber;
const int PositionInfo::kOpenVolumeFieldNumber;
const int PositionInfo::kCloseVolumeFieldNumber;
const int PositionInfo::kOpenAmountFieldNumber;
const int PositionInfo::kCloseAmountFieldNumber;
const int PositionInfo::kPositionCostFieldNumber;
const int PositionInfo::kPreMarginFieldNumber;
const int PositionInfo::kUseMarginFieldNumber;
const int PositionInfo::kFrozenMarginFieldNumber;
const int PositionInfo::kFrozenCashFieldNumber;
const int PositionInfo::kFrozenCommissionFieldNumber;
const int PositionInfo::kCashInFieldNumber;
const int PositionInfo::kCommissionFieldNumber;
const int PositionInfo::kCloseProfitFieldNumber;
const int PositionInfo::kPositionProfitFieldNumber;
const int PositionInfo::kPreSettlementPriceFieldNumber;
const int PositionInfo::kSettlementPriceFieldNumber;
const int PositionInfo::kTradingDayFieldNumber;
const int PositionInfo::kSettlementIDFieldNumber;
const int PositionInfo::kOpenCostFieldNumber;
const int PositionInfo::kExchangeMarginFieldNumber;
const int PositionInfo::kCombPositionFieldNumber;
const int PositionInfo::kCombLongFrozenFieldNumber;
const int PositionInfo::kCombShortFrozenFieldNumber;
const int PositionInfo::kCloseProfitByDateFieldNumber;
const int PositionInfo::kCloseProfitByTradeFieldNumber;
const int PositionInfo::kTodayPositionFieldNumber;
const int PositionInfo::kMarginRateByMoneyFieldNumber;
const int PositionInfo::kMarginRateByVolumeFieldNumber;
#endif  // !_MSC_VER

PositionInfo::PositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionInfo::InitAsDefaultInstance() {
}

PositionInfo::PositionInfo(const PositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionInfo::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posidirection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hedgeflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  positiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ydposition_ = 0;
  position_ = 0;
  longfrozen_ = 0;
  shortfrozen_ = 0;
  longfrozenamount_ = 0;
  shortfrozenamount_ = 0;
  openvolume_ = 0;
  closevolume_ = 0;
  openamount_ = 0;
  closeamount_ = 0;
  positioncost_ = 0;
  premargin_ = 0;
  usemargin_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  presettlementprice_ = 0;
  settlementprice_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  opencost_ = 0;
  exchangemargin_ = 0;
  combposition_ = 0;
  comblongfrozen_ = 0;
  combshortfrozen_ = 0;
  closeprofitbydate_ = 0;
  closeprofitbytrade_ = 0;
  todayposition_ = 0;
  marginratebymoney_ = 0;
  marginratebyvolume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInfo::~PositionInfo() {
  SharedDtor();
}

void PositionInfo::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (posidirection_ != &::google::protobuf::internal::kEmptyString) {
    delete posidirection_;
  }
  if (hedgeflag_ != &::google::protobuf::internal::kEmptyString) {
    delete hedgeflag_;
  }
  if (positiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete positiondate_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void PositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInfo_descriptor_;
}

const PositionInfo& PositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();  return *default_instance_;
}

PositionInfo* PositionInfo::default_instance_ = NULL;

PositionInfo* PositionInfo::New() const {
  return new PositionInfo;
}

void PositionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    if (has_posidirection()) {
      if (posidirection_ != &::google::protobuf::internal::kEmptyString) {
        posidirection_->clear();
      }
    }
    if (has_hedgeflag()) {
      if (hedgeflag_ != &::google::protobuf::internal::kEmptyString) {
        hedgeflag_->clear();
      }
    }
    if (has_positiondate()) {
      if (positiondate_ != &::google::protobuf::internal::kEmptyString) {
        positiondate_->clear();
      }
    }
    ydposition_ = 0;
    position_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    longfrozen_ = 0;
    shortfrozen_ = 0;
    longfrozenamount_ = 0;
    shortfrozenamount_ = 0;
    openvolume_ = 0;
    closevolume_ = 0;
    openamount_ = 0;
    closeamount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    positioncost_ = 0;
    premargin_ = 0;
    usemargin_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    cashin_ = 0;
    commission_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    closeprofit_ = 0;
    positionprofit_ = 0;
    presettlementprice_ = 0;
    settlementprice_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    opencost_ = 0;
    exchangemargin_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    combposition_ = 0;
    comblongfrozen_ = 0;
    combshortfrozen_ = 0;
    closeprofitbydate_ = 0;
    closeprofitbytrade_ = 0;
    todayposition_ = 0;
    marginratebymoney_ = 0;
    marginratebyvolume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }
      
      // required string BrokerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }
      
      // required string InvestorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PosiDirection;
        break;
      }
      
      // required string PosiDirection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosiDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posidirection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->posidirection().data(), this->posidirection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HedgeFlag;
        break;
      }
      
      // required string HedgeFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedgeflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hedgeflag().data(), this->hedgeflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PositionDate;
        break;
      }
      
      // required string PositionDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positiondate().data(), this->positiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_YdPosition;
        break;
      }
      
      // required int32 YdPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YdPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));
          set_has_ydposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Position;
        break;
      }
      
      // required int32 Position = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LongFrozen;
        break;
      }
      
      // required int32 LongFrozen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longfrozen_)));
          set_has_longfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ShortFrozen;
        break;
      }
      
      // required int32 ShortFrozen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortfrozen_)));
          set_has_shortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_LongFrozenAmount;
        break;
      }
      
      // required double LongFrozenAmount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LongFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longfrozenamount_)));
          set_has_longfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_ShortFrozenAmount;
        break;
      }
      
      // required double ShortFrozenAmount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShortFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortfrozenamount_)));
          set_has_shortfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_OpenVolume;
        break;
      }
      
      // required int32 OpenVolume = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));
          set_has_openvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CloseVolume;
        break;
      }
      
      // required int32 CloseVolume = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
          set_has_closevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_OpenAmount;
        break;
      }
      
      // required double OpenAmount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));
          set_has_openamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_CloseAmount;
        break;
      }
      
      // required double CloseAmount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
          set_has_closeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_PositionCost;
        break;
      }
      
      // required double PositionCost = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncost_)));
          set_has_positioncost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_PreMargin;
        break;
      }
      
      // required double PreMargin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_UseMargin;
        break;
      }
      
      // required double UseMargin = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UseMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));
          set_has_usemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_FrozenMargin;
        break;
      }
      
      // required double FrozenMargin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_FrozenCash;
        break;
      }
      
      // required double FrozenCash = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_FrozenCommission;
        break;
      }
      
      // required double FrozenCommission = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_CashIn;
        break;
      }
      
      // required double CashIn = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_Commission;
        break;
      }
      
      // required double Commission = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_CloseProfit;
        break;
      }
      
      // required double CloseProfit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_PositionProfit;
        break;
      }
      
      // required double PositionProfit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_PreSettlementPrice;
        break;
      }
      
      // required double PreSettlementPrice = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_SettlementPrice;
        break;
      }
      
      // required double SettlementPrice = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_TradingDay;
        break;
      }
      
      // required string TradingDay = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_SettlementID;
        break;
      }
      
      // required int32 SettlementID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_OpenCost;
        break;
      }
      
      // required double OpenCost = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));
          set_has_opencost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_ExchangeMargin;
        break;
      }
      
      // required double ExchangeMargin = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CombPosition;
        break;
      }
      
      // required int32 CombPosition = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combposition_)));
          set_has_combposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_CombLongFrozen;
        break;
      }
      
      // required int32 CombLongFrozen = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombLongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comblongfrozen_)));
          set_has_comblongfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CombShortFrozen;
        break;
      }
      
      // required int32 CombShortFrozen = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combshortfrozen_)));
          set_has_combshortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_CloseProfitByDate;
        break;
      }
      
      // required double CloseProfitByDate = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));
          set_has_closeprofitbydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_CloseProfitByTrade;
        break;
      }
      
      // required double CloseProfitByTrade = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));
          set_has_closeprofitbytrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_TodayPosition;
        break;
      }
      
      // required int32 TodayPosition = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayposition_)));
          set_has_todayposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_MarginRateByMoney;
        break;
      }
      
      // required double MarginRateByMoney = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));
          set_has_marginratebymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_MarginRateByVolume;
        break;
      }
      
      // required double MarginRateByVolume = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));
          set_has_marginratebyvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }
  
  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brokerid(), output);
  }
  
  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->investorid(), output);
  }
  
  // required string PosiDirection = 4;
  if (has_posidirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->posidirection().data(), this->posidirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->posidirection(), output);
  }
  
  // required string HedgeFlag = 5;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hedgeflag(), output);
  }
  
  // required string PositionDate = 6;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->positiondate(), output);
  }
  
  // required int32 YdPosition = 7;
  if (has_ydposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ydposition(), output);
  }
  
  // required int32 Position = 8;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->position(), output);
  }
  
  // required int32 LongFrozen = 9;
  if (has_longfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->longfrozen(), output);
  }
  
  // required int32 ShortFrozen = 10;
  if (has_shortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shortfrozen(), output);
  }
  
  // required double LongFrozenAmount = 11;
  if (has_longfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longfrozenamount(), output);
  }
  
  // required double ShortFrozenAmount = 12;
  if (has_shortfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->shortfrozenamount(), output);
  }
  
  // required int32 OpenVolume = 13;
  if (has_openvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->openvolume(), output);
  }
  
  // required int32 CloseVolume = 14;
  if (has_closevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->closevolume(), output);
  }
  
  // required double OpenAmount = 15;
  if (has_openamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->openamount(), output);
  }
  
  // required double CloseAmount = 16;
  if (has_closeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->closeamount(), output);
  }
  
  // required double PositionCost = 17;
  if (has_positioncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->positioncost(), output);
  }
  
  // required double PreMargin = 18;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->premargin(), output);
  }
  
  // required double UseMargin = 19;
  if (has_usemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->usemargin(), output);
  }
  
  // required double FrozenMargin = 20;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->frozenmargin(), output);
  }
  
  // required double FrozenCash = 21;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->frozencash(), output);
  }
  
  // required double FrozenCommission = 22;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->frozencommission(), output);
  }
  
  // required double CashIn = 23;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->cashin(), output);
  }
  
  // required double Commission = 24;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->commission(), output);
  }
  
  // required double CloseProfit = 25;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->closeprofit(), output);
  }
  
  // required double PositionProfit = 26;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->positionprofit(), output);
  }
  
  // required double PreSettlementPrice = 27;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->presettlementprice(), output);
  }
  
  // required double SettlementPrice = 28;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->settlementprice(), output);
  }
  
  // required string TradingDay = 29;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->tradingday(), output);
  }
  
  // required int32 SettlementID = 30;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->settlementid(), output);
  }
  
  // required double OpenCost = 31;
  if (has_opencost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->opencost(), output);
  }
  
  // required double ExchangeMargin = 32;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->exchangemargin(), output);
  }
  
  // required int32 CombPosition = 33;
  if (has_combposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->combposition(), output);
  }
  
  // required int32 CombLongFrozen = 34;
  if (has_comblongfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->comblongfrozen(), output);
  }
  
  // required int32 CombShortFrozen = 35;
  if (has_combshortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->combshortfrozen(), output);
  }
  
  // required double CloseProfitByDate = 36;
  if (has_closeprofitbydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->closeprofitbydate(), output);
  }
  
  // required double CloseProfitByTrade = 37;
  if (has_closeprofitbytrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->closeprofitbytrade(), output);
  }
  
  // required int32 TodayPosition = 38;
  if (has_todayposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->todayposition(), output);
  }
  
  // required double MarginRateByMoney = 39;
  if (has_marginratebymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->marginratebymoney(), output);
  }
  
  // required double MarginRateByVolume = 40;
  if (has_marginratebyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->marginratebyvolume(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }
  
  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }
  
  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }
  
  // required string PosiDirection = 4;
  if (has_posidirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->posidirection().data(), this->posidirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->posidirection(), target);
  }
  
  // required string HedgeFlag = 5;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hedgeflag(), target);
  }
  
  // required string PositionDate = 6;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->positiondate(), target);
  }
  
  // required int32 YdPosition = 7;
  if (has_ydposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ydposition(), target);
  }
  
  // required int32 Position = 8;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->position(), target);
  }
  
  // required int32 LongFrozen = 9;
  if (has_longfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->longfrozen(), target);
  }
  
  // required int32 ShortFrozen = 10;
  if (has_shortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shortfrozen(), target);
  }
  
  // required double LongFrozenAmount = 11;
  if (has_longfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longfrozenamount(), target);
  }
  
  // required double ShortFrozenAmount = 12;
  if (has_shortfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->shortfrozenamount(), target);
  }
  
  // required int32 OpenVolume = 13;
  if (has_openvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->openvolume(), target);
  }
  
  // required int32 CloseVolume = 14;
  if (has_closevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->closevolume(), target);
  }
  
  // required double OpenAmount = 15;
  if (has_openamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->openamount(), target);
  }
  
  // required double CloseAmount = 16;
  if (has_closeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->closeamount(), target);
  }
  
  // required double PositionCost = 17;
  if (has_positioncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->positioncost(), target);
  }
  
  // required double PreMargin = 18;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->premargin(), target);
  }
  
  // required double UseMargin = 19;
  if (has_usemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->usemargin(), target);
  }
  
  // required double FrozenMargin = 20;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->frozenmargin(), target);
  }
  
  // required double FrozenCash = 21;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->frozencash(), target);
  }
  
  // required double FrozenCommission = 22;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->frozencommission(), target);
  }
  
  // required double CashIn = 23;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->cashin(), target);
  }
  
  // required double Commission = 24;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->commission(), target);
  }
  
  // required double CloseProfit = 25;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->closeprofit(), target);
  }
  
  // required double PositionProfit = 26;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->positionprofit(), target);
  }
  
  // required double PreSettlementPrice = 27;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->presettlementprice(), target);
  }
  
  // required double SettlementPrice = 28;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->settlementprice(), target);
  }
  
  // required string TradingDay = 29;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->tradingday(), target);
  }
  
  // required int32 SettlementID = 30;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->settlementid(), target);
  }
  
  // required double OpenCost = 31;
  if (has_opencost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->opencost(), target);
  }
  
  // required double ExchangeMargin = 32;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->exchangemargin(), target);
  }
  
  // required int32 CombPosition = 33;
  if (has_combposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->combposition(), target);
  }
  
  // required int32 CombLongFrozen = 34;
  if (has_comblongfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->comblongfrozen(), target);
  }
  
  // required int32 CombShortFrozen = 35;
  if (has_combshortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->combshortfrozen(), target);
  }
  
  // required double CloseProfitByDate = 36;
  if (has_closeprofitbydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->closeprofitbydate(), target);
  }
  
  // required double CloseProfitByTrade = 37;
  if (has_closeprofitbytrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->closeprofitbytrade(), target);
  }
  
  // required int32 TodayPosition = 38;
  if (has_todayposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->todayposition(), target);
  }
  
  // required double MarginRateByMoney = 39;
  if (has_marginratebymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->marginratebymoney(), target);
  }
  
  // required double MarginRateByVolume = 40;
  if (has_marginratebyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->marginratebyvolume(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string BrokerID = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string InvestorID = 3;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }
    
    // required string PosiDirection = 4;
    if (has_posidirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->posidirection());
    }
    
    // required string HedgeFlag = 5;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hedgeflag());
    }
    
    // required string PositionDate = 6;
    if (has_positiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positiondate());
    }
    
    // required int32 YdPosition = 7;
    if (has_ydposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydposition());
    }
    
    // required int32 Position = 8;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LongFrozen = 9;
    if (has_longfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longfrozen());
    }
    
    // required int32 ShortFrozen = 10;
    if (has_shortfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortfrozen());
    }
    
    // required double LongFrozenAmount = 11;
    if (has_longfrozenamount()) {
      total_size += 1 + 8;
    }
    
    // required double ShortFrozenAmount = 12;
    if (has_shortfrozenamount()) {
      total_size += 1 + 8;
    }
    
    // required int32 OpenVolume = 13;
    if (has_openvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openvolume());
    }
    
    // required int32 CloseVolume = 14;
    if (has_closevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closevolume());
    }
    
    // required double OpenAmount = 15;
    if (has_openamount()) {
      total_size += 1 + 8;
    }
    
    // required double CloseAmount = 16;
    if (has_closeamount()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double PositionCost = 17;
    if (has_positioncost()) {
      total_size += 2 + 8;
    }
    
    // required double PreMargin = 18;
    if (has_premargin()) {
      total_size += 2 + 8;
    }
    
    // required double UseMargin = 19;
    if (has_usemargin()) {
      total_size += 2 + 8;
    }
    
    // required double FrozenMargin = 20;
    if (has_frozenmargin()) {
      total_size += 2 + 8;
    }
    
    // required double FrozenCash = 21;
    if (has_frozencash()) {
      total_size += 2 + 8;
    }
    
    // required double FrozenCommission = 22;
    if (has_frozencommission()) {
      total_size += 2 + 8;
    }
    
    // required double CashIn = 23;
    if (has_cashin()) {
      total_size += 2 + 8;
    }
    
    // required double Commission = 24;
    if (has_commission()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double CloseProfit = 25;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }
    
    // required double PositionProfit = 26;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }
    
    // required double PreSettlementPrice = 27;
    if (has_presettlementprice()) {
      total_size += 2 + 8;
    }
    
    // required double SettlementPrice = 28;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }
    
    // required string TradingDay = 29;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
    // required int32 SettlementID = 30;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }
    
    // required double OpenCost = 31;
    if (has_opencost()) {
      total_size += 2 + 8;
    }
    
    // required double ExchangeMargin = 32;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 CombPosition = 33;
    if (has_combposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combposition());
    }
    
    // required int32 CombLongFrozen = 34;
    if (has_comblongfrozen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comblongfrozen());
    }
    
    // required int32 CombShortFrozen = 35;
    if (has_combshortfrozen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combshortfrozen());
    }
    
    // required double CloseProfitByDate = 36;
    if (has_closeprofitbydate()) {
      total_size += 2 + 8;
    }
    
    // required double CloseProfitByTrade = 37;
    if (has_closeprofitbytrade()) {
      total_size += 2 + 8;
    }
    
    // required int32 TodayPosition = 38;
    if (has_todayposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayposition());
    }
    
    // required double MarginRateByMoney = 39;
    if (has_marginratebymoney()) {
      total_size += 2 + 8;
    }
    
    // required double MarginRateByVolume = 40;
    if (has_marginratebyvolume()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInfo::MergeFrom(const PositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_posidirection()) {
      set_posidirection(from.posidirection());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_positiondate()) {
      set_positiondate(from.positiondate());
    }
    if (from.has_ydposition()) {
      set_ydposition(from.ydposition());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_longfrozen()) {
      set_longfrozen(from.longfrozen());
    }
    if (from.has_shortfrozen()) {
      set_shortfrozen(from.shortfrozen());
    }
    if (from.has_longfrozenamount()) {
      set_longfrozenamount(from.longfrozenamount());
    }
    if (from.has_shortfrozenamount()) {
      set_shortfrozenamount(from.shortfrozenamount());
    }
    if (from.has_openvolume()) {
      set_openvolume(from.openvolume());
    }
    if (from.has_closevolume()) {
      set_closevolume(from.closevolume());
    }
    if (from.has_openamount()) {
      set_openamount(from.openamount());
    }
    if (from.has_closeamount()) {
      set_closeamount(from.closeamount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_positioncost()) {
      set_positioncost(from.positioncost());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_usemargin()) {
      set_usemargin(from.usemargin());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_opencost()) {
      set_opencost(from.opencost());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_combposition()) {
      set_combposition(from.combposition());
    }
    if (from.has_comblongfrozen()) {
      set_comblongfrozen(from.comblongfrozen());
    }
    if (from.has_combshortfrozen()) {
      set_combshortfrozen(from.combshortfrozen());
    }
    if (from.has_closeprofitbydate()) {
      set_closeprofitbydate(from.closeprofitbydate());
    }
    if (from.has_closeprofitbytrade()) {
      set_closeprofitbytrade(from.closeprofitbytrade());
    }
    if (from.has_todayposition()) {
      set_todayposition(from.todayposition());
    }
    if (from.has_marginratebymoney()) {
      set_marginratebymoney(from.marginratebymoney());
    }
    if (from.has_marginratebyvolume()) {
      set_marginratebyvolume(from.marginratebyvolume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInfo::CopyFrom(const PositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void PositionInfo::Swap(PositionInfo* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(posidirection_, other->posidirection_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(positiondate_, other->positiondate_);
    std::swap(ydposition_, other->ydposition_);
    std::swap(position_, other->position_);
    std::swap(longfrozen_, other->longfrozen_);
    std::swap(shortfrozen_, other->shortfrozen_);
    std::swap(longfrozenamount_, other->longfrozenamount_);
    std::swap(shortfrozenamount_, other->shortfrozenamount_);
    std::swap(openvolume_, other->openvolume_);
    std::swap(closevolume_, other->closevolume_);
    std::swap(openamount_, other->openamount_);
    std::swap(closeamount_, other->closeamount_);
    std::swap(positioncost_, other->positioncost_);
    std::swap(premargin_, other->premargin_);
    std::swap(usemargin_, other->usemargin_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(opencost_, other->opencost_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(combposition_, other->combposition_);
    std::swap(comblongfrozen_, other->comblongfrozen_);
    std::swap(combshortfrozen_, other->combshortfrozen_);
    std::swap(closeprofitbydate_, other->closeprofitbydate_);
    std::swap(closeprofitbytrade_, other->closeprofitbytrade_);
    std::swap(todayposition_, other->todayposition_);
    std::swap(marginratebymoney_, other->marginratebymoney_);
    std::swap(marginratebyvolume_, other->marginratebyvolume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInfo_descriptor_;
  metadata.reflection = PositionInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoc

// @@protoc_insertion_point(global_scope)
