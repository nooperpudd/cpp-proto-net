// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace entity {

namespace {

const ::google::protobuf::Descriptor* LoginPuzzleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginPuzzleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerLogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerLogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPortfolioRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPortfolioRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchPortfolioRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchPortfolioRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyStrategySettingsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyStrategySettingsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortfolioItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortfolioItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortfolioUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortfolioUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegQuoteParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegQuoteParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPortfolioParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPortfolioParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PorfOpenPosiParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PorfOpenPosiParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClosePositionParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClosePositionParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegOrderUpdateParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegOrderUpdateParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArbitrageStrategySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArbitrageStrategySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePosiStrategySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePosiStrategySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalperSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalperSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyStrategyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyStrategyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioSwitchParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioSwitchParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioQtyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioQtyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyRunningStatusParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyRunningStatusParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioPreferredLegParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioPreferredLegParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelOrderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelOrderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualCloseOrderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualCloseOrderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PortfolioSwitchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StrategyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DirectionDepends_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StopLossCloseMethods_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  LoginPuzzleResponse_descriptor_ = file->message_type(0);
  static const int LoginPuzzleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPuzzleResponse, session_id_),
  };
  LoginPuzzleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginPuzzleResponse_descriptor_,
      LoginPuzzleResponse::default_instance_,
      LoginPuzzleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPuzzleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPuzzleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginPuzzleResponse));
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, previous_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, pseudo_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(2);
  static const int LoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, error_msg_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  HeartbeatRequest_descriptor_ = file->message_type(3);
  static const int HeartbeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, timestamp_),
  };
  HeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRequest));
  HeartbeatResponse_descriptor_ = file->message_type(4);
  static const int HeartbeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, timestamp_),
  };
  HeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatResponse_descriptor_,
      HeartbeatResponse::default_instance_,
      HeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatResponse));
  ServerLoginRequest_descriptor_ = file->message_type(5);
  static const int ServerLoginRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, password_),
  };
  ServerLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerLoginRequest_descriptor_,
      ServerLoginRequest::default_instance_,
      ServerLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerLoginRequest));
  ServerLoginResponse_descriptor_ = file->message_type(6);
  static const int ServerLoginResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, userid_),
  };
  ServerLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerLoginResponse_descriptor_,
      ServerLoginResponse::default_instance_,
      ServerLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerLoginResponse));
  ServerLogoutRequest_descriptor_ = file->message_type(7);
  static const int ServerLogoutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLogoutRequest, type_),
  };
  ServerLogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerLogoutRequest_descriptor_,
      ServerLogoutRequest::default_instance_,
      ServerLogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerLogoutRequest));
  AddPortfolioRequest_descriptor_ = file->message_type(8);
  static const int AddPortfolioRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioRequest, portfolios_),
  };
  AddPortfolioRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPortfolioRequest_descriptor_,
      AddPortfolioRequest::default_instance_,
      AddPortfolioRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPortfolioRequest));
  SwitchPortfolioRequest_descriptor_ = file->message_type(9);
  static const int SwitchPortfolioRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, switchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, startstrategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, lastorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, triggerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, enabletrigger_),
  };
  SwitchPortfolioRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchPortfolioRequest_descriptor_,
      SwitchPortfolioRequest::default_instance_,
      SwitchPortfolioRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPortfolioRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchPortfolioRequest));
  ApplyStrategySettingsRequest_descriptor_ = file->message_type(10);
  static const int ApplyStrategySettingsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStrategySettingsRequest, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStrategySettingsRequest, strategy_),
  };
  ApplyStrategySettingsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyStrategySettingsRequest_descriptor_,
      ApplyStrategySettingsRequest::default_instance_,
      ApplyStrategySettingsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStrategySettingsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStrategySettingsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyStrategySettingsRequest));
  StringParam_descriptor_ = file->message_type(11);
  static const int StringParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, data_),
  };
  StringParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringParam_descriptor_,
      StringParam::default_instance_,
      StringParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringParam));
  IntParam_descriptor_ = file->message_type(12);
  static const int IntParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, data_),
  };
  IntParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntParam_descriptor_,
      IntParam::default_instance_,
      IntParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntParam));
  LegItem_descriptor_ = file->message_type(13);
  static const int LegItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, legid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ispreferred_),
  };
  LegItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegItem_descriptor_,
      LegItem::default_instance_,
      LegItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegItem));
  LegUpdateItem_descriptor_ = file->message_type(14);
  static const int LegUpdateItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, bidsize_),
  };
  LegUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegUpdateItem_descriptor_,
      LegUpdateItem::default_instance_,
      LegUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegUpdateItem));
  StrategyItem_descriptor_ = file->message_type(15);
  static const int StrategyItem_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, retrytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, opentimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, triggers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, ar_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, cp_closeleg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, cp_closelegside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, sc_pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, sc_casele2tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, sc_casele3tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, sc_casege4tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, sc_casenochange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, sc_stoplossstrategy_),
  };
  StrategyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategyItem_descriptor_,
      StrategyItem::default_instance_,
      StrategyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategyItem));
  TriggerItem_descriptor_ = file->message_type(16);
  static const int TriggerItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, ar_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, ar_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, ar_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, cp_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, cp_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, sc_threshold_),
  };
  TriggerItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerItem_descriptor_,
      TriggerItem::default_instance_,
      TriggerItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerItem));
  TriggerStatus_descriptor_ = file->message_type(17);
  static const int TriggerStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerStatus, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerStatus, enabled_),
  };
  TriggerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerStatus_descriptor_,
      TriggerStatus::default_instance_,
      TriggerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerStatus));
  PortfolioItem_descriptor_ = file->message_type(18);
  static const int PortfolioItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, legs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, maxcancel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, maxopenperstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, totalopenlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, strategy_),
  };
  PortfolioItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortfolioItem_descriptor_,
      PortfolioItem::default_instance_,
      PortfolioItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortfolioItem));
  PortfolioUpdateItem_descriptor_ = file->message_type(19);
  static const int PortfolioUpdateItem_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, legs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, triggers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, totalopentimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, totalclosetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, currentposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, canceltimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, ar_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, ar_longdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, ar_shortdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, ar_longsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, ar_shortsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, sc_diff_),
  };
  PortfolioUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortfolioUpdateItem_descriptor_,
      PortfolioUpdateItem::default_instance_,
      PortfolioUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortfolioUpdateItem));
  ConnectParam_descriptor_ = file->message_type(20);
  static const int ConnectParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, quoteaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, streamfolder_),
  };
  ConnectParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectParam_descriptor_,
      ConnectParam::default_instance_,
      ConnectParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectParam));
  OperationReturn_descriptor_ = file->message_type(21);
  static const int OperationReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, errormessage_),
  };
  OperationReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationReturn_descriptor_,
      OperationReturn::default_instance_,
      OperationReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationReturn));
  AccountSettings_descriptor_ = file->message_type(22);
  static const int AccountSettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, maxsubmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, maxcancel_),
  };
  AccountSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountSettings_descriptor_,
      AccountSettings::default_instance_,
      AccountSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountSettings));
  LoginParam_descriptor_ = file->message_type(23);
  static const int LoginParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, acctsettings_),
  };
  LoginParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginParam_descriptor_,
      LoginParam::default_instance_,
      LoginParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginParam));
  RegQuoteParam_descriptor_ = file->message_type(24);
  static const int RegQuoteParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, symbols_),
  };
  RegQuoteParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegQuoteParam_descriptor_,
      RegQuoteParam::default_instance_,
      RegQuoteParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegQuoteParam));
  AddPortfolioParam_descriptor_ = file->message_type(25);
  static const int AddPortfolioParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioParam, portfolioitems_),
  };
  AddPortfolioParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPortfolioParam_descriptor_,
      AddPortfolioParam::default_instance_,
      AddPortfolioParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPortfolioParam));
  PorfOpenPosiParam_descriptor_ = file->message_type(26);
  static const int PorfOpenPosiParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, isvirtual_),
  };
  PorfOpenPosiParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PorfOpenPosiParam_descriptor_,
      PorfOpenPosiParam::default_instance_,
      PorfOpenPosiParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PorfOpenPosiParam));
  ClosePositionParam_descriptor_ = file->message_type(27);
  static const int ClosePositionParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, multilegorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, legordref_),
  };
  ClosePositionParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClosePositionParam_descriptor_,
      ClosePositionParam::default_instance_,
      ClosePositionParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClosePositionParam));
  LegOrderUpdateParam_descriptor_ = file->message_type(28);
  static const int LegOrderUpdateParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, multilegorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, legorderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, legorder_),
  };
  LegOrderUpdateParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegOrderUpdateParam_descriptor_,
      LegOrderUpdateParam::default_instance_,
      LegOrderUpdateParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegOrderUpdateParam));
  ArbitrageStrategySettings_descriptor_ = file->message_type(29);
  static const int ArbitrageStrategySettings_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, opencondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, openposithreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stopgaincondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stopgainthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stoplosscondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stoplossthreshold_),
  };
  ArbitrageStrategySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArbitrageStrategySettings_descriptor_,
      ArbitrageStrategySettings::default_instance_,
      ArbitrageStrategySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArbitrageStrategySettings));
  ChangePosiStrategySettings_descriptor_ = file->message_type(30);
  static const int ChangePosiStrategySettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, closeleg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, closelegside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, triggercondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, threshold_),
  };
  ChangePosiStrategySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePosiStrategySettings_descriptor_,
      ChangePosiStrategySettings::default_instance_,
      ChangePosiStrategySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePosiStrategySettings));
  ScalperSettings_descriptor_ = file->message_type(31);
  static const int ScalperSettings_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casele2tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casele3tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casege4tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casenochange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, stoplossstrategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, retrytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, opentimeout_),
  };
  ScalperSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalperSettings_descriptor_,
      ScalperSettings::default_instance_,
      ScalperSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalperSettings));
  ModifyStrategyParam_descriptor_ = file->message_type(32);
  static const int ModifyStrategyParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, strategyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, strategydata_),
  };
  ModifyStrategyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyStrategyParam_descriptor_,
      ModifyStrategyParam::default_instance_,
      ModifyStrategyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyStrategyParam));
  ModifyPortfolioSwitchParam_descriptor_ = file->message_type(33);
  static const int ModifyPortfolioSwitchParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autoopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autostopgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autostoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autotracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, enableprefer_),
  };
  ModifyPortfolioSwitchParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioSwitchParam_descriptor_,
      ModifyPortfolioSwitchParam::default_instance_,
      ModifyPortfolioSwitchParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioSwitchParam));
  ModifyPortfolioQtyParam_descriptor_ = file->message_type(34);
  static const int ModifyPortfolioQtyParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, onceqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, maxqty_),
  };
  ModifyPortfolioQtyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioQtyParam_descriptor_,
      ModifyPortfolioQtyParam::default_instance_,
      ModifyPortfolioQtyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioQtyParam));
  ModifyRunningStatusParam_descriptor_ = file->message_type(35);
  static const int ModifyRunningStatusParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, enabled_),
  };
  ModifyRunningStatusParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyRunningStatusParam_descriptor_,
      ModifyRunningStatusParam::default_instance_,
      ModifyRunningStatusParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyRunningStatusParam));
  ModifyPortfolioPreferredLegParam_descriptor_ = file->message_type(36);
  static const int ModifyPortfolioPreferredLegParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, legsymbol_),
  };
  ModifyPortfolioPreferredLegParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioPreferredLegParam_descriptor_,
      ModifyPortfolioPreferredLegParam::default_instance_,
      ModifyPortfolioPreferredLegParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioPreferredLegParam));
  CancelOrderParam_descriptor_ = file->message_type(37);
  static const int CancelOrderParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, ordsysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, symbol_),
  };
  CancelOrderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelOrderParam_descriptor_,
      CancelOrderParam::default_instance_,
      CancelOrderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelOrderParam));
  ManualCloseOrderParam_descriptor_ = file->message_type(38);
  static const int ManualCloseOrderParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, quantity_),
  };
  ManualCloseOrderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualCloseOrderParam_descriptor_,
      ManualCloseOrderParam::default_instance_,
      ManualCloseOrderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualCloseOrderParam));
  SymbolInfo_descriptor_ = file->message_type(39);
  static const int SymbolInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, volumemultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, pricetick_),
  };
  SymbolInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolInfo_descriptor_,
      SymbolInfo::default_instance_,
      SymbolInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolInfo));
  ServerType_descriptor_ = file->enum_type(0);
  PortfolioSwitchType_descriptor_ = file->enum_type(1);
  StrategyType_descriptor_ = file->enum_type(2);
  DirectionDepends_descriptor_ = file->enum_type(3);
  StopLossCloseMethods_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginPuzzleResponse_descriptor_, &LoginPuzzleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatResponse_descriptor_, &HeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerLoginRequest_descriptor_, &ServerLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerLoginResponse_descriptor_, &ServerLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerLogoutRequest_descriptor_, &ServerLogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPortfolioRequest_descriptor_, &AddPortfolioRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchPortfolioRequest_descriptor_, &SwitchPortfolioRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyStrategySettingsRequest_descriptor_, &ApplyStrategySettingsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringParam_descriptor_, &StringParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntParam_descriptor_, &IntParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegItem_descriptor_, &LegItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegUpdateItem_descriptor_, &LegUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategyItem_descriptor_, &StrategyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerItem_descriptor_, &TriggerItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerStatus_descriptor_, &TriggerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortfolioItem_descriptor_, &PortfolioItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortfolioUpdateItem_descriptor_, &PortfolioUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectParam_descriptor_, &ConnectParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationReturn_descriptor_, &OperationReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountSettings_descriptor_, &AccountSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginParam_descriptor_, &LoginParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegQuoteParam_descriptor_, &RegQuoteParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPortfolioParam_descriptor_, &AddPortfolioParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PorfOpenPosiParam_descriptor_, &PorfOpenPosiParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClosePositionParam_descriptor_, &ClosePositionParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegOrderUpdateParam_descriptor_, &LegOrderUpdateParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArbitrageStrategySettings_descriptor_, &ArbitrageStrategySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePosiStrategySettings_descriptor_, &ChangePosiStrategySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalperSettings_descriptor_, &ScalperSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyStrategyParam_descriptor_, &ModifyStrategyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioSwitchParam_descriptor_, &ModifyPortfolioSwitchParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioQtyParam_descriptor_, &ModifyPortfolioQtyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyRunningStatusParam_descriptor_, &ModifyRunningStatusParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioPreferredLegParam_descriptor_, &ModifyPortfolioPreferredLegParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelOrderParam_descriptor_, &CancelOrderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualCloseOrderParam_descriptor_, &ManualCloseOrderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolInfo_descriptor_, &SymbolInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete LoginPuzzleResponse::default_instance_;
  delete LoginPuzzleResponse_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatResponse::default_instance_;
  delete HeartbeatResponse_reflection_;
  delete ServerLoginRequest::default_instance_;
  delete ServerLoginRequest_reflection_;
  delete ServerLoginResponse::default_instance_;
  delete ServerLoginResponse_reflection_;
  delete ServerLogoutRequest::default_instance_;
  delete ServerLogoutRequest_reflection_;
  delete AddPortfolioRequest::default_instance_;
  delete AddPortfolioRequest_reflection_;
  delete SwitchPortfolioRequest::default_instance_;
  delete SwitchPortfolioRequest_reflection_;
  delete ApplyStrategySettingsRequest::default_instance_;
  delete ApplyStrategySettingsRequest_reflection_;
  delete StringParam::default_instance_;
  delete StringParam_reflection_;
  delete IntParam::default_instance_;
  delete IntParam_reflection_;
  delete LegItem::default_instance_;
  delete LegItem_reflection_;
  delete LegUpdateItem::default_instance_;
  delete LegUpdateItem_reflection_;
  delete StrategyItem::default_instance_;
  delete StrategyItem_reflection_;
  delete TriggerItem::default_instance_;
  delete TriggerItem_reflection_;
  delete TriggerStatus::default_instance_;
  delete TriggerStatus_reflection_;
  delete PortfolioItem::default_instance_;
  delete PortfolioItem_reflection_;
  delete PortfolioUpdateItem::default_instance_;
  delete PortfolioUpdateItem_reflection_;
  delete ConnectParam::default_instance_;
  delete ConnectParam_reflection_;
  delete OperationReturn::default_instance_;
  delete OperationReturn_reflection_;
  delete AccountSettings::default_instance_;
  delete AccountSettings_reflection_;
  delete LoginParam::default_instance_;
  delete LoginParam_reflection_;
  delete RegQuoteParam::default_instance_;
  delete RegQuoteParam_reflection_;
  delete AddPortfolioParam::default_instance_;
  delete AddPortfolioParam_reflection_;
  delete PorfOpenPosiParam::default_instance_;
  delete PorfOpenPosiParam_reflection_;
  delete ClosePositionParam::default_instance_;
  delete ClosePositionParam_reflection_;
  delete LegOrderUpdateParam::default_instance_;
  delete LegOrderUpdateParam_reflection_;
  delete ArbitrageStrategySettings::default_instance_;
  delete ArbitrageStrategySettings_reflection_;
  delete ChangePosiStrategySettings::default_instance_;
  delete ChangePosiStrategySettings_reflection_;
  delete ScalperSettings::default_instance_;
  delete ScalperSettings_reflection_;
  delete ModifyStrategyParam::default_instance_;
  delete ModifyStrategyParam_reflection_;
  delete ModifyPortfolioSwitchParam::default_instance_;
  delete ModifyPortfolioSwitchParam_reflection_;
  delete ModifyPortfolioQtyParam::default_instance_;
  delete ModifyPortfolioQtyParam_reflection_;
  delete ModifyRunningStatusParam::default_instance_;
  delete ModifyRunningStatusParam_reflection_;
  delete ModifyPortfolioPreferredLegParam::default_instance_;
  delete ModifyPortfolioPreferredLegParam_reflection_;
  delete CancelOrderParam::default_instance_;
  delete CancelOrderParam_reflection_;
  delete ManualCloseOrderParam::default_instance_;
  delete ManualCloseOrderParam_reflection_;
  delete SymbolInfo::default_instance_;
  delete SymbolInfo_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::entity::protobuf_AddDesc_enum_2eproto();
  ::trade::protobuf_AddDesc_trade_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\006entity\032\nenum.proto\032\013tra"
    "de.proto\")\n\023LoginPuzzleResponse\022\022\n\nsessi"
    "on_id\030\001 \002(\t\"_\n\014LoginRequest\022\016\n\006is_new\030\001 "
    "\002(\010\022\022\n\nsession_id\030\002 \002(\t\022\033\n\023previous_sess"
    "ion_id\030\003 \002(\t\022\016\n\006pseudo\030\004 \001(\t\"X\n\rLoginRes"
    "ponse\022\020\n\010accepted\030\001 \002(\010\022\022\n\nsession_id\030\002 "
    "\002(\t\022\016\n\006is_new\030\003 \002(\010\022\021\n\terror_msg\030\004 \002(\t\"%"
    "\n\020HeartbeatRequest\022\021\n\ttimestamp\030\001 \002(\t\"&\n"
    "\021HeartbeatResponse\022\021\n\ttimestamp\030\001 \002(\t\"{\n"
    "\022ServerLoginRequest\022 \n\004Type\030\001 \002(\0162\022.enti"
    "ty.ServerType\022\017\n\007Address\030\002 \002(\t\022\020\n\010Broker"
    "Id\030\003 \002(\t\022\016\n\006UserId\030\004 \002(\t\022\020\n\010Password\030\005 \002"
    "(\t\"\221\001\n\023ServerLoginResponse\022\017\n\007Success\030\001 "
    "\002(\010\022\024\n\014ErrorMessage\030\002 \002(\t\022 \n\004Type\030\003 \002(\0162"
    "\022.entity.ServerType\022\017\n\007Address\030\004 \002(\t\022\020\n\010"
    "BrokerId\030\005 \002(\t\022\016\n\006UserId\030\006 \002(\t\"7\n\023Server"
    "LogoutRequest\022 \n\004Type\030\001 \002(\0162\022.entity.Ser"
    "verType\"@\n\023AddPortfolioRequest\022)\n\nPortfo"
    "lios\030\001 \003(\0132\025.entity.PortfolioItem\"\257\001\n\026Sw"
    "itchPortfolioRequest\022\013\n\003PID\030\001 \002(\t\022/\n\nSwi"
    "tchType\030\002 \002(\0162\033.entity.PortfolioSwitchTy"
    "pe\022\025\n\rStartStrategy\030\013 \001(\010\022\023\n\013LastOrderId"
    "\030\014 \001(\005\022\024\n\014TriggerIndex\030\025 \001(\005\022\025\n\rEnableTr"
    "igger\030\026 \001(\010\"S\n\034ApplyStrategySettingsRequ"
    "est\022\013\n\003PID\030\001 \002(\t\022&\n\010Strategy\030\002 \002(\0132\024.ent"
    "ity.StrategyItem\"\033\n\013StringParam\022\014\n\004Data\030"
    "\001 \002(\t\"\030\n\010IntParam\022\014\n\004Data\030\002 \002(\005\"u\n\007LegIt"
    "em\022\r\n\005LegId\030\001 \002(\005\022\016\n\006Symbol\030\002 \002(\t\022\r\n\005Rat"
    "io\030\003 \002(\005\022\'\n\004Side\030\004 \002(\0162\031.entity.PosiDire"
    "ctionType\022\023\n\013IsPreferred\030\005 \002(\010\"\214\001\n\rLegUp"
    "dateItem\022\016\n\006Symbol\030\001 \002(\t\022!\n\006Status\030\002 \002(\016"
    "2\021.entity.LegStatus\022\014\n\004Last\030\003 \002(\001\022\013\n\003Ask"
    "\030\004 \002(\001\022\017\n\007AskSize\030\005 \002(\005\022\013\n\003Bid\030\006 \002(\001\022\017\n\007"
    "BidSize\030\007 \002(\005\"\231\004\n\014StrategyItem\022\"\n\004Type\030\001"
    " \002(\0162\024.entity.StrategyType\022\022\n\nRetryTimes"
    "\030\002 \002(\005\022\023\n\013OpenTimeout\030\003 \002(\005\022%\n\010Triggers\030"
    "\004 \003(\0132\023.entity.TriggerItem\022*\n\007AR_Side\030e "
    "\001(\0162\031.entity.PosiDirectionType\022\024\n\013CP_Clo"
    "seLeg\030\311\001 \001(\t\0223\n\017CP_CloseLegSide\030\312\001 \001(\0162\031"
    ".entity.PosiDirectionType\022\025\n\014SC_PriceTic"
    "k\030\255\002 \001(\001\0221\n\016SC_CaseLE2Tick\030\256\002 \001(\0162\030.enti"
    "ty.DirectionDepends\0221\n\016SC_CaseLE3Tick\030\257\002"
    " \001(\0162\030.entity.DirectionDepends\0221\n\016SC_Cas"
    "eGE4Tick\030\260\002 \001(\0162\030.entity.DirectionDepend"
    "s\0222\n\017SC_CaseNoChange\030\261\002 \001(\0162\030.entity.Dir"
    "ectionDepends\022:\n\023SC_StopLossStrategy\030\262\002 "
    "\001(\0162\034.entity.StopLossCloseMethods\"\244\002\n\013Tr"
    "iggerItem\022&\n\010Strategy\030\001 \002(\0162\024.entity.Str"
    "ategyType\022\014\n\004Name\030\002 \002(\t\022\017\n\007Enabled\030\003 \002(\010"
    "\022.\n\014AR_Condition\030e \001(\0162\030.entity.CompareC"
    "ondition\022\024\n\014AR_Threshold\030f \001(\001\022)\n\tAR_Off"
    "set\030g \001(\0162\026.entity.PosiOffsetFlag\022/\n\014CP_"
    "Condition\030\311\001 \001(\0162\030.entity.CompareConditi"
    "on\022\025\n\014CP_Threshold\030\312\001 \001(\001\022\025\n\014SC_Threshol"
    "d\030\255\002 \001(\001\"V\n\rTriggerStatus\022&\n\010Strategy\030\001 "
    "\002(\0162\024.entity.StrategyType\022\014\n\004Name\030\002 \002(\t\022"
    "\017\n\007Enabled\030\003 \002(\010\"\270\001\n\rPortfolioItem\022\n\n\002ID"
    "\030\001 \002(\t\022\020\n\010Quantity\030\002 \002(\005\022\035\n\004Legs\030\003 \003(\0132\017"
    ".entity.LegItem\022\021\n\tMaxCancel\030\004 \002(\005\022\027\n\017Ma"
    "xOpenPerStart\030\005 \002(\005\022\026\n\016TotalOpenLimit\030\006 "
    "\002(\005\022&\n\010Strategy\030\007 \002(\0132\024.entity.StrategyI"
    "tem\"\221\003\n\023PortfolioUpdateItem\022\n\n\002ID\030\001 \002(\t\022"
    "#\n\004Legs\030\002 \003(\0132\025.entity.LegUpdateItem\022&\n\010"
    "Strategy\030\003 \002(\0162\024.entity.StrategyType\022\017\n\007"
    "Running\030\004 \002(\010\022\'\n\010Triggers\030\005 \003(\0132\025.entity"
    ".TriggerStatus\022\026\n\016TotalOpenTimes\030\006 \002(\005\022\027"
    "\n\017TotalCloseTimes\030\007 \002(\005\022\027\n\017CurrentPositi"
    "on\030\010 \002(\005\022\023\n\013CancelTimes\030\t \002(\005\022\017\n\007Message"
    "\030\n \001(\t\022\017\n\007AR_Diff\030e \001(\001\022\023\n\013AR_LongDiff\030f"
    " \001(\001\022\024\n\014AR_ShortDiff\030g \001(\001\022\023\n\013AR_LongSiz"
    "e\030h \001(\005\022\024\n\014AR_ShortSize\030i \001(\005\022\020\n\007SC_Diff"
    "\030\311\001 \001(\001\":\n\014ConnectParam\022\024\n\014QuoteAddress\030"
    "\001 \002(\t\022\024\n\014StreamFolder\030\002 \002(\t\"8\n\017Operation"
    "Return\022\017\n\007Success\030\001 \002(\010\022\024\n\014ErrorMessage\030"
    "\002 \002(\t\"7\n\017AccountSettings\022\021\n\tMaxSubmit\030\001 "
    "\002(\005\022\021\n\tMaxCancel\030\002 \002(\005\"o\n\nLoginParam\022\020\n\010"
    "BrokerId\030\001 \002(\t\022\016\n\006UserId\030\002 \002(\t\022\020\n\010Passwo"
    "rd\030\003 \002(\t\022-\n\014AcctSettings\030\004 \001(\0132\027.entity."
    "AccountSettings\" \n\rRegQuoteParam\022\017\n\007Symb"
    "ols\030\001 \003(\t\"B\n\021AddPortfolioParam\022-\n\016Portfo"
    "lioItems\030\001 \003(\0132\025.entity.PortfolioItem\"I\n"
    "\021PorfOpenPosiParam\022\017\n\007PortfId\030\001 \002(\t\022\020\n\010Q"
    "uantity\030\002 \002(\005\022\021\n\tIsVirtual\030\003 \002(\010\"T\n\022Clos"
    "ePositionParam\022+\n\rMultiLegOrder\030\001 \002(\0132\024."
    "trade.MultiLegOrder\022\021\n\tLegOrdRef\030\002 \001(\t\"t"
    "\n\023LegOrderUpdateParam\022\017\n\007PortfId\030\001 \002(\t\022\027"
    "\n\017MultiLegOrderId\030\002 \002(\t\022\023\n\013LegOrderRef\030\003"
    " \002(\t\022\036\n\010LegOrder\030\004 \002(\0132\014.trade.Order\"\260\002\n"
    "\031ArbitrageStrategySettings\022\'\n\004Side\030\001 \002(\016"
    "2\031.entity.PosiDirectionType\022/\n\rOpenCondi"
    "tion\030\002 \002(\0162\030.entity.CompareCondition\022\031\n\021"
    "OpenPosiThreshold\030\003 \002(\001\0223\n\021StopGainCondi"
    "tion\030\004 \002(\0162\030.entity.CompareCondition\022\031\n\021"
    "StopGainThreshold\030\005 \002(\001\0223\n\021StopLossCondi"
    "tion\030\006 \002(\0162\030.entity.CompareCondition\022\031\n\021"
    "StopLossThreshold\030\007 \002(\001\"\246\001\n\032ChangePosiSt"
    "rategySettings\022\020\n\010CloseLeg\030\001 \002(\t\022/\n\014Clos"
    "eLegSide\030\002 \002(\0162\031.entity.PosiDirectionTyp"
    "e\0222\n\020TriggerCondition\030\003 \002(\0162\030.entity.Com"
    "pareCondition\022\021\n\tThreshold\030\004 \002(\001\"\325\002\n\017Sca"
    "lperSettings\022\021\n\tThreshold\030\001 \002(\001\022\021\n\tPrice"
    "Tick\030\002 \002(\001\022-\n\013CaseLE2Tick\030\003 \002(\0162\030.entity"
    ".DirectionDepends\022-\n\013CaseLE3Tick\030\004 \002(\0162\030"
    ".entity.DirectionDepends\022-\n\013CaseGE4Tick\030"
    "\005 \002(\0162\030.entity.DirectionDepends\022.\n\014CaseN"
    "oChange\030\006 \002(\0162\030.entity.DirectionDepends\022"
    "6\n\020StopLossStrategy\030\007 \002(\0162\034.entity.StopL"
    "ossCloseMethods\022\022\n\nRetryTimes\030\010 \002(\005\022\023\n\013O"
    "penTimeout\030\t \001(\005\"R\n\023ModifyStrategyParam\022"
    "\017\n\007PortfId\030\001 \002(\t\022\024\n\014StrategyName\030\002 \002(\t\022\024"
    "\n\014StrategyData\030\003 \002(\014\"\227\001\n\032ModifyPortfolio"
    "SwitchParam\022\017\n\007PortfId\030\001 \002(\t\022\020\n\010AutoOpen"
    "\030\002 \002(\010\022\024\n\014AutoStopGain\030\003 \002(\010\022\024\n\014AutoStop"
    "Loss\030\004 \002(\010\022\024\n\014AutoTracking\030\005 \002(\010\022\024\n\014Enab"
    "lePrefer\030\006 \002(\010\"K\n\027ModifyPortfolioQtyPara"
    "m\022\017\n\007PortfId\030\001 \002(\t\022\017\n\007OnceQty\030\002 \002(\005\022\016\n\006M"
    "axQty\030\003 \002(\005\"<\n\030ModifyRunningStatusParam\022"
    "\017\n\007PortfId\030\001 \002(\t\022\017\n\007Enabled\030\002 \002(\010\"F\n Mod"
    "ifyPortfolioPreferredLegParam\022\017\n\007PortfId"
    "\030\001 \002(\t\022\021\n\tLegSymbol\030\002 \002(\t\"j\n\020CancelOrder"
    "Param\022\020\n\010OrderRef\030\001 \002(\t\022\022\n\nExchangeId\030\002 "
    "\002(\t\022\020\n\010OrdSysId\030\003 \002(\t\022\016\n\006UserId\030\004 \002(\t\022\016\n"
    "\006Symbol\030\005 \002(\t\"y\n\025ManualCloseOrderParam\022\016"
    "\n\006Symbol\030\001 \002(\t\022,\n\tDirection\030\002 \002(\0162\031.trad"
    "e.TradeDirectionType\022\020\n\010OpenDate\030\003 \002(\t\022\020"
    "\n\010Quantity\030\004 \002(\005\"\212\001\n\nSymbolInfo\022\022\n\nInstr"
    "ument\030\001 \002(\t\022\022\n\nExchangeID\030\002 \002(\t\022\026\n\016Excha"
    "ngeInstID\030\003 \002(\t\022\021\n\tProductID\030\004 \002(\t\022\026\n\016Vo"
    "lumeMultiple\030\005 \002(\005\022\021\n\tPriceTick\030\006 \002(\001*,\n"
    "\nServerType\022\016\n\nSERV_QUOTE\020\000\022\016\n\nSERV_TRAD"
    "E\020\001*>\n\023PortfolioSwitchType\022\023\n\017STRATEGY_S"
    "WITCH\020\000\022\022\n\016TRIGGER_SWITCH\020\001*\?\n\014StrategyT"
    "ype\022\r\n\tARBITRAGE\020\000\022\023\n\017CHANGE_POSITION\020\001\022"
    "\013\n\007SCALPER\020\002*o\n\020DirectionDepends\022\017\n\013IGNO"
    "RE_THIS\020\000\022\021\n\rON_SMALL_SIZE\020\001\022\017\n\013ON_BIG_S"
    "IZE\020\002\022\023\n\017ON_SMALL_CHANGE\020\003\022\021\n\rON_BIG_CHA"
    "NGE\020\004*I\n\024StopLossCloseMethods\022\027\n\023BASED_O"
    "N_NEXT_QUOTE\020\000\022\030\n\024BASED_ON_INPUT_LIMIT\020\001", 5520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  LoginPuzzleResponse::default_instance_ = new LoginPuzzleResponse();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatResponse::default_instance_ = new HeartbeatResponse();
  ServerLoginRequest::default_instance_ = new ServerLoginRequest();
  ServerLoginResponse::default_instance_ = new ServerLoginResponse();
  ServerLogoutRequest::default_instance_ = new ServerLogoutRequest();
  AddPortfolioRequest::default_instance_ = new AddPortfolioRequest();
  SwitchPortfolioRequest::default_instance_ = new SwitchPortfolioRequest();
  ApplyStrategySettingsRequest::default_instance_ = new ApplyStrategySettingsRequest();
  StringParam::default_instance_ = new StringParam();
  IntParam::default_instance_ = new IntParam();
  LegItem::default_instance_ = new LegItem();
  LegUpdateItem::default_instance_ = new LegUpdateItem();
  StrategyItem::default_instance_ = new StrategyItem();
  TriggerItem::default_instance_ = new TriggerItem();
  TriggerStatus::default_instance_ = new TriggerStatus();
  PortfolioItem::default_instance_ = new PortfolioItem();
  PortfolioUpdateItem::default_instance_ = new PortfolioUpdateItem();
  ConnectParam::default_instance_ = new ConnectParam();
  OperationReturn::default_instance_ = new OperationReturn();
  AccountSettings::default_instance_ = new AccountSettings();
  LoginParam::default_instance_ = new LoginParam();
  RegQuoteParam::default_instance_ = new RegQuoteParam();
  AddPortfolioParam::default_instance_ = new AddPortfolioParam();
  PorfOpenPosiParam::default_instance_ = new PorfOpenPosiParam();
  ClosePositionParam::default_instance_ = new ClosePositionParam();
  LegOrderUpdateParam::default_instance_ = new LegOrderUpdateParam();
  ArbitrageStrategySettings::default_instance_ = new ArbitrageStrategySettings();
  ChangePosiStrategySettings::default_instance_ = new ChangePosiStrategySettings();
  ScalperSettings::default_instance_ = new ScalperSettings();
  ModifyStrategyParam::default_instance_ = new ModifyStrategyParam();
  ModifyPortfolioSwitchParam::default_instance_ = new ModifyPortfolioSwitchParam();
  ModifyPortfolioQtyParam::default_instance_ = new ModifyPortfolioQtyParam();
  ModifyRunningStatusParam::default_instance_ = new ModifyRunningStatusParam();
  ModifyPortfolioPreferredLegParam::default_instance_ = new ModifyPortfolioPreferredLegParam();
  CancelOrderParam::default_instance_ = new CancelOrderParam();
  ManualCloseOrderParam::default_instance_ = new ManualCloseOrderParam();
  SymbolInfo::default_instance_ = new SymbolInfo();
  LoginPuzzleResponse::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatResponse::default_instance_->InitAsDefaultInstance();
  ServerLoginRequest::default_instance_->InitAsDefaultInstance();
  ServerLoginResponse::default_instance_->InitAsDefaultInstance();
  ServerLogoutRequest::default_instance_->InitAsDefaultInstance();
  AddPortfolioRequest::default_instance_->InitAsDefaultInstance();
  SwitchPortfolioRequest::default_instance_->InitAsDefaultInstance();
  ApplyStrategySettingsRequest::default_instance_->InitAsDefaultInstance();
  StringParam::default_instance_->InitAsDefaultInstance();
  IntParam::default_instance_->InitAsDefaultInstance();
  LegItem::default_instance_->InitAsDefaultInstance();
  LegUpdateItem::default_instance_->InitAsDefaultInstance();
  StrategyItem::default_instance_->InitAsDefaultInstance();
  TriggerItem::default_instance_->InitAsDefaultInstance();
  TriggerStatus::default_instance_->InitAsDefaultInstance();
  PortfolioItem::default_instance_->InitAsDefaultInstance();
  PortfolioUpdateItem::default_instance_->InitAsDefaultInstance();
  ConnectParam::default_instance_->InitAsDefaultInstance();
  OperationReturn::default_instance_->InitAsDefaultInstance();
  AccountSettings::default_instance_->InitAsDefaultInstance();
  LoginParam::default_instance_->InitAsDefaultInstance();
  RegQuoteParam::default_instance_->InitAsDefaultInstance();
  AddPortfolioParam::default_instance_->InitAsDefaultInstance();
  PorfOpenPosiParam::default_instance_->InitAsDefaultInstance();
  ClosePositionParam::default_instance_->InitAsDefaultInstance();
  LegOrderUpdateParam::default_instance_->InitAsDefaultInstance();
  ArbitrageStrategySettings::default_instance_->InitAsDefaultInstance();
  ChangePosiStrategySettings::default_instance_->InitAsDefaultInstance();
  ScalperSettings::default_instance_->InitAsDefaultInstance();
  ModifyStrategyParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioSwitchParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioQtyParam::default_instance_->InitAsDefaultInstance();
  ModifyRunningStatusParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioPreferredLegParam::default_instance_->InitAsDefaultInstance();
  CancelOrderParam::default_instance_->InitAsDefaultInstance();
  ManualCloseOrderParam::default_instance_->InitAsDefaultInstance();
  SymbolInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PortfolioSwitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortfolioSwitchType_descriptor_;
}
bool PortfolioSwitchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StrategyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyType_descriptor_;
}
bool StrategyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DirectionDepends_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionDepends_descriptor_;
}
bool DirectionDepends_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StopLossCloseMethods_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopLossCloseMethods_descriptor_;
}
bool StopLossCloseMethods_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginPuzzleResponse::kSessionIdFieldNumber;
#endif  // !_MSC_VER

LoginPuzzleResponse::LoginPuzzleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginPuzzleResponse::InitAsDefaultInstance() {
}

LoginPuzzleResponse::LoginPuzzleResponse(const LoginPuzzleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginPuzzleResponse::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginPuzzleResponse::~LoginPuzzleResponse() {
  SharedDtor();
}

void LoginPuzzleResponse::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginPuzzleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginPuzzleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginPuzzleResponse_descriptor_;
}

const LoginPuzzleResponse& LoginPuzzleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LoginPuzzleResponse* LoginPuzzleResponse::default_instance_ = NULL;

LoginPuzzleResponse* LoginPuzzleResponse::New() const {
  return new LoginPuzzleResponse;
}

void LoginPuzzleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginPuzzleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginPuzzleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginPuzzleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginPuzzleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginPuzzleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginPuzzleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginPuzzleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginPuzzleResponse::MergeFrom(const LoginPuzzleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginPuzzleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginPuzzleResponse::CopyFrom(const LoginPuzzleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPuzzleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoginPuzzleResponse::Swap(LoginPuzzleResponse* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginPuzzleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginPuzzleResponse_descriptor_;
  metadata.reflection = LoginPuzzleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kIsNewFieldNumber;
const int LoginRequest::kSessionIdFieldNumber;
const int LoginRequest::kPreviousSessionIdFieldNumber;
const int LoginRequest::kPseudoFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  is_new_ = false;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previous_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pseudo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (previous_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete previous_session_id_;
  }
  if (pseudo_ != &::google::protobuf::internal::kEmptyString) {
    delete pseudo_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_new_ = false;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_previous_session_id()) {
      if (previous_session_id_ != &::google::protobuf::internal::kEmptyString) {
        previous_session_id_->clear();
      }
    }
    if (has_pseudo()) {
      if (pseudo_ != &::google::protobuf::internal::kEmptyString) {
        pseudo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_new = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_previous_session_id;
        break;
      }
      
      // required string previous_session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previous_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->previous_session_id().data(), this->previous_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pseudo;
        break;
      }
      
      // optional string pseudo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pseudo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pseudo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pseudo().data(), this->pseudo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_new = 1;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_new(), output);
  }
  
  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // required string previous_session_id = 3;
  if (has_previous_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previous_session_id().data(), this->previous_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->previous_session_id(), output);
  }
  
  // optional string pseudo = 4;
  if (has_pseudo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pseudo().data(), this->pseudo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pseudo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_new = 1;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_new(), target);
  }
  
  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // required string previous_session_id = 3;
  if (has_previous_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previous_session_id().data(), this->previous_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->previous_session_id(), target);
  }
  
  // optional string pseudo = 4;
  if (has_pseudo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pseudo().data(), this->pseudo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pseudo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_new = 1;
    if (has_is_new()) {
      total_size += 1 + 1;
    }
    
    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // required string previous_session_id = 3;
    if (has_previous_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previous_session_id());
    }
    
    // optional string pseudo = 4;
    if (has_pseudo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pseudo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_previous_session_id()) {
      set_previous_session_id(from.previous_session_id());
    }
    if (from.has_pseudo()) {
      set_pseudo(from.pseudo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(is_new_, other->is_new_);
    std::swap(session_id_, other->session_id_);
    std::swap(previous_session_id_, other->previous_session_id_);
    std::swap(pseudo_, other->pseudo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kAcceptedFieldNumber;
const int LoginResponse::kSessionIdFieldNumber;
const int LoginResponse::kIsNewFieldNumber;
const int LoginResponse::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  accepted_ = false;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_new_ = false;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accepted_ = false;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    is_new_ = false;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool accepted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
          set_has_accepted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }
      
      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_new;
        break;
      }
      
      // required bool is_new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }
      
      // required string error_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool accepted = 1;
  if (has_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }
  
  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }
  
  // required bool is_new = 3;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_new(), output);
  }
  
  // required string error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->error_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool accepted = 1;
  if (has_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }
  
  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }
  
  // required bool is_new = 3;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_new(), target);
  }
  
  // required string error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool accepted = 1;
    if (has_accepted()) {
      total_size += 1 + 1;
    }
    
    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // required bool is_new = 3;
    if (has_is_new()) {
      total_size += 1 + 1;
    }
    
    // required string error_msg = 4;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accepted()) {
      set_accepted(from.accepted());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(accepted_, other->accepted_);
    std::swap(session_id_, other->session_id_);
    std::swap(is_new_, other->is_new_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatRequest::InitAsDefaultInstance() {
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New() const {
  return new HeartbeatRequest;
}

void HeartbeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatResponse::kTimestampFieldNumber;
#endif  // !_MSC_VER

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatResponse::InitAsDefaultInstance() {
}

HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatResponse::~HeartbeatResponse() {
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatResponse_descriptor_;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HeartbeatResponse* HeartbeatResponse::default_instance_ = NULL;

HeartbeatResponse* HeartbeatResponse::New() const {
  return new HeartbeatResponse;
}

void HeartbeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatResponse_descriptor_;
  metadata.reflection = HeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerLoginRequest::kTypeFieldNumber;
const int ServerLoginRequest::kAddressFieldNumber;
const int ServerLoginRequest::kBrokerIdFieldNumber;
const int ServerLoginRequest::kUserIdFieldNumber;
const int ServerLoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

ServerLoginRequest::ServerLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerLoginRequest::InitAsDefaultInstance() {
}

ServerLoginRequest::ServerLoginRequest(const ServerLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerLoginRequest::~ServerLoginRequest() {
  SharedDtor();
}

void ServerLoginRequest::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ServerLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerLoginRequest_descriptor_;
}

const ServerLoginRequest& ServerLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ServerLoginRequest* ServerLoginRequest::default_instance_ = NULL;

ServerLoginRequest* ServerLoginRequest::New() const {
  return new ServerLoginRequest;
}

void ServerLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.ServerType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::ServerType_IsValid(value)) {
            set_type(static_cast< entity::ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Address;
        break;
      }
      
      // required string Address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BrokerId;
        break;
      }
      
      // required string BrokerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BrokerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Password;
        break;
      }
      
      // required string Password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.ServerType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string Address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }
  
  // required string BrokerId = 3;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->brokerid(), output);
  }
  
  // required string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }
  
  // required string Password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.ServerType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string Address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }
  
  // required string BrokerId = 3;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }
  
  // required string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }
  
  // required string Password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerLoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.ServerType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string Address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required string BrokerId = 3;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string UserId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string Password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerLoginRequest::MergeFrom(const ServerLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoginRequest::CopyFrom(const ServerLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ServerLoginRequest::Swap(ServerLoginRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerLoginRequest_descriptor_;
  metadata.reflection = ServerLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerLoginResponse::kSuccessFieldNumber;
const int ServerLoginResponse::kErrorMessageFieldNumber;
const int ServerLoginResponse::kTypeFieldNumber;
const int ServerLoginResponse::kAddressFieldNumber;
const int ServerLoginResponse::kBrokerIdFieldNumber;
const int ServerLoginResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

ServerLoginResponse::ServerLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerLoginResponse::InitAsDefaultInstance() {
}

ServerLoginResponse::ServerLoginResponse(const ServerLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerLoginResponse::~ServerLoginResponse() {
  SharedDtor();
}

void ServerLoginResponse::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void ServerLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerLoginResponse_descriptor_;
}

const ServerLoginResponse& ServerLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ServerLoginResponse* ServerLoginResponse::default_instance_ = NULL;

ServerLoginResponse* ServerLoginResponse::New() const {
  return new ServerLoginResponse;
}

void ServerLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
    type_ = 0;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorMessage;
        break;
      }
      
      // required string ErrorMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }
      
      // required .entity.ServerType Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::ServerType_IsValid(value)) {
            set_type(static_cast< entity::ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Address;
        break;
      }
      
      // required string Address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BrokerId;
        break;
      }
      
      // required string BrokerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BrokerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  // required .entity.ServerType Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // required string Address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address(), output);
  }
  
  // required string BrokerId = 5;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->brokerid(), output);
  }
  
  // required string UserId = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool Success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  // required .entity.ServerType Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // required string Address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }
  
  // required string BrokerId = 5;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->brokerid(), target);
  }
  
  // required string UserId = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerLoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string ErrorMessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
    // required .entity.ServerType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string Address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required string BrokerId = 5;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string UserId = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerLoginResponse::MergeFrom(const ServerLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoginResponse::CopyFrom(const ServerLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ServerLoginResponse::Swap(ServerLoginResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerLoginResponse_descriptor_;
  metadata.reflection = ServerLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerLogoutRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

ServerLogoutRequest::ServerLogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerLogoutRequest::InitAsDefaultInstance() {
}

ServerLogoutRequest::ServerLogoutRequest(const ServerLogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerLogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerLogoutRequest::~ServerLogoutRequest() {
  SharedDtor();
}

void ServerLogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerLogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerLogoutRequest_descriptor_;
}

const ServerLogoutRequest& ServerLogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ServerLogoutRequest* ServerLogoutRequest::default_instance_ = NULL;

ServerLogoutRequest* ServerLogoutRequest::New() const {
  return new ServerLogoutRequest;
}

void ServerLogoutRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.ServerType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::ServerType_IsValid(value)) {
            set_type(static_cast< entity::ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.ServerType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerLogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.ServerType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerLogoutRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.ServerType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerLogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerLogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerLogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerLogoutRequest::MergeFrom(const ServerLogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerLogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLogoutRequest::CopyFrom(const ServerLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerLogoutRequest::Swap(ServerLogoutRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerLogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerLogoutRequest_descriptor_;
  metadata.reflection = ServerLogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPortfolioRequest::kPortfoliosFieldNumber;
#endif  // !_MSC_VER

AddPortfolioRequest::AddPortfolioRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPortfolioRequest::InitAsDefaultInstance() {
}

AddPortfolioRequest::AddPortfolioRequest(const AddPortfolioRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPortfolioRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPortfolioRequest::~AddPortfolioRequest() {
  SharedDtor();
}

void AddPortfolioRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPortfolioRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPortfolioRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPortfolioRequest_descriptor_;
}

const AddPortfolioRequest& AddPortfolioRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AddPortfolioRequest* AddPortfolioRequest::default_instance_ = NULL;

AddPortfolioRequest* AddPortfolioRequest::New() const {
  return new AddPortfolioRequest;
}

void AddPortfolioRequest::Clear() {
  portfolios_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPortfolioRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .entity.PortfolioItem Portfolios = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Portfolios:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portfolios()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Portfolios;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPortfolioRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .entity.PortfolioItem Portfolios = 1;
  for (int i = 0; i < this->portfolios_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->portfolios(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPortfolioRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .entity.PortfolioItem Portfolios = 1;
  for (int i = 0; i < this->portfolios_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->portfolios(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPortfolioRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .entity.PortfolioItem Portfolios = 1;
  total_size += 1 * this->portfolios_size();
  for (int i = 0; i < this->portfolios_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portfolios(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPortfolioRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPortfolioRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPortfolioRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPortfolioRequest::MergeFrom(const AddPortfolioRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  portfolios_.MergeFrom(from.portfolios_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPortfolioRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPortfolioRequest::CopyFrom(const AddPortfolioRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPortfolioRequest::IsInitialized() const {
  
  for (int i = 0; i < portfolios_size(); i++) {
    if (!this->portfolios(i).IsInitialized()) return false;
  }
  return true;
}

void AddPortfolioRequest::Swap(AddPortfolioRequest* other) {
  if (other != this) {
    portfolios_.Swap(&other->portfolios_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPortfolioRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPortfolioRequest_descriptor_;
  metadata.reflection = AddPortfolioRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwitchPortfolioRequest::kPIDFieldNumber;
const int SwitchPortfolioRequest::kSwitchTypeFieldNumber;
const int SwitchPortfolioRequest::kStartStrategyFieldNumber;
const int SwitchPortfolioRequest::kLastOrderIdFieldNumber;
const int SwitchPortfolioRequest::kTriggerIndexFieldNumber;
const int SwitchPortfolioRequest::kEnableTriggerFieldNumber;
#endif  // !_MSC_VER

SwitchPortfolioRequest::SwitchPortfolioRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchPortfolioRequest::InitAsDefaultInstance() {
}

SwitchPortfolioRequest::SwitchPortfolioRequest(const SwitchPortfolioRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchPortfolioRequest::SharedCtor() {
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  switchtype_ = 0;
  startstrategy_ = false;
  lastorderid_ = 0;
  triggerindex_ = 0;
  enabletrigger_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchPortfolioRequest::~SwitchPortfolioRequest() {
  SharedDtor();
}

void SwitchPortfolioRequest::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (this != default_instance_) {
  }
}

void SwitchPortfolioRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchPortfolioRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchPortfolioRequest_descriptor_;
}

const SwitchPortfolioRequest& SwitchPortfolioRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SwitchPortfolioRequest* SwitchPortfolioRequest::default_instance_ = NULL;

SwitchPortfolioRequest* SwitchPortfolioRequest::New() const {
  return new SwitchPortfolioRequest;
}

void SwitchPortfolioRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    switchtype_ = 0;
    startstrategy_ = false;
    lastorderid_ = 0;
    triggerindex_ = 0;
    enabletrigger_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchPortfolioRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SwitchType;
        break;
      }
      
      // required .entity.PortfolioSwitchType SwitchType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SwitchType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PortfolioSwitchType_IsValid(value)) {
            set_switchtype(static_cast< entity::PortfolioSwitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_StartStrategy;
        break;
      }
      
      // optional bool StartStrategy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartStrategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startstrategy_)));
          set_has_startstrategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LastOrderId;
        break;
      }
      
      // optional int32 LastOrderId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastOrderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastorderid_)));
          set_has_lastorderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_TriggerIndex;
        break;
      }
      
      // optional int32 TriggerIndex = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerindex_)));
          set_has_triggerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_EnableTrigger;
        break;
      }
      
      // optional bool EnableTrigger = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnableTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabletrigger_)));
          set_has_enabletrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchPortfolioRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PID = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pid(), output);
  }
  
  // required .entity.PortfolioSwitchType SwitchType = 2;
  if (has_switchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->switchtype(), output);
  }
  
  // optional bool StartStrategy = 11;
  if (has_startstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->startstrategy(), output);
  }
  
  // optional int32 LastOrderId = 12;
  if (has_lastorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lastorderid(), output);
  }
  
  // optional int32 TriggerIndex = 21;
  if (has_triggerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->triggerindex(), output);
  }
  
  // optional bool EnableTrigger = 22;
  if (has_enabletrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enabletrigger(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchPortfolioRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PID = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }
  
  // required .entity.PortfolioSwitchType SwitchType = 2;
  if (has_switchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->switchtype(), target);
  }
  
  // optional bool StartStrategy = 11;
  if (has_startstrategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->startstrategy(), target);
  }
  
  // optional int32 LastOrderId = 12;
  if (has_lastorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lastorderid(), target);
  }
  
  // optional int32 TriggerIndex = 21;
  if (has_triggerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->triggerindex(), target);
  }
  
  // optional bool EnableTrigger = 22;
  if (has_enabletrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enabletrigger(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchPortfolioRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PID = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }
    
    // required .entity.PortfolioSwitchType SwitchType = 2;
    if (has_switchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->switchtype());
    }
    
    // optional bool StartStrategy = 11;
    if (has_startstrategy()) {
      total_size += 1 + 1;
    }
    
    // optional int32 LastOrderId = 12;
    if (has_lastorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastorderid());
    }
    
    // optional int32 TriggerIndex = 21;
    if (has_triggerindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerindex());
    }
    
    // optional bool EnableTrigger = 22;
    if (has_enabletrigger()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchPortfolioRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchPortfolioRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchPortfolioRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchPortfolioRequest::MergeFrom(const SwitchPortfolioRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_switchtype()) {
      set_switchtype(from.switchtype());
    }
    if (from.has_startstrategy()) {
      set_startstrategy(from.startstrategy());
    }
    if (from.has_lastorderid()) {
      set_lastorderid(from.lastorderid());
    }
    if (from.has_triggerindex()) {
      set_triggerindex(from.triggerindex());
    }
    if (from.has_enabletrigger()) {
      set_enabletrigger(from.enabletrigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchPortfolioRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchPortfolioRequest::CopyFrom(const SwitchPortfolioRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPortfolioRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SwitchPortfolioRequest::Swap(SwitchPortfolioRequest* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(switchtype_, other->switchtype_);
    std::swap(startstrategy_, other->startstrategy_);
    std::swap(lastorderid_, other->lastorderid_);
    std::swap(triggerindex_, other->triggerindex_);
    std::swap(enabletrigger_, other->enabletrigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchPortfolioRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchPortfolioRequest_descriptor_;
  metadata.reflection = SwitchPortfolioRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyStrategySettingsRequest::kPIDFieldNumber;
const int ApplyStrategySettingsRequest::kStrategyFieldNumber;
#endif  // !_MSC_VER

ApplyStrategySettingsRequest::ApplyStrategySettingsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyStrategySettingsRequest::InitAsDefaultInstance() {
  strategy_ = const_cast< ::entity::StrategyItem*>(&::entity::StrategyItem::default_instance());
}

ApplyStrategySettingsRequest::ApplyStrategySettingsRequest(const ApplyStrategySettingsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyStrategySettingsRequest::SharedCtor() {
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyStrategySettingsRequest::~ApplyStrategySettingsRequest() {
  SharedDtor();
}

void ApplyStrategySettingsRequest::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (this != default_instance_) {
    delete strategy_;
  }
}

void ApplyStrategySettingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyStrategySettingsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyStrategySettingsRequest_descriptor_;
}

const ApplyStrategySettingsRequest& ApplyStrategySettingsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ApplyStrategySettingsRequest* ApplyStrategySettingsRequest::default_instance_ = NULL;

ApplyStrategySettingsRequest* ApplyStrategySettingsRequest::New() const {
  return new ApplyStrategySettingsRequest;
}

void ApplyStrategySettingsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    if (has_strategy()) {
      if (strategy_ != NULL) strategy_->::entity::StrategyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyStrategySettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Strategy;
        break;
      }
      
      // required .entity.StrategyItem Strategy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyStrategySettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PID = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pid(), output);
  }
  
  // required .entity.StrategyItem Strategy = 2;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyStrategySettingsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PID = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }
  
  // required .entity.StrategyItem Strategy = 2;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyStrategySettingsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PID = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }
    
    // required .entity.StrategyItem Strategy = 2;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyStrategySettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyStrategySettingsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyStrategySettingsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyStrategySettingsRequest::MergeFrom(const ApplyStrategySettingsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_strategy()) {
      mutable_strategy()->::entity::StrategyItem::MergeFrom(from.strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyStrategySettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyStrategySettingsRequest::CopyFrom(const ApplyStrategySettingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyStrategySettingsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_strategy()) {
    if (!this->strategy().IsInitialized()) return false;
  }
  return true;
}

void ApplyStrategySettingsRequest::Swap(ApplyStrategySettingsRequest* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(strategy_, other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyStrategySettingsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyStrategySettingsRequest_descriptor_;
  metadata.reflection = ApplyStrategySettingsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringParam::kDataFieldNumber;
#endif  // !_MSC_VER

StringParam::StringParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringParam::InitAsDefaultInstance() {
}

StringParam::StringParam(const StringParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringParam::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringParam::~StringParam() {
  SharedDtor();
}

void StringParam::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void StringParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringParam_descriptor_;
}

const StringParam& StringParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

StringParam* StringParam::default_instance_ = NULL;

StringParam* StringParam::New() const {
  return new StringParam;
}

void StringParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringParam::MergeFrom(const StringParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringParam::CopyFrom(const StringParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StringParam::Swap(StringParam* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringParam_descriptor_;
  metadata.reflection = StringParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntParam::kDataFieldNumber;
#endif  // !_MSC_VER

IntParam::IntParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntParam::InitAsDefaultInstance() {
}

IntParam::IntParam(const IntParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntParam::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntParam::~IntParam() {
  SharedDtor();
}

void IntParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntParam_descriptor_;
}

const IntParam& IntParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

IntParam* IntParam::default_instance_ = NULL;

IntParam* IntParam::New() const {
  return new IntParam;
}

void IntParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntParam::MergeFrom(const IntParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntParam::CopyFrom(const IntParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IntParam::Swap(IntParam* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntParam_descriptor_;
  metadata.reflection = IntParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegItem::kLegIdFieldNumber;
const int LegItem::kSymbolFieldNumber;
const int LegItem::kRatioFieldNumber;
const int LegItem::kSideFieldNumber;
const int LegItem::kIsPreferredFieldNumber;
#endif  // !_MSC_VER

LegItem::LegItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegItem::InitAsDefaultInstance() {
}

LegItem::LegItem(const LegItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegItem::SharedCtor() {
  _cached_size_ = 0;
  legid_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ratio_ = 0;
  side_ = 49;
  ispreferred_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegItem::~LegItem() {
  SharedDtor();
}

void LegItem::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void LegItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegItem_descriptor_;
}

const LegItem& LegItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegItem* LegItem::default_instance_ = NULL;

LegItem* LegItem::New() const {
  return new LegItem;
}

void LegItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    legid_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    ratio_ = 0;
    side_ = 49;
    ispreferred_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 LegId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legid_)));
          set_has_legid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Symbol;
        break;
      }
      
      // required string Symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Ratio;
        break;
      }
      
      // required int32 Ratio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Side;
        break;
      }
      
      // required .entity.PosiDirectionType Side = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsPreferred;
        break;
      }
      
      // required bool IsPreferred = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPreferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispreferred_)));
          set_has_ispreferred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 LegId = 1;
  if (has_legid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->legid(), output);
  }
  
  // required string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }
  
  // required int32 Ratio = 3;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ratio(), output);
  }
  
  // required .entity.PosiDirectionType Side = 4;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side(), output);
  }
  
  // required bool IsPreferred = 5;
  if (has_ispreferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ispreferred(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 LegId = 1;
  if (has_legid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->legid(), target);
  }
  
  // required string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }
  
  // required int32 Ratio = 3;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ratio(), target);
  }
  
  // required .entity.PosiDirectionType Side = 4;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side(), target);
  }
  
  // required bool IsPreferred = 5;
  if (has_ispreferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ispreferred(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 LegId = 1;
    if (has_legid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legid());
    }
    
    // required string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required int32 Ratio = 3;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }
    
    // required .entity.PosiDirectionType Side = 4;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // required bool IsPreferred = 5;
    if (has_ispreferred()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegItem::MergeFrom(const LegItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_legid()) {
      set_legid(from.legid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_ispreferred()) {
      set_ispreferred(from.ispreferred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegItem::CopyFrom(const LegItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void LegItem::Swap(LegItem* other) {
  if (other != this) {
    std::swap(legid_, other->legid_);
    std::swap(symbol_, other->symbol_);
    std::swap(ratio_, other->ratio_);
    std::swap(side_, other->side_);
    std::swap(ispreferred_, other->ispreferred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegItem_descriptor_;
  metadata.reflection = LegItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegUpdateItem::kSymbolFieldNumber;
const int LegUpdateItem::kStatusFieldNumber;
const int LegUpdateItem::kLastFieldNumber;
const int LegUpdateItem::kAskFieldNumber;
const int LegUpdateItem::kAskSizeFieldNumber;
const int LegUpdateItem::kBidFieldNumber;
const int LegUpdateItem::kBidSizeFieldNumber;
#endif  // !_MSC_VER

LegUpdateItem::LegUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegUpdateItem::InitAsDefaultInstance() {
}

LegUpdateItem::LegUpdateItem(const LegUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  last_ = 0;
  ask_ = 0;
  asksize_ = 0;
  bid_ = 0;
  bidsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegUpdateItem::~LegUpdateItem() {
  SharedDtor();
}

void LegUpdateItem::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void LegUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegUpdateItem_descriptor_;
}

const LegUpdateItem& LegUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegUpdateItem* LegUpdateItem::default_instance_ = NULL;

LegUpdateItem* LegUpdateItem::New() const {
  return new LegUpdateItem;
}

void LegUpdateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    status_ = 0;
    last_ = 0;
    ask_ = 0;
    asksize_ = 0;
    bid_ = 0;
    bidsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }
      
      // required .entity.LegStatus Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::LegStatus_IsValid(value)) {
            set_status(static_cast< entity::LegStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Last;
        break;
      }
      
      // required double Last = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Ask;
        break;
      }
      
      // required double Ask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AskSize;
        break;
      }
      
      // required int32 AskSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Bid;
        break;
      }
      
      // required double Bid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BidSize;
        break;
      }
      
      // required int32 BidSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }
  
  // required .entity.LegStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // required double Last = 3;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last(), output);
  }
  
  // required double Ask = 4;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ask(), output);
  }
  
  // required int32 AskSize = 5;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->asksize(), output);
  }
  
  // required double Bid = 6;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bid(), output);
  }
  
  // required int32 BidSize = 7;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bidsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }
  
  // required .entity.LegStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // required double Last = 3;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last(), target);
  }
  
  // required double Ask = 4;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ask(), target);
  }
  
  // required int32 AskSize = 5;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->asksize(), target);
  }
  
  // required double Bid = 6;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bid(), target);
  }
  
  // required int32 BidSize = 7;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bidsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegUpdateItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required .entity.LegStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required double Last = 3;
    if (has_last()) {
      total_size += 1 + 8;
    }
    
    // required double Ask = 4;
    if (has_ask()) {
      total_size += 1 + 8;
    }
    
    // required int32 AskSize = 5;
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }
    
    // required double Bid = 6;
    if (has_bid()) {
      total_size += 1 + 8;
    }
    
    // required int32 BidSize = 7;
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegUpdateItem::MergeFrom(const LegUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegUpdateItem::CopyFrom(const LegUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegUpdateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void LegUpdateItem::Swap(LegUpdateItem* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(status_, other->status_);
    std::swap(last_, other->last_);
    std::swap(ask_, other->ask_);
    std::swap(asksize_, other->asksize_);
    std::swap(bid_, other->bid_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegUpdateItem_descriptor_;
  metadata.reflection = LegUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategyItem::kTypeFieldNumber;
const int StrategyItem::kRetryTimesFieldNumber;
const int StrategyItem::kOpenTimeoutFieldNumber;
const int StrategyItem::kTriggersFieldNumber;
const int StrategyItem::kARSideFieldNumber;
const int StrategyItem::kCPCloseLegFieldNumber;
const int StrategyItem::kCPCloseLegSideFieldNumber;
const int StrategyItem::kSCPriceTickFieldNumber;
const int StrategyItem::kSCCaseLE2TickFieldNumber;
const int StrategyItem::kSCCaseLE3TickFieldNumber;
const int StrategyItem::kSCCaseGE4TickFieldNumber;
const int StrategyItem::kSCCaseNoChangeFieldNumber;
const int StrategyItem::kSCStopLossStrategyFieldNumber;
#endif  // !_MSC_VER

StrategyItem::StrategyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategyItem::InitAsDefaultInstance() {
}

StrategyItem::StrategyItem(const StrategyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategyItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  retrytimes_ = 0;
  opentimeout_ = 0;
  ar_side_ = 49;
  cp_closeleg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cp_closelegside_ = 49;
  sc_pricetick_ = 0;
  sc_casele2tick_ = 0;
  sc_casele3tick_ = 0;
  sc_casege4tick_ = 0;
  sc_casenochange_ = 0;
  sc_stoplossstrategy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategyItem::~StrategyItem() {
  SharedDtor();
}

void StrategyItem::SharedDtor() {
  if (cp_closeleg_ != &::google::protobuf::internal::kEmptyString) {
    delete cp_closeleg_;
  }
  if (this != default_instance_) {
  }
}

void StrategyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyItem_descriptor_;
}

const StrategyItem& StrategyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

StrategyItem* StrategyItem::default_instance_ = NULL;

StrategyItem* StrategyItem::New() const {
  return new StrategyItem;
}

void StrategyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    retrytimes_ = 0;
    opentimeout_ = 0;
    ar_side_ = 49;
    if (has_cp_closeleg()) {
      if (cp_closeleg_ != &::google::protobuf::internal::kEmptyString) {
        cp_closeleg_->clear();
      }
    }
    cp_closelegside_ = 49;
    sc_pricetick_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sc_casele2tick_ = 0;
    sc_casele3tick_ = 0;
    sc_casege4tick_ = 0;
    sc_casenochange_ = 0;
    sc_stoplossstrategy_ = 0;
  }
  triggers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.StrategyType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StrategyType_IsValid(value)) {
            set_type(static_cast< entity::StrategyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RetryTimes;
        break;
      }
      
      // required int32 RetryTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RetryTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retrytimes_)));
          set_has_retrytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OpenTimeout;
        break;
      }
      
      // required int32 OpenTimeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentimeout_)));
          set_has_opentimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Triggers;
        break;
      }
      
      // repeated .entity.TriggerItem Triggers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Triggers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Triggers;
        if (input->ExpectTag(808)) goto parse_AR_Side;
        break;
      }
      
      // optional .entity.PosiDirectionType AR_Side = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AR_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_ar_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(101, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_CP_CloseLeg;
        break;
      }
      
      // optional string CP_CloseLeg = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CP_CloseLeg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cp_closeleg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cp_closeleg().data(), this->cp_closeleg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_CP_CloseLegSide;
        break;
      }
      
      // optional .entity.PosiDirectionType CP_CloseLegSide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CP_CloseLegSide:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_cp_closelegside(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(202, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2409)) goto parse_SC_PriceTick;
        break;
      }
      
      // optional double SC_PriceTick = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SC_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sc_pricetick_)));
          set_has_sc_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2416)) goto parse_SC_CaseLE2Tick;
        break;
      }
      
      // optional .entity.DirectionDepends SC_CaseLE2Tick = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SC_CaseLE2Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_sc_casele2tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(302, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2424)) goto parse_SC_CaseLE3Tick;
        break;
      }
      
      // optional .entity.DirectionDepends SC_CaseLE3Tick = 303;
      case 303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SC_CaseLE3Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_sc_casele3tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(303, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2432)) goto parse_SC_CaseGE4Tick;
        break;
      }
      
      // optional .entity.DirectionDepends SC_CaseGE4Tick = 304;
      case 304: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SC_CaseGE4Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_sc_casege4tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(304, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2440)) goto parse_SC_CaseNoChange;
        break;
      }
      
      // optional .entity.DirectionDepends SC_CaseNoChange = 305;
      case 305: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SC_CaseNoChange:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_sc_casenochange(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(305, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2448)) goto parse_SC_StopLossStrategy;
        break;
      }
      
      // optional .entity.StopLossCloseMethods SC_StopLossStrategy = 306;
      case 306: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SC_StopLossStrategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StopLossCloseMethods_IsValid(value)) {
            set_sc_stoplossstrategy(static_cast< entity::StopLossCloseMethods >(value));
          } else {
            mutable_unknown_fields()->AddVarint(306, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.StrategyType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int32 RetryTimes = 2;
  if (has_retrytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retrytimes(), output);
  }
  
  // required int32 OpenTimeout = 3;
  if (has_opentimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opentimeout(), output);
  }
  
  // repeated .entity.TriggerItem Triggers = 4;
  for (int i = 0; i < this->triggers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->triggers(i), output);
  }
  
  // optional .entity.PosiDirectionType AR_Side = 101;
  if (has_ar_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->ar_side(), output);
  }
  
  // optional string CP_CloseLeg = 201;
  if (has_cp_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cp_closeleg().data(), this->cp_closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      201, this->cp_closeleg(), output);
  }
  
  // optional .entity.PosiDirectionType CP_CloseLegSide = 202;
  if (has_cp_closelegside()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      202, this->cp_closelegside(), output);
  }
  
  // optional double SC_PriceTick = 301;
  if (has_sc_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(301, this->sc_pricetick(), output);
  }
  
  // optional .entity.DirectionDepends SC_CaseLE2Tick = 302;
  if (has_sc_casele2tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      302, this->sc_casele2tick(), output);
  }
  
  // optional .entity.DirectionDepends SC_CaseLE3Tick = 303;
  if (has_sc_casele3tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      303, this->sc_casele3tick(), output);
  }
  
  // optional .entity.DirectionDepends SC_CaseGE4Tick = 304;
  if (has_sc_casege4tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      304, this->sc_casege4tick(), output);
  }
  
  // optional .entity.DirectionDepends SC_CaseNoChange = 305;
  if (has_sc_casenochange()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      305, this->sc_casenochange(), output);
  }
  
  // optional .entity.StopLossCloseMethods SC_StopLossStrategy = 306;
  if (has_sc_stoplossstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      306, this->sc_stoplossstrategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.StrategyType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int32 RetryTimes = 2;
  if (has_retrytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retrytimes(), target);
  }
  
  // required int32 OpenTimeout = 3;
  if (has_opentimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opentimeout(), target);
  }
  
  // repeated .entity.TriggerItem Triggers = 4;
  for (int i = 0; i < this->triggers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->triggers(i), target);
  }
  
  // optional .entity.PosiDirectionType AR_Side = 101;
  if (has_ar_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      101, this->ar_side(), target);
  }
  
  // optional string CP_CloseLeg = 201;
  if (has_cp_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cp_closeleg().data(), this->cp_closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        201, this->cp_closeleg(), target);
  }
  
  // optional .entity.PosiDirectionType CP_CloseLegSide = 202;
  if (has_cp_closelegside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      202, this->cp_closelegside(), target);
  }
  
  // optional double SC_PriceTick = 301;
  if (has_sc_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(301, this->sc_pricetick(), target);
  }
  
  // optional .entity.DirectionDepends SC_CaseLE2Tick = 302;
  if (has_sc_casele2tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      302, this->sc_casele2tick(), target);
  }
  
  // optional .entity.DirectionDepends SC_CaseLE3Tick = 303;
  if (has_sc_casele3tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      303, this->sc_casele3tick(), target);
  }
  
  // optional .entity.DirectionDepends SC_CaseGE4Tick = 304;
  if (has_sc_casege4tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      304, this->sc_casege4tick(), target);
  }
  
  // optional .entity.DirectionDepends SC_CaseNoChange = 305;
  if (has_sc_casenochange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      305, this->sc_casenochange(), target);
  }
  
  // optional .entity.StopLossCloseMethods SC_StopLossStrategy = 306;
  if (has_sc_stoplossstrategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      306, this->sc_stoplossstrategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategyItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.StrategyType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 RetryTimes = 2;
    if (has_retrytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retrytimes());
    }
    
    // required int32 OpenTimeout = 3;
    if (has_opentimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentimeout());
    }
    
    // optional .entity.PosiDirectionType AR_Side = 101;
    if (has_ar_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ar_side());
    }
    
    // optional string CP_CloseLeg = 201;
    if (has_cp_closeleg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cp_closeleg());
    }
    
    // optional .entity.PosiDirectionType CP_CloseLegSide = 202;
    if (has_cp_closelegside()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cp_closelegside());
    }
    
    // optional double SC_PriceTick = 301;
    if (has_sc_pricetick()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .entity.DirectionDepends SC_CaseLE2Tick = 302;
    if (has_sc_casele2tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sc_casele2tick());
    }
    
    // optional .entity.DirectionDepends SC_CaseLE3Tick = 303;
    if (has_sc_casele3tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sc_casele3tick());
    }
    
    // optional .entity.DirectionDepends SC_CaseGE4Tick = 304;
    if (has_sc_casege4tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sc_casege4tick());
    }
    
    // optional .entity.DirectionDepends SC_CaseNoChange = 305;
    if (has_sc_casenochange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sc_casenochange());
    }
    
    // optional .entity.StopLossCloseMethods SC_StopLossStrategy = 306;
    if (has_sc_stoplossstrategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sc_stoplossstrategy());
    }
    
  }
  // repeated .entity.TriggerItem Triggers = 4;
  total_size += 1 * this->triggers_size();
  for (int i = 0; i < this->triggers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategyItem::MergeFrom(const StrategyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggers_.MergeFrom(from.triggers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_retrytimes()) {
      set_retrytimes(from.retrytimes());
    }
    if (from.has_opentimeout()) {
      set_opentimeout(from.opentimeout());
    }
    if (from.has_ar_side()) {
      set_ar_side(from.ar_side());
    }
    if (from.has_cp_closeleg()) {
      set_cp_closeleg(from.cp_closeleg());
    }
    if (from.has_cp_closelegside()) {
      set_cp_closelegside(from.cp_closelegside());
    }
    if (from.has_sc_pricetick()) {
      set_sc_pricetick(from.sc_pricetick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sc_casele2tick()) {
      set_sc_casele2tick(from.sc_casele2tick());
    }
    if (from.has_sc_casele3tick()) {
      set_sc_casele3tick(from.sc_casele3tick());
    }
    if (from.has_sc_casege4tick()) {
      set_sc_casege4tick(from.sc_casege4tick());
    }
    if (from.has_sc_casenochange()) {
      set_sc_casenochange(from.sc_casenochange());
    }
    if (from.has_sc_stoplossstrategy()) {
      set_sc_stoplossstrategy(from.sc_stoplossstrategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategyItem::CopyFrom(const StrategyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < triggers_size(); i++) {
    if (!this->triggers(i).IsInitialized()) return false;
  }
  return true;
}

void StrategyItem::Swap(StrategyItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(retrytimes_, other->retrytimes_);
    std::swap(opentimeout_, other->opentimeout_);
    triggers_.Swap(&other->triggers_);
    std::swap(ar_side_, other->ar_side_);
    std::swap(cp_closeleg_, other->cp_closeleg_);
    std::swap(cp_closelegside_, other->cp_closelegside_);
    std::swap(sc_pricetick_, other->sc_pricetick_);
    std::swap(sc_casele2tick_, other->sc_casele2tick_);
    std::swap(sc_casele3tick_, other->sc_casele3tick_);
    std::swap(sc_casege4tick_, other->sc_casege4tick_);
    std::swap(sc_casenochange_, other->sc_casenochange_);
    std::swap(sc_stoplossstrategy_, other->sc_stoplossstrategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategyItem_descriptor_;
  metadata.reflection = StrategyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerItem::kStrategyFieldNumber;
const int TriggerItem::kNameFieldNumber;
const int TriggerItem::kEnabledFieldNumber;
const int TriggerItem::kARConditionFieldNumber;
const int TriggerItem::kARThresholdFieldNumber;
const int TriggerItem::kAROffsetFieldNumber;
const int TriggerItem::kCPConditionFieldNumber;
const int TriggerItem::kCPThresholdFieldNumber;
const int TriggerItem::kSCThresholdFieldNumber;
#endif  // !_MSC_VER

TriggerItem::TriggerItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TriggerItem::InitAsDefaultInstance() {
}

TriggerItem::TriggerItem(const TriggerItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TriggerItem::SharedCtor() {
  _cached_size_ = 0;
  strategy_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  ar_condition_ = 0;
  ar_threshold_ = 0;
  ar_offset_ = 0;
  cp_condition_ = 0;
  cp_threshold_ = 0;
  sc_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerItem::~TriggerItem() {
  SharedDtor();
}

void TriggerItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TriggerItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerItem_descriptor_;
}

const TriggerItem& TriggerItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

TriggerItem* TriggerItem::default_instance_ = NULL;

TriggerItem* TriggerItem::New() const {
  return new TriggerItem;
}

void TriggerItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strategy_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    enabled_ = false;
    ar_condition_ = 0;
    ar_threshold_ = 0;
    ar_offset_ = 0;
    cp_condition_ = 0;
    cp_threshold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sc_threshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.StrategyType Strategy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StrategyType_IsValid(value)) {
            set_strategy(static_cast< entity::StrategyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Enabled;
        break;
      }
      
      // required bool Enabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_AR_Condition;
        break;
      }
      
      // optional .entity.CompareCondition AR_Condition = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AR_Condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_ar_condition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(101, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(817)) goto parse_AR_Threshold;
        break;
      }
      
      // optional double AR_Threshold = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AR_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ar_threshold_)));
          set_has_ar_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_AR_Offset;
        break;
      }
      
      // optional .entity.PosiOffsetFlag AR_Offset = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AR_Offset:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiOffsetFlag_IsValid(value)) {
            set_ar_offset(static_cast< entity::PosiOffsetFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(103, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_CP_Condition;
        break;
      }
      
      // optional .entity.CompareCondition CP_Condition = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CP_Condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_cp_condition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(201, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1617)) goto parse_CP_Threshold;
        break;
      }
      
      // optional double CP_Threshold = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CP_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cp_threshold_)));
          set_has_cp_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2409)) goto parse_SC_Threshold;
        break;
      }
      
      // optional double SC_Threshold = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SC_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sc_threshold_)));
          set_has_sc_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TriggerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.StrategyType Strategy = 1;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->strategy(), output);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required bool Enabled = 3;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }
  
  // optional .entity.CompareCondition AR_Condition = 101;
  if (has_ar_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->ar_condition(), output);
  }
  
  // optional double AR_Threshold = 102;
  if (has_ar_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->ar_threshold(), output);
  }
  
  // optional .entity.PosiOffsetFlag AR_Offset = 103;
  if (has_ar_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      103, this->ar_offset(), output);
  }
  
  // optional .entity.CompareCondition CP_Condition = 201;
  if (has_cp_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      201, this->cp_condition(), output);
  }
  
  // optional double CP_Threshold = 202;
  if (has_cp_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(202, this->cp_threshold(), output);
  }
  
  // optional double SC_Threshold = 301;
  if (has_sc_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(301, this->sc_threshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TriggerItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.StrategyType Strategy = 1;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->strategy(), target);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required bool Enabled = 3;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }
  
  // optional .entity.CompareCondition AR_Condition = 101;
  if (has_ar_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      101, this->ar_condition(), target);
  }
  
  // optional double AR_Threshold = 102;
  if (has_ar_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->ar_threshold(), target);
  }
  
  // optional .entity.PosiOffsetFlag AR_Offset = 103;
  if (has_ar_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      103, this->ar_offset(), target);
  }
  
  // optional .entity.CompareCondition CP_Condition = 201;
  if (has_cp_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      201, this->cp_condition(), target);
  }
  
  // optional double CP_Threshold = 202;
  if (has_cp_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(202, this->cp_threshold(), target);
  }
  
  // optional double SC_Threshold = 301;
  if (has_sc_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(301, this->sc_threshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TriggerItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.StrategyType Strategy = 1;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategy());
    }
    
    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool Enabled = 3;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional .entity.CompareCondition AR_Condition = 101;
    if (has_ar_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ar_condition());
    }
    
    // optional double AR_Threshold = 102;
    if (has_ar_threshold()) {
      total_size += 2 + 8;
    }
    
    // optional .entity.PosiOffsetFlag AR_Offset = 103;
    if (has_ar_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ar_offset());
    }
    
    // optional .entity.CompareCondition CP_Condition = 201;
    if (has_cp_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cp_condition());
    }
    
    // optional double CP_Threshold = 202;
    if (has_cp_threshold()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double SC_Threshold = 301;
    if (has_sc_threshold()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerItem::MergeFrom(const TriggerItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_ar_condition()) {
      set_ar_condition(from.ar_condition());
    }
    if (from.has_ar_threshold()) {
      set_ar_threshold(from.ar_threshold());
    }
    if (from.has_ar_offset()) {
      set_ar_offset(from.ar_offset());
    }
    if (from.has_cp_condition()) {
      set_cp_condition(from.cp_condition());
    }
    if (from.has_cp_threshold()) {
      set_cp_threshold(from.cp_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sc_threshold()) {
      set_sc_threshold(from.sc_threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerItem::CopyFrom(const TriggerItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TriggerItem::Swap(TriggerItem* other) {
  if (other != this) {
    std::swap(strategy_, other->strategy_);
    std::swap(name_, other->name_);
    std::swap(enabled_, other->enabled_);
    std::swap(ar_condition_, other->ar_condition_);
    std::swap(ar_threshold_, other->ar_threshold_);
    std::swap(ar_offset_, other->ar_offset_);
    std::swap(cp_condition_, other->cp_condition_);
    std::swap(cp_threshold_, other->cp_threshold_);
    std::swap(sc_threshold_, other->sc_threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerItem_descriptor_;
  metadata.reflection = TriggerItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerStatus::kStrategyFieldNumber;
const int TriggerStatus::kNameFieldNumber;
const int TriggerStatus::kEnabledFieldNumber;
#endif  // !_MSC_VER

TriggerStatus::TriggerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TriggerStatus::InitAsDefaultInstance() {
}

TriggerStatus::TriggerStatus(const TriggerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TriggerStatus::SharedCtor() {
  _cached_size_ = 0;
  strategy_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerStatus::~TriggerStatus() {
  SharedDtor();
}

void TriggerStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TriggerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerStatus_descriptor_;
}

const TriggerStatus& TriggerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

TriggerStatus* TriggerStatus::default_instance_ = NULL;

TriggerStatus* TriggerStatus::New() const {
  return new TriggerStatus;
}

void TriggerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strategy_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.StrategyType Strategy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StrategyType_IsValid(value)) {
            set_strategy(static_cast< entity::StrategyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Enabled;
        break;
      }
      
      // required bool Enabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TriggerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.StrategyType Strategy = 1;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->strategy(), output);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required bool Enabled = 3;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TriggerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.StrategyType Strategy = 1;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->strategy(), target);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required bool Enabled = 3;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TriggerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.StrategyType Strategy = 1;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategy());
    }
    
    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool Enabled = 3;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerStatus::MergeFrom(const TriggerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerStatus::CopyFrom(const TriggerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TriggerStatus::Swap(TriggerStatus* other) {
  if (other != this) {
    std::swap(strategy_, other->strategy_);
    std::swap(name_, other->name_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerStatus_descriptor_;
  metadata.reflection = TriggerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortfolioItem::kIDFieldNumber;
const int PortfolioItem::kQuantityFieldNumber;
const int PortfolioItem::kLegsFieldNumber;
const int PortfolioItem::kMaxCancelFieldNumber;
const int PortfolioItem::kMaxOpenPerStartFieldNumber;
const int PortfolioItem::kTotalOpenLimitFieldNumber;
const int PortfolioItem::kStrategyFieldNumber;
#endif  // !_MSC_VER

PortfolioItem::PortfolioItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PortfolioItem::InitAsDefaultInstance() {
  strategy_ = const_cast< ::entity::StrategyItem*>(&::entity::StrategyItem::default_instance());
}

PortfolioItem::PortfolioItem(const PortfolioItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PortfolioItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  maxcancel_ = 0;
  maxopenperstart_ = 0;
  totalopenlimit_ = 0;
  strategy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortfolioItem::~PortfolioItem() {
  SharedDtor();
}

void PortfolioItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete strategy_;
  }
}

void PortfolioItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortfolioItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortfolioItem_descriptor_;
}

const PortfolioItem& PortfolioItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PortfolioItem* PortfolioItem::default_instance_ = NULL;

PortfolioItem* PortfolioItem::New() const {
  return new PortfolioItem;
}

void PortfolioItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    quantity_ = 0;
    maxcancel_ = 0;
    maxopenperstart_ = 0;
    totalopenlimit_ = 0;
    if (has_strategy()) {
      if (strategy_ != NULL) strategy_->::entity::StrategyItem::Clear();
    }
  }
  legs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortfolioItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Legs;
        break;
      }
      
      // repeated .entity.LegItem Legs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Legs;
        if (input->ExpectTag(32)) goto parse_MaxCancel;
        break;
      }
      
      // required int32 MaxCancel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxCancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcancel_)));
          set_has_maxcancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxOpenPerStart;
        break;
      }
      
      // required int32 MaxOpenPerStart = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxOpenPerStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxopenperstart_)));
          set_has_maxopenperstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TotalOpenLimit;
        break;
      }
      
      // required int32 TotalOpenLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalOpenLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalopenlimit_)));
          set_has_totalopenlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Strategy;
        break;
      }
      
      // required .entity.StrategyItem Strategy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PortfolioItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // repeated .entity.LegItem Legs = 3;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->legs(i), output);
  }
  
  // required int32 MaxCancel = 4;
  if (has_maxcancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxcancel(), output);
  }
  
  // required int32 MaxOpenPerStart = 5;
  if (has_maxopenperstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxopenperstart(), output);
  }
  
  // required int32 TotalOpenLimit = 6;
  if (has_totalopenlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalopenlimit(), output);
  }
  
  // required .entity.StrategyItem Strategy = 7;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PortfolioItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  // repeated .entity.LegItem Legs = 3;
  for (int i = 0; i < this->legs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->legs(i), target);
  }
  
  // required int32 MaxCancel = 4;
  if (has_maxcancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxcancel(), target);
  }
  
  // required int32 MaxOpenPerStart = 5;
  if (has_maxopenperstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxopenperstart(), target);
  }
  
  // required int32 TotalOpenLimit = 6;
  if (has_totalopenlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalopenlimit(), target);
  }
  
  // required .entity.StrategyItem Strategy = 7;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PortfolioItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required int32 MaxCancel = 4;
    if (has_maxcancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcancel());
    }
    
    // required int32 MaxOpenPerStart = 5;
    if (has_maxopenperstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxopenperstart());
    }
    
    // required int32 TotalOpenLimit = 6;
    if (has_totalopenlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalopenlimit());
    }
    
    // required .entity.StrategyItem Strategy = 7;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy());
    }
    
  }
  // repeated .entity.LegItem Legs = 3;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortfolioItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortfolioItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortfolioItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortfolioItem::MergeFrom(const PortfolioItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  legs_.MergeFrom(from.legs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_maxcancel()) {
      set_maxcancel(from.maxcancel());
    }
    if (from.has_maxopenperstart()) {
      set_maxopenperstart(from.maxopenperstart());
    }
    if (from.has_totalopenlimit()) {
      set_totalopenlimit(from.totalopenlimit());
    }
    if (from.has_strategy()) {
      mutable_strategy()->::entity::StrategyItem::MergeFrom(from.strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortfolioItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortfolioItem::CopyFrom(const PortfolioItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007b) != 0x0000007b) return false;
  
  for (int i = 0; i < legs_size(); i++) {
    if (!this->legs(i).IsInitialized()) return false;
  }
  if (has_strategy()) {
    if (!this->strategy().IsInitialized()) return false;
  }
  return true;
}

void PortfolioItem::Swap(PortfolioItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quantity_, other->quantity_);
    legs_.Swap(&other->legs_);
    std::swap(maxcancel_, other->maxcancel_);
    std::swap(maxopenperstart_, other->maxopenperstart_);
    std::swap(totalopenlimit_, other->totalopenlimit_);
    std::swap(strategy_, other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortfolioItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortfolioItem_descriptor_;
  metadata.reflection = PortfolioItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortfolioUpdateItem::kIDFieldNumber;
const int PortfolioUpdateItem::kLegsFieldNumber;
const int PortfolioUpdateItem::kStrategyFieldNumber;
const int PortfolioUpdateItem::kRunningFieldNumber;
const int PortfolioUpdateItem::kTriggersFieldNumber;
const int PortfolioUpdateItem::kTotalOpenTimesFieldNumber;
const int PortfolioUpdateItem::kTotalCloseTimesFieldNumber;
const int PortfolioUpdateItem::kCurrentPositionFieldNumber;
const int PortfolioUpdateItem::kCancelTimesFieldNumber;
const int PortfolioUpdateItem::kMessageFieldNumber;
const int PortfolioUpdateItem::kARDiffFieldNumber;
const int PortfolioUpdateItem::kARLongDiffFieldNumber;
const int PortfolioUpdateItem::kARShortDiffFieldNumber;
const int PortfolioUpdateItem::kARLongSizeFieldNumber;
const int PortfolioUpdateItem::kARShortSizeFieldNumber;
const int PortfolioUpdateItem::kSCDiffFieldNumber;
#endif  // !_MSC_VER

PortfolioUpdateItem::PortfolioUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PortfolioUpdateItem::InitAsDefaultInstance() {
}

PortfolioUpdateItem::PortfolioUpdateItem(const PortfolioUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PortfolioUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_ = 0;
  running_ = false;
  totalopentimes_ = 0;
  totalclosetimes_ = 0;
  currentposition_ = 0;
  canceltimes_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ar_diff_ = 0;
  ar_longdiff_ = 0;
  ar_shortdiff_ = 0;
  ar_longsize_ = 0;
  ar_shortsize_ = 0;
  sc_diff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortfolioUpdateItem::~PortfolioUpdateItem() {
  SharedDtor();
}

void PortfolioUpdateItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void PortfolioUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortfolioUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortfolioUpdateItem_descriptor_;
}

const PortfolioUpdateItem& PortfolioUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PortfolioUpdateItem* PortfolioUpdateItem::default_instance_ = NULL;

PortfolioUpdateItem* PortfolioUpdateItem::New() const {
  return new PortfolioUpdateItem;
}

void PortfolioUpdateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    strategy_ = 0;
    running_ = false;
    totalopentimes_ = 0;
    totalclosetimes_ = 0;
    currentposition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    canceltimes_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    ar_diff_ = 0;
    ar_longdiff_ = 0;
    ar_shortdiff_ = 0;
    ar_longsize_ = 0;
    ar_shortsize_ = 0;
    sc_diff_ = 0;
  }
  legs_.Clear();
  triggers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortfolioUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Legs;
        break;
      }
      
      // repeated .entity.LegUpdateItem Legs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Legs;
        if (input->ExpectTag(24)) goto parse_Strategy;
        break;
      }
      
      // required .entity.StrategyType Strategy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StrategyType_IsValid(value)) {
            set_strategy(static_cast< entity::StrategyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Running;
        break;
      }
      
      // required bool Running = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
          set_has_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Triggers;
        break;
      }
      
      // repeated .entity.TriggerStatus Triggers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Triggers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Triggers;
        if (input->ExpectTag(48)) goto parse_TotalOpenTimes;
        break;
      }
      
      // required int32 TotalOpenTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalOpenTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalopentimes_)));
          set_has_totalopentimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TotalCloseTimes;
        break;
      }
      
      // required int32 TotalCloseTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalCloseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalclosetimes_)));
          set_has_totalclosetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CurrentPosition;
        break;
      }
      
      // required int32 CurrentPosition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentposition_)));
          set_has_currentposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CancelTimes;
        break;
      }
      
      // required int32 CancelTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CancelTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canceltimes_)));
          set_has_canceltimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Message;
        break;
      }
      
      // optional string Message = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(809)) goto parse_AR_Diff;
        break;
      }
      
      // optional double AR_Diff = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AR_Diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ar_diff_)));
          set_has_ar_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(817)) goto parse_AR_LongDiff;
        break;
      }
      
      // optional double AR_LongDiff = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AR_LongDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ar_longdiff_)));
          set_has_ar_longdiff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(825)) goto parse_AR_ShortDiff;
        break;
      }
      
      // optional double AR_ShortDiff = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AR_ShortDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ar_shortdiff_)));
          set_has_ar_shortdiff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_AR_LongSize;
        break;
      }
      
      // optional int32 AR_LongSize = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AR_LongSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ar_longsize_)));
          set_has_ar_longsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_AR_ShortSize;
        break;
      }
      
      // optional int32 AR_ShortSize = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AR_ShortSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ar_shortsize_)));
          set_has_ar_shortsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1609)) goto parse_SC_Diff;
        break;
      }
      
      // optional double SC_Diff = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SC_Diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sc_diff_)));
          set_has_sc_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PortfolioUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // repeated .entity.LegUpdateItem Legs = 2;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->legs(i), output);
  }
  
  // required .entity.StrategyType Strategy = 3;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->strategy(), output);
  }
  
  // required bool Running = 4;
  if (has_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->running(), output);
  }
  
  // repeated .entity.TriggerStatus Triggers = 5;
  for (int i = 0; i < this->triggers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->triggers(i), output);
  }
  
  // required int32 TotalOpenTimes = 6;
  if (has_totalopentimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalopentimes(), output);
  }
  
  // required int32 TotalCloseTimes = 7;
  if (has_totalclosetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalclosetimes(), output);
  }
  
  // required int32 CurrentPosition = 8;
  if (has_currentposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currentposition(), output);
  }
  
  // required int32 CancelTimes = 9;
  if (has_canceltimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->canceltimes(), output);
  }
  
  // optional string Message = 10;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->message(), output);
  }
  
  // optional double AR_Diff = 101;
  if (has_ar_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->ar_diff(), output);
  }
  
  // optional double AR_LongDiff = 102;
  if (has_ar_longdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->ar_longdiff(), output);
  }
  
  // optional double AR_ShortDiff = 103;
  if (has_ar_shortdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(103, this->ar_shortdiff(), output);
  }
  
  // optional int32 AR_LongSize = 104;
  if (has_ar_longsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->ar_longsize(), output);
  }
  
  // optional int32 AR_ShortSize = 105;
  if (has_ar_shortsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(105, this->ar_shortsize(), output);
  }
  
  // optional double SC_Diff = 201;
  if (has_sc_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(201, this->sc_diff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PortfolioUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // repeated .entity.LegUpdateItem Legs = 2;
  for (int i = 0; i < this->legs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->legs(i), target);
  }
  
  // required .entity.StrategyType Strategy = 3;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->strategy(), target);
  }
  
  // required bool Running = 4;
  if (has_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->running(), target);
  }
  
  // repeated .entity.TriggerStatus Triggers = 5;
  for (int i = 0; i < this->triggers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->triggers(i), target);
  }
  
  // required int32 TotalOpenTimes = 6;
  if (has_totalopentimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalopentimes(), target);
  }
  
  // required int32 TotalCloseTimes = 7;
  if (has_totalclosetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalclosetimes(), target);
  }
  
  // required int32 CurrentPosition = 8;
  if (has_currentposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currentposition(), target);
  }
  
  // required int32 CancelTimes = 9;
  if (has_canceltimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->canceltimes(), target);
  }
  
  // optional string Message = 10;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->message(), target);
  }
  
  // optional double AR_Diff = 101;
  if (has_ar_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->ar_diff(), target);
  }
  
  // optional double AR_LongDiff = 102;
  if (has_ar_longdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->ar_longdiff(), target);
  }
  
  // optional double AR_ShortDiff = 103;
  if (has_ar_shortdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(103, this->ar_shortdiff(), target);
  }
  
  // optional int32 AR_LongSize = 104;
  if (has_ar_longsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->ar_longsize(), target);
  }
  
  // optional int32 AR_ShortSize = 105;
  if (has_ar_shortsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(105, this->ar_shortsize(), target);
  }
  
  // optional double SC_Diff = 201;
  if (has_sc_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(201, this->sc_diff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PortfolioUpdateItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required .entity.StrategyType Strategy = 3;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategy());
    }
    
    // required bool Running = 4;
    if (has_running()) {
      total_size += 1 + 1;
    }
    
    // required int32 TotalOpenTimes = 6;
    if (has_totalopentimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalopentimes());
    }
    
    // required int32 TotalCloseTimes = 7;
    if (has_totalclosetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalclosetimes());
    }
    
    // required int32 CurrentPosition = 8;
    if (has_currentposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentposition());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CancelTimes = 9;
    if (has_canceltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canceltimes());
    }
    
    // optional string Message = 10;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // optional double AR_Diff = 101;
    if (has_ar_diff()) {
      total_size += 2 + 8;
    }
    
    // optional double AR_LongDiff = 102;
    if (has_ar_longdiff()) {
      total_size += 2 + 8;
    }
    
    // optional double AR_ShortDiff = 103;
    if (has_ar_shortdiff()) {
      total_size += 2 + 8;
    }
    
    // optional int32 AR_LongSize = 104;
    if (has_ar_longsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ar_longsize());
    }
    
    // optional int32 AR_ShortSize = 105;
    if (has_ar_shortsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ar_shortsize());
    }
    
    // optional double SC_Diff = 201;
    if (has_sc_diff()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .entity.LegUpdateItem Legs = 2;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }
  
  // repeated .entity.TriggerStatus Triggers = 5;
  total_size += 1 * this->triggers_size();
  for (int i = 0; i < this->triggers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortfolioUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortfolioUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortfolioUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortfolioUpdateItem::MergeFrom(const PortfolioUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  legs_.MergeFrom(from.legs_);
  triggers_.MergeFrom(from.triggers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_running()) {
      set_running(from.running());
    }
    if (from.has_totalopentimes()) {
      set_totalopentimes(from.totalopentimes());
    }
    if (from.has_totalclosetimes()) {
      set_totalclosetimes(from.totalclosetimes());
    }
    if (from.has_currentposition()) {
      set_currentposition(from.currentposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_canceltimes()) {
      set_canceltimes(from.canceltimes());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_ar_diff()) {
      set_ar_diff(from.ar_diff());
    }
    if (from.has_ar_longdiff()) {
      set_ar_longdiff(from.ar_longdiff());
    }
    if (from.has_ar_shortdiff()) {
      set_ar_shortdiff(from.ar_shortdiff());
    }
    if (from.has_ar_longsize()) {
      set_ar_longsize(from.ar_longsize());
    }
    if (from.has_ar_shortsize()) {
      set_ar_shortsize(from.ar_shortsize());
    }
    if (from.has_sc_diff()) {
      set_sc_diff(from.sc_diff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortfolioUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortfolioUpdateItem::CopyFrom(const PortfolioUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioUpdateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ed) != 0x000001ed) return false;
  
  for (int i = 0; i < legs_size(); i++) {
    if (!this->legs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < triggers_size(); i++) {
    if (!this->triggers(i).IsInitialized()) return false;
  }
  return true;
}

void PortfolioUpdateItem::Swap(PortfolioUpdateItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    legs_.Swap(&other->legs_);
    std::swap(strategy_, other->strategy_);
    std::swap(running_, other->running_);
    triggers_.Swap(&other->triggers_);
    std::swap(totalopentimes_, other->totalopentimes_);
    std::swap(totalclosetimes_, other->totalclosetimes_);
    std::swap(currentposition_, other->currentposition_);
    std::swap(canceltimes_, other->canceltimes_);
    std::swap(message_, other->message_);
    std::swap(ar_diff_, other->ar_diff_);
    std::swap(ar_longdiff_, other->ar_longdiff_);
    std::swap(ar_shortdiff_, other->ar_shortdiff_);
    std::swap(ar_longsize_, other->ar_longsize_);
    std::swap(ar_shortsize_, other->ar_shortsize_);
    std::swap(sc_diff_, other->sc_diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortfolioUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortfolioUpdateItem_descriptor_;
  metadata.reflection = PortfolioUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectParam::kQuoteAddressFieldNumber;
const int ConnectParam::kStreamFolderFieldNumber;
#endif  // !_MSC_VER

ConnectParam::ConnectParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectParam::InitAsDefaultInstance() {
}

ConnectParam::ConnectParam(const ConnectParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectParam::SharedCtor() {
  _cached_size_ = 0;
  quoteaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  streamfolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectParam::~ConnectParam() {
  SharedDtor();
}

void ConnectParam::SharedDtor() {
  if (quoteaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete quoteaddress_;
  }
  if (streamfolder_ != &::google::protobuf::internal::kEmptyString) {
    delete streamfolder_;
  }
  if (this != default_instance_) {
  }
}

void ConnectParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectParam_descriptor_;
}

const ConnectParam& ConnectParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ConnectParam* ConnectParam::default_instance_ = NULL;

ConnectParam* ConnectParam::New() const {
  return new ConnectParam;
}

void ConnectParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quoteaddress()) {
      if (quoteaddress_ != &::google::protobuf::internal::kEmptyString) {
        quoteaddress_->clear();
      }
    }
    if (has_streamfolder()) {
      if (streamfolder_ != &::google::protobuf::internal::kEmptyString) {
        streamfolder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string QuoteAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quoteaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quoteaddress().data(), this->quoteaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StreamFolder;
        break;
      }
      
      // required string StreamFolder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StreamFolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamfolder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streamfolder().data(), this->streamfolder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string QuoteAddress = 1;
  if (has_quoteaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaddress().data(), this->quoteaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->quoteaddress(), output);
  }
  
  // required string StreamFolder = 2;
  if (has_streamfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamfolder().data(), this->streamfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->streamfolder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string QuoteAddress = 1;
  if (has_quoteaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaddress().data(), this->quoteaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quoteaddress(), target);
  }
  
  // required string StreamFolder = 2;
  if (has_streamfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamfolder().data(), this->streamfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->streamfolder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string QuoteAddress = 1;
    if (has_quoteaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quoteaddress());
    }
    
    // required string StreamFolder = 2;
    if (has_streamfolder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamfolder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectParam::MergeFrom(const ConnectParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quoteaddress()) {
      set_quoteaddress(from.quoteaddress());
    }
    if (from.has_streamfolder()) {
      set_streamfolder(from.streamfolder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectParam::CopyFrom(const ConnectParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ConnectParam::Swap(ConnectParam* other) {
  if (other != this) {
    std::swap(quoteaddress_, other->quoteaddress_);
    std::swap(streamfolder_, other->streamfolder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectParam_descriptor_;
  metadata.reflection = ConnectParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationReturn::kSuccessFieldNumber;
const int OperationReturn::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

OperationReturn::OperationReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationReturn::InitAsDefaultInstance() {
}

OperationReturn::OperationReturn(const OperationReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationReturn::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationReturn::~OperationReturn() {
  SharedDtor();
}

void OperationReturn::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void OperationReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationReturn_descriptor_;
}

const OperationReturn& OperationReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OperationReturn* OperationReturn::default_instance_ = NULL;

OperationReturn* OperationReturn::New() const {
  return new OperationReturn;
}

void OperationReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorMessage;
        break;
      }
      
      // required string ErrorMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool Success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string ErrorMessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationReturn::MergeFrom(const OperationReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationReturn::CopyFrom(const OperationReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OperationReturn::Swap(OperationReturn* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationReturn_descriptor_;
  metadata.reflection = OperationReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountSettings::kMaxSubmitFieldNumber;
const int AccountSettings::kMaxCancelFieldNumber;
#endif  // !_MSC_VER

AccountSettings::AccountSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountSettings::InitAsDefaultInstance() {
}

AccountSettings::AccountSettings(const AccountSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountSettings::SharedCtor() {
  _cached_size_ = 0;
  maxsubmit_ = 0;
  maxcancel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountSettings::~AccountSettings() {
  SharedDtor();
}

void AccountSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountSettings_descriptor_;
}

const AccountSettings& AccountSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AccountSettings* AccountSettings::default_instance_ = NULL;

AccountSettings* AccountSettings::New() const {
  return new AccountSettings;
}

void AccountSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxsubmit_ = 0;
    maxcancel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MaxSubmit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsubmit_)));
          set_has_maxsubmit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxCancel;
        break;
      }
      
      // required int32 MaxCancel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxCancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcancel_)));
          set_has_maxcancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MaxSubmit = 1;
  if (has_maxsubmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxsubmit(), output);
  }
  
  // required int32 MaxCancel = 2;
  if (has_maxcancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcancel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MaxSubmit = 1;
  if (has_maxsubmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxsubmit(), target);
  }
  
  // required int32 MaxCancel = 2;
  if (has_maxcancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcancel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MaxSubmit = 1;
    if (has_maxsubmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsubmit());
    }
    
    // required int32 MaxCancel = 2;
    if (has_maxcancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcancel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountSettings::MergeFrom(const AccountSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxsubmit()) {
      set_maxsubmit(from.maxsubmit());
    }
    if (from.has_maxcancel()) {
      set_maxcancel(from.maxcancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSettings::CopyFrom(const AccountSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AccountSettings::Swap(AccountSettings* other) {
  if (other != this) {
    std::swap(maxsubmit_, other->maxsubmit_);
    std::swap(maxcancel_, other->maxcancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountSettings_descriptor_;
  metadata.reflection = AccountSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginParam::kBrokerIdFieldNumber;
const int LoginParam::kUserIdFieldNumber;
const int LoginParam::kPasswordFieldNumber;
const int LoginParam::kAcctSettingsFieldNumber;
#endif  // !_MSC_VER

LoginParam::LoginParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginParam::InitAsDefaultInstance() {
  acctsettings_ = const_cast< ::entity::AccountSettings*>(&::entity::AccountSettings::default_instance());
}

LoginParam::LoginParam(const LoginParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginParam::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acctsettings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginParam::~LoginParam() {
  SharedDtor();
}

void LoginParam::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete acctsettings_;
  }
}

void LoginParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginParam_descriptor_;
}

const LoginParam& LoginParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LoginParam* LoginParam::default_instance_ = NULL;

LoginParam* LoginParam::New() const {
  return new LoginParam;
}

void LoginParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_acctsettings()) {
      if (acctsettings_ != NULL) acctsettings_->::entity::AccountSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }
      
      // required string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AcctSettings;
        break;
      }
      
      // optional .entity.AccountSettings AcctSettings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcctSettings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acctsettings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerId = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }
  
  // required string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }
  
  // required string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional .entity.AccountSettings AcctSettings = 4;
  if (has_acctsettings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acctsettings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerId = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }
  
  // required string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }
  
  // required string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional .entity.AccountSettings AcctSettings = 4;
  if (has_acctsettings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acctsettings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerId = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string UserId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .entity.AccountSettings AcctSettings = 4;
    if (has_acctsettings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acctsettings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginParam::MergeFrom(const LoginParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_acctsettings()) {
      mutable_acctsettings()->::entity::AccountSettings::MergeFrom(from.acctsettings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginParam::CopyFrom(const LoginParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_acctsettings()) {
    if (!this->acctsettings().IsInitialized()) return false;
  }
  return true;
}

void LoginParam::Swap(LoginParam* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(acctsettings_, other->acctsettings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginParam_descriptor_;
  metadata.reflection = LoginParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegQuoteParam::kSymbolsFieldNumber;
#endif  // !_MSC_VER

RegQuoteParam::RegQuoteParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegQuoteParam::InitAsDefaultInstance() {
}

RegQuoteParam::RegQuoteParam(const RegQuoteParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegQuoteParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegQuoteParam::~RegQuoteParam() {
  SharedDtor();
}

void RegQuoteParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegQuoteParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegQuoteParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegQuoteParam_descriptor_;
}

const RegQuoteParam& RegQuoteParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RegQuoteParam* RegQuoteParam::default_instance_ = NULL;

RegQuoteParam* RegQuoteParam::New() const {
  return new RegQuoteParam;
}

void RegQuoteParam::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegQuoteParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Symbols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbols(0).data(), this->symbols(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegQuoteParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->symbols(i).data(), this->symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbols(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegQuoteParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbols(i).data(), this->symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->symbols(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegQuoteParam::ByteSize() const {
  int total_size = 0;
  
  // repeated string Symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegQuoteParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegQuoteParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegQuoteParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegQuoteParam::MergeFrom(const RegQuoteParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegQuoteParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegQuoteParam::CopyFrom(const RegQuoteParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegQuoteParam::IsInitialized() const {
  
  return true;
}

void RegQuoteParam::Swap(RegQuoteParam* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegQuoteParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegQuoteParam_descriptor_;
  metadata.reflection = RegQuoteParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPortfolioParam::kPortfolioItemsFieldNumber;
#endif  // !_MSC_VER

AddPortfolioParam::AddPortfolioParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPortfolioParam::InitAsDefaultInstance() {
}

AddPortfolioParam::AddPortfolioParam(const AddPortfolioParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPortfolioParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPortfolioParam::~AddPortfolioParam() {
  SharedDtor();
}

void AddPortfolioParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPortfolioParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPortfolioParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPortfolioParam_descriptor_;
}

const AddPortfolioParam& AddPortfolioParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AddPortfolioParam* AddPortfolioParam::default_instance_ = NULL;

AddPortfolioParam* AddPortfolioParam::New() const {
  return new AddPortfolioParam;
}

void AddPortfolioParam::Clear() {
  portfolioitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPortfolioParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .entity.PortfolioItem PortfolioItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PortfolioItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portfolioitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PortfolioItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPortfolioParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .entity.PortfolioItem PortfolioItems = 1;
  for (int i = 0; i < this->portfolioitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->portfolioitems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPortfolioParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .entity.PortfolioItem PortfolioItems = 1;
  for (int i = 0; i < this->portfolioitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->portfolioitems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPortfolioParam::ByteSize() const {
  int total_size = 0;
  
  // repeated .entity.PortfolioItem PortfolioItems = 1;
  total_size += 1 * this->portfolioitems_size();
  for (int i = 0; i < this->portfolioitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portfolioitems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPortfolioParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPortfolioParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPortfolioParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPortfolioParam::MergeFrom(const AddPortfolioParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  portfolioitems_.MergeFrom(from.portfolioitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPortfolioParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPortfolioParam::CopyFrom(const AddPortfolioParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPortfolioParam::IsInitialized() const {
  
  for (int i = 0; i < portfolioitems_size(); i++) {
    if (!this->portfolioitems(i).IsInitialized()) return false;
  }
  return true;
}

void AddPortfolioParam::Swap(AddPortfolioParam* other) {
  if (other != this) {
    portfolioitems_.Swap(&other->portfolioitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPortfolioParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPortfolioParam_descriptor_;
  metadata.reflection = AddPortfolioParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PorfOpenPosiParam::kPortfIdFieldNumber;
const int PorfOpenPosiParam::kQuantityFieldNumber;
const int PorfOpenPosiParam::kIsVirtualFieldNumber;
#endif  // !_MSC_VER

PorfOpenPosiParam::PorfOpenPosiParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PorfOpenPosiParam::InitAsDefaultInstance() {
}

PorfOpenPosiParam::PorfOpenPosiParam(const PorfOpenPosiParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PorfOpenPosiParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  isvirtual_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PorfOpenPosiParam::~PorfOpenPosiParam() {
  SharedDtor();
}

void PorfOpenPosiParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void PorfOpenPosiParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PorfOpenPosiParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PorfOpenPosiParam_descriptor_;
}

const PorfOpenPosiParam& PorfOpenPosiParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PorfOpenPosiParam* PorfOpenPosiParam::default_instance_ = NULL;

PorfOpenPosiParam* PorfOpenPosiParam::New() const {
  return new PorfOpenPosiParam;
}

void PorfOpenPosiParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    quantity_ = 0;
    isvirtual_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PorfOpenPosiParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsVirtual;
        break;
      }
      
      // required bool IsVirtual = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVirtual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvirtual_)));
          set_has_isvirtual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PorfOpenPosiParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // required bool IsVirtual = 3;
  if (has_isvirtual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isvirtual(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PorfOpenPosiParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  // required bool IsVirtual = 3;
  if (has_isvirtual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isvirtual(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PorfOpenPosiParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required int32 Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required bool IsVirtual = 3;
    if (has_isvirtual()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PorfOpenPosiParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PorfOpenPosiParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PorfOpenPosiParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PorfOpenPosiParam::MergeFrom(const PorfOpenPosiParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_isvirtual()) {
      set_isvirtual(from.isvirtual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PorfOpenPosiParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PorfOpenPosiParam::CopyFrom(const PorfOpenPosiParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PorfOpenPosiParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PorfOpenPosiParam::Swap(PorfOpenPosiParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(quantity_, other->quantity_);
    std::swap(isvirtual_, other->isvirtual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PorfOpenPosiParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PorfOpenPosiParam_descriptor_;
  metadata.reflection = PorfOpenPosiParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClosePositionParam::kMultiLegOrderFieldNumber;
const int ClosePositionParam::kLegOrdRefFieldNumber;
#endif  // !_MSC_VER

ClosePositionParam::ClosePositionParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClosePositionParam::InitAsDefaultInstance() {
  multilegorder_ = const_cast< ::trade::MultiLegOrder*>(&::trade::MultiLegOrder::default_instance());
}

ClosePositionParam::ClosePositionParam(const ClosePositionParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClosePositionParam::SharedCtor() {
  _cached_size_ = 0;
  multilegorder_ = NULL;
  legordref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClosePositionParam::~ClosePositionParam() {
  SharedDtor();
}

void ClosePositionParam::SharedDtor() {
  if (legordref_ != &::google::protobuf::internal::kEmptyString) {
    delete legordref_;
  }
  if (this != default_instance_) {
    delete multilegorder_;
  }
}

void ClosePositionParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClosePositionParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClosePositionParam_descriptor_;
}

const ClosePositionParam& ClosePositionParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ClosePositionParam* ClosePositionParam::default_instance_ = NULL;

ClosePositionParam* ClosePositionParam::New() const {
  return new ClosePositionParam;
}

void ClosePositionParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_multilegorder()) {
      if (multilegorder_ != NULL) multilegorder_->::trade::MultiLegOrder::Clear();
    }
    if (has_legordref()) {
      if (legordref_ != &::google::protobuf::internal::kEmptyString) {
        legordref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClosePositionParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trade.MultiLegOrder MultiLegOrder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multilegorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LegOrdRef;
        break;
      }
      
      // optional string LegOrdRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrdRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legordref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legordref().data(), this->legordref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClosePositionParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trade.MultiLegOrder MultiLegOrder = 1;
  if (has_multilegorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multilegorder(), output);
  }
  
  // optional string LegOrdRef = 2;
  if (has_legordref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legordref().data(), this->legordref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legordref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClosePositionParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trade.MultiLegOrder MultiLegOrder = 1;
  if (has_multilegorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->multilegorder(), target);
  }
  
  // optional string LegOrdRef = 2;
  if (has_legordref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legordref().data(), this->legordref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legordref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClosePositionParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trade.MultiLegOrder MultiLegOrder = 1;
    if (has_multilegorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multilegorder());
    }
    
    // optional string LegOrdRef = 2;
    if (has_legordref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legordref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClosePositionParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClosePositionParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClosePositionParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClosePositionParam::MergeFrom(const ClosePositionParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multilegorder()) {
      mutable_multilegorder()->::trade::MultiLegOrder::MergeFrom(from.multilegorder());
    }
    if (from.has_legordref()) {
      set_legordref(from.legordref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClosePositionParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosePositionParam::CopyFrom(const ClosePositionParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosePositionParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_multilegorder()) {
    if (!this->multilegorder().IsInitialized()) return false;
  }
  return true;
}

void ClosePositionParam::Swap(ClosePositionParam* other) {
  if (other != this) {
    std::swap(multilegorder_, other->multilegorder_);
    std::swap(legordref_, other->legordref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClosePositionParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClosePositionParam_descriptor_;
  metadata.reflection = ClosePositionParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegOrderUpdateParam::kPortfIdFieldNumber;
const int LegOrderUpdateParam::kMultiLegOrderIdFieldNumber;
const int LegOrderUpdateParam::kLegOrderRefFieldNumber;
const int LegOrderUpdateParam::kLegOrderFieldNumber;
#endif  // !_MSC_VER

LegOrderUpdateParam::LegOrderUpdateParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegOrderUpdateParam::InitAsDefaultInstance() {
  legorder_ = const_cast< ::trade::Order*>(&::trade::Order::default_instance());
}

LegOrderUpdateParam::LegOrderUpdateParam(const LegOrderUpdateParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegOrderUpdateParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multilegorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legorderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legorder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegOrderUpdateParam::~LegOrderUpdateParam() {
  SharedDtor();
}

void LegOrderUpdateParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (multilegorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete multilegorderid_;
  }
  if (legorderref_ != &::google::protobuf::internal::kEmptyString) {
    delete legorderref_;
  }
  if (this != default_instance_) {
    delete legorder_;
  }
}

void LegOrderUpdateParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegOrderUpdateParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegOrderUpdateParam_descriptor_;
}

const LegOrderUpdateParam& LegOrderUpdateParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegOrderUpdateParam* LegOrderUpdateParam::default_instance_ = NULL;

LegOrderUpdateParam* LegOrderUpdateParam::New() const {
  return new LegOrderUpdateParam;
}

void LegOrderUpdateParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_multilegorderid()) {
      if (multilegorderid_ != &::google::protobuf::internal::kEmptyString) {
        multilegorderid_->clear();
      }
    }
    if (has_legorderref()) {
      if (legorderref_ != &::google::protobuf::internal::kEmptyString) {
        legorderref_->clear();
      }
    }
    if (has_legorder()) {
      if (legorder_ != NULL) legorder_->::trade::Order::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegOrderUpdateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MultiLegOrderId;
        break;
      }
      
      // required string MultiLegOrderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MultiLegOrderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multilegorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multilegorderid().data(), this->multilegorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LegOrderRef;
        break;
      }
      
      // required string LegOrderRef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legorderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legorderref().data(), this->legorderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LegOrder;
        break;
      }
      
      // required .trade.Order LegOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegOrderUpdateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string MultiLegOrderId = 2;
  if (has_multilegorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegorderid().data(), this->multilegorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->multilegorderid(), output);
  }
  
  // required string LegOrderRef = 3;
  if (has_legorderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legorderref().data(), this->legorderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->legorderref(), output);
  }
  
  // required .trade.Order LegOrder = 4;
  if (has_legorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->legorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegOrderUpdateParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string MultiLegOrderId = 2;
  if (has_multilegorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegorderid().data(), this->multilegorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->multilegorderid(), target);
  }
  
  // required string LegOrderRef = 3;
  if (has_legorderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legorderref().data(), this->legorderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->legorderref(), target);
  }
  
  // required .trade.Order LegOrder = 4;
  if (has_legorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->legorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegOrderUpdateParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string MultiLegOrderId = 2;
    if (has_multilegorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multilegorderid());
    }
    
    // required string LegOrderRef = 3;
    if (has_legorderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legorderref());
    }
    
    // required .trade.Order LegOrder = 4;
    if (has_legorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegOrderUpdateParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegOrderUpdateParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegOrderUpdateParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegOrderUpdateParam::MergeFrom(const LegOrderUpdateParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_multilegorderid()) {
      set_multilegorderid(from.multilegorderid());
    }
    if (from.has_legorderref()) {
      set_legorderref(from.legorderref());
    }
    if (from.has_legorder()) {
      mutable_legorder()->::trade::Order::MergeFrom(from.legorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegOrderUpdateParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegOrderUpdateParam::CopyFrom(const LegOrderUpdateParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegOrderUpdateParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_legorder()) {
    if (!this->legorder().IsInitialized()) return false;
  }
  return true;
}

void LegOrderUpdateParam::Swap(LegOrderUpdateParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(multilegorderid_, other->multilegorderid_);
    std::swap(legorderref_, other->legorderref_);
    std::swap(legorder_, other->legorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegOrderUpdateParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegOrderUpdateParam_descriptor_;
  metadata.reflection = LegOrderUpdateParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArbitrageStrategySettings::kSideFieldNumber;
const int ArbitrageStrategySettings::kOpenConditionFieldNumber;
const int ArbitrageStrategySettings::kOpenPosiThresholdFieldNumber;
const int ArbitrageStrategySettings::kStopGainConditionFieldNumber;
const int ArbitrageStrategySettings::kStopGainThresholdFieldNumber;
const int ArbitrageStrategySettings::kStopLossConditionFieldNumber;
const int ArbitrageStrategySettings::kStopLossThresholdFieldNumber;
#endif  // !_MSC_VER

ArbitrageStrategySettings::ArbitrageStrategySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArbitrageStrategySettings::InitAsDefaultInstance() {
}

ArbitrageStrategySettings::ArbitrageStrategySettings(const ArbitrageStrategySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArbitrageStrategySettings::SharedCtor() {
  _cached_size_ = 0;
  side_ = 49;
  opencondition_ = 0;
  openposithreshold_ = 0;
  stopgaincondition_ = 0;
  stopgainthreshold_ = 0;
  stoplosscondition_ = 0;
  stoplossthreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArbitrageStrategySettings::~ArbitrageStrategySettings() {
  SharedDtor();
}

void ArbitrageStrategySettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArbitrageStrategySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArbitrageStrategySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArbitrageStrategySettings_descriptor_;
}

const ArbitrageStrategySettings& ArbitrageStrategySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ArbitrageStrategySettings* ArbitrageStrategySettings::default_instance_ = NULL;

ArbitrageStrategySettings* ArbitrageStrategySettings::New() const {
  return new ArbitrageStrategySettings;
}

void ArbitrageStrategySettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    side_ = 49;
    opencondition_ = 0;
    openposithreshold_ = 0;
    stopgaincondition_ = 0;
    stopgainthreshold_ = 0;
    stoplosscondition_ = 0;
    stoplossthreshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArbitrageStrategySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.PosiDirectionType Side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpenCondition;
        break;
      }
      
      // required .entity.CompareCondition OpenCondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_opencondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_OpenPosiThreshold;
        break;
      }
      
      // required double OpenPosiThreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenPosiThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openposithreshold_)));
          set_has_openposithreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_StopGainCondition;
        break;
      }
      
      // required .entity.CompareCondition StopGainCondition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopGainCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_stopgaincondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_StopGainThreshold;
        break;
      }
      
      // required double StopGainThreshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopGainThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopgainthreshold_)));
          set_has_stopgainthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_StopLossCondition;
        break;
      }
      
      // required .entity.CompareCondition StopLossCondition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopLossCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_stoplosscondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_StopLossThreshold;
        break;
      }
      
      // required double StopLossThreshold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopLossThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoplossthreshold_)));
          set_has_stoplossthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArbitrageStrategySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.PosiDirectionType Side = 1;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->side(), output);
  }
  
  // required .entity.CompareCondition OpenCondition = 2;
  if (has_opencondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opencondition(), output);
  }
  
  // required double OpenPosiThreshold = 3;
  if (has_openposithreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openposithreshold(), output);
  }
  
  // required .entity.CompareCondition StopGainCondition = 4;
  if (has_stopgaincondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stopgaincondition(), output);
  }
  
  // required double StopGainThreshold = 5;
  if (has_stopgainthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stopgainthreshold(), output);
  }
  
  // required .entity.CompareCondition StopLossCondition = 6;
  if (has_stoplosscondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->stoplosscondition(), output);
  }
  
  // required double StopLossThreshold = 7;
  if (has_stoplossthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stoplossthreshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArbitrageStrategySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.PosiDirectionType Side = 1;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->side(), target);
  }
  
  // required .entity.CompareCondition OpenCondition = 2;
  if (has_opencondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opencondition(), target);
  }
  
  // required double OpenPosiThreshold = 3;
  if (has_openposithreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openposithreshold(), target);
  }
  
  // required .entity.CompareCondition StopGainCondition = 4;
  if (has_stopgaincondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->stopgaincondition(), target);
  }
  
  // required double StopGainThreshold = 5;
  if (has_stopgainthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stopgainthreshold(), target);
  }
  
  // required .entity.CompareCondition StopLossCondition = 6;
  if (has_stoplosscondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->stoplosscondition(), target);
  }
  
  // required double StopLossThreshold = 7;
  if (has_stoplossthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stoplossthreshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArbitrageStrategySettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.PosiDirectionType Side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // required .entity.CompareCondition OpenCondition = 2;
    if (has_opencondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opencondition());
    }
    
    // required double OpenPosiThreshold = 3;
    if (has_openposithreshold()) {
      total_size += 1 + 8;
    }
    
    // required .entity.CompareCondition StopGainCondition = 4;
    if (has_stopgaincondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stopgaincondition());
    }
    
    // required double StopGainThreshold = 5;
    if (has_stopgainthreshold()) {
      total_size += 1 + 8;
    }
    
    // required .entity.CompareCondition StopLossCondition = 6;
    if (has_stoplosscondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stoplosscondition());
    }
    
    // required double StopLossThreshold = 7;
    if (has_stoplossthreshold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArbitrageStrategySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArbitrageStrategySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArbitrageStrategySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArbitrageStrategySettings::MergeFrom(const ArbitrageStrategySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_opencondition()) {
      set_opencondition(from.opencondition());
    }
    if (from.has_openposithreshold()) {
      set_openposithreshold(from.openposithreshold());
    }
    if (from.has_stopgaincondition()) {
      set_stopgaincondition(from.stopgaincondition());
    }
    if (from.has_stopgainthreshold()) {
      set_stopgainthreshold(from.stopgainthreshold());
    }
    if (from.has_stoplosscondition()) {
      set_stoplosscondition(from.stoplosscondition());
    }
    if (from.has_stoplossthreshold()) {
      set_stoplossthreshold(from.stoplossthreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArbitrageStrategySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArbitrageStrategySettings::CopyFrom(const ArbitrageStrategySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArbitrageStrategySettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ArbitrageStrategySettings::Swap(ArbitrageStrategySettings* other) {
  if (other != this) {
    std::swap(side_, other->side_);
    std::swap(opencondition_, other->opencondition_);
    std::swap(openposithreshold_, other->openposithreshold_);
    std::swap(stopgaincondition_, other->stopgaincondition_);
    std::swap(stopgainthreshold_, other->stopgainthreshold_);
    std::swap(stoplosscondition_, other->stoplosscondition_);
    std::swap(stoplossthreshold_, other->stoplossthreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArbitrageStrategySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArbitrageStrategySettings_descriptor_;
  metadata.reflection = ArbitrageStrategySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePosiStrategySettings::kCloseLegFieldNumber;
const int ChangePosiStrategySettings::kCloseLegSideFieldNumber;
const int ChangePosiStrategySettings::kTriggerConditionFieldNumber;
const int ChangePosiStrategySettings::kThresholdFieldNumber;
#endif  // !_MSC_VER

ChangePosiStrategySettings::ChangePosiStrategySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePosiStrategySettings::InitAsDefaultInstance() {
}

ChangePosiStrategySettings::ChangePosiStrategySettings(const ChangePosiStrategySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePosiStrategySettings::SharedCtor() {
  _cached_size_ = 0;
  closeleg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closelegside_ = 49;
  triggercondition_ = 0;
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePosiStrategySettings::~ChangePosiStrategySettings() {
  SharedDtor();
}

void ChangePosiStrategySettings::SharedDtor() {
  if (closeleg_ != &::google::protobuf::internal::kEmptyString) {
    delete closeleg_;
  }
  if (this != default_instance_) {
  }
}

void ChangePosiStrategySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePosiStrategySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePosiStrategySettings_descriptor_;
}

const ChangePosiStrategySettings& ChangePosiStrategySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ChangePosiStrategySettings* ChangePosiStrategySettings::default_instance_ = NULL;

ChangePosiStrategySettings* ChangePosiStrategySettings::New() const {
  return new ChangePosiStrategySettings;
}

void ChangePosiStrategySettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_closeleg()) {
      if (closeleg_ != &::google::protobuf::internal::kEmptyString) {
        closeleg_->clear();
      }
    }
    closelegside_ = 49;
    triggercondition_ = 0;
    threshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePosiStrategySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CloseLeg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closeleg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closeleg().data(), this->closeleg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CloseLegSide;
        break;
      }
      
      // required .entity.PosiDirectionType CloseLegSide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseLegSide:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_closelegside(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerCondition;
        break;
      }
      
      // required .entity.CompareCondition TriggerCondition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_triggercondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Threshold;
        break;
      }
      
      // required double Threshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePosiStrategySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string CloseLeg = 1;
  if (has_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeleg().data(), this->closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->closeleg(), output);
  }
  
  // required .entity.PosiDirectionType CloseLegSide = 2;
  if (has_closelegside()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->closelegside(), output);
  }
  
  // required .entity.CompareCondition TriggerCondition = 3;
  if (has_triggercondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->triggercondition(), output);
  }
  
  // required double Threshold = 4;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->threshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePosiStrategySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string CloseLeg = 1;
  if (has_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeleg().data(), this->closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->closeleg(), target);
  }
  
  // required .entity.PosiDirectionType CloseLegSide = 2;
  if (has_closelegside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->closelegside(), target);
  }
  
  // required .entity.CompareCondition TriggerCondition = 3;
  if (has_triggercondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->triggercondition(), target);
  }
  
  // required double Threshold = 4;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->threshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePosiStrategySettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string CloseLeg = 1;
    if (has_closeleg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closeleg());
    }
    
    // required .entity.PosiDirectionType CloseLegSide = 2;
    if (has_closelegside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->closelegside());
    }
    
    // required .entity.CompareCondition TriggerCondition = 3;
    if (has_triggercondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->triggercondition());
    }
    
    // required double Threshold = 4;
    if (has_threshold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePosiStrategySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePosiStrategySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePosiStrategySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePosiStrategySettings::MergeFrom(const ChangePosiStrategySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_closeleg()) {
      set_closeleg(from.closeleg());
    }
    if (from.has_closelegside()) {
      set_closelegside(from.closelegside());
    }
    if (from.has_triggercondition()) {
      set_triggercondition(from.triggercondition());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePosiStrategySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePosiStrategySettings::CopyFrom(const ChangePosiStrategySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePosiStrategySettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ChangePosiStrategySettings::Swap(ChangePosiStrategySettings* other) {
  if (other != this) {
    std::swap(closeleg_, other->closeleg_);
    std::swap(closelegside_, other->closelegside_);
    std::swap(triggercondition_, other->triggercondition_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePosiStrategySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePosiStrategySettings_descriptor_;
  metadata.reflection = ChangePosiStrategySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalperSettings::kThresholdFieldNumber;
const int ScalperSettings::kPriceTickFieldNumber;
const int ScalperSettings::kCaseLE2TickFieldNumber;
const int ScalperSettings::kCaseLE3TickFieldNumber;
const int ScalperSettings::kCaseGE4TickFieldNumber;
const int ScalperSettings::kCaseNoChangeFieldNumber;
const int ScalperSettings::kStopLossStrategyFieldNumber;
const int ScalperSettings::kRetryTimesFieldNumber;
const int ScalperSettings::kOpenTimeoutFieldNumber;
#endif  // !_MSC_VER

ScalperSettings::ScalperSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalperSettings::InitAsDefaultInstance() {
}

ScalperSettings::ScalperSettings(const ScalperSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalperSettings::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
  pricetick_ = 0;
  casele2tick_ = 0;
  casele3tick_ = 0;
  casege4tick_ = 0;
  casenochange_ = 0;
  stoplossstrategy_ = 0;
  retrytimes_ = 0;
  opentimeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalperSettings::~ScalperSettings() {
  SharedDtor();
}

void ScalperSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalperSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalperSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalperSettings_descriptor_;
}

const ScalperSettings& ScalperSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ScalperSettings* ScalperSettings::default_instance_ = NULL;

ScalperSettings* ScalperSettings::New() const {
  return new ScalperSettings;
}

void ScalperSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    threshold_ = 0;
    pricetick_ = 0;
    casele2tick_ = 0;
    casele3tick_ = 0;
    casege4tick_ = 0;
    casenochange_ = 0;
    stoplossstrategy_ = 0;
    retrytimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    opentimeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalperSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Threshold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_PriceTick;
        break;
      }
      
      // required double PriceTick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CaseLE2Tick;
        break;
      }
      
      // required .entity.DirectionDepends CaseLE2Tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseLE2Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casele2tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CaseLE3Tick;
        break;
      }
      
      // required .entity.DirectionDepends CaseLE3Tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseLE3Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casele3tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CaseGE4Tick;
        break;
      }
      
      // required .entity.DirectionDepends CaseGE4Tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseGE4Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casege4tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CaseNoChange;
        break;
      }
      
      // required .entity.DirectionDepends CaseNoChange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseNoChange:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casenochange(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_StopLossStrategy;
        break;
      }
      
      // required .entity.StopLossCloseMethods StopLossStrategy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopLossStrategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StopLossCloseMethods_IsValid(value)) {
            set_stoplossstrategy(static_cast< entity::StopLossCloseMethods >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RetryTimes;
        break;
      }
      
      // required int32 RetryTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RetryTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retrytimes_)));
          set_has_retrytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_OpenTimeout;
        break;
      }
      
      // optional int32 OpenTimeout = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentimeout_)));
          set_has_opentimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalperSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double Threshold = 1;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->threshold(), output);
  }
  
  // required double PriceTick = 2;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pricetick(), output);
  }
  
  // required .entity.DirectionDepends CaseLE2Tick = 3;
  if (has_casele2tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->casele2tick(), output);
  }
  
  // required .entity.DirectionDepends CaseLE3Tick = 4;
  if (has_casele3tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->casele3tick(), output);
  }
  
  // required .entity.DirectionDepends CaseGE4Tick = 5;
  if (has_casege4tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->casege4tick(), output);
  }
  
  // required .entity.DirectionDepends CaseNoChange = 6;
  if (has_casenochange()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->casenochange(), output);
  }
  
  // required .entity.StopLossCloseMethods StopLossStrategy = 7;
  if (has_stoplossstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->stoplossstrategy(), output);
  }
  
  // required int32 RetryTimes = 8;
  if (has_retrytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retrytimes(), output);
  }
  
  // optional int32 OpenTimeout = 9;
  if (has_opentimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->opentimeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalperSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double Threshold = 1;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->threshold(), target);
  }
  
  // required double PriceTick = 2;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pricetick(), target);
  }
  
  // required .entity.DirectionDepends CaseLE2Tick = 3;
  if (has_casele2tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->casele2tick(), target);
  }
  
  // required .entity.DirectionDepends CaseLE3Tick = 4;
  if (has_casele3tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->casele3tick(), target);
  }
  
  // required .entity.DirectionDepends CaseGE4Tick = 5;
  if (has_casege4tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->casege4tick(), target);
  }
  
  // required .entity.DirectionDepends CaseNoChange = 6;
  if (has_casenochange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->casenochange(), target);
  }
  
  // required .entity.StopLossCloseMethods StopLossStrategy = 7;
  if (has_stoplossstrategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->stoplossstrategy(), target);
  }
  
  // required int32 RetryTimes = 8;
  if (has_retrytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retrytimes(), target);
  }
  
  // optional int32 OpenTimeout = 9;
  if (has_opentimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->opentimeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalperSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Threshold = 1;
    if (has_threshold()) {
      total_size += 1 + 8;
    }
    
    // required double PriceTick = 2;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }
    
    // required .entity.DirectionDepends CaseLE2Tick = 3;
    if (has_casele2tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casele2tick());
    }
    
    // required .entity.DirectionDepends CaseLE3Tick = 4;
    if (has_casele3tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casele3tick());
    }
    
    // required .entity.DirectionDepends CaseGE4Tick = 5;
    if (has_casege4tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casege4tick());
    }
    
    // required .entity.DirectionDepends CaseNoChange = 6;
    if (has_casenochange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casenochange());
    }
    
    // required .entity.StopLossCloseMethods StopLossStrategy = 7;
    if (has_stoplossstrategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stoplossstrategy());
    }
    
    // required int32 RetryTimes = 8;
    if (has_retrytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retrytimes());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 OpenTimeout = 9;
    if (has_opentimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentimeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalperSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalperSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalperSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalperSettings::MergeFrom(const ScalperSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
    if (from.has_casele2tick()) {
      set_casele2tick(from.casele2tick());
    }
    if (from.has_casele3tick()) {
      set_casele3tick(from.casele3tick());
    }
    if (from.has_casege4tick()) {
      set_casege4tick(from.casege4tick());
    }
    if (from.has_casenochange()) {
      set_casenochange(from.casenochange());
    }
    if (from.has_stoplossstrategy()) {
      set_stoplossstrategy(from.stoplossstrategy());
    }
    if (from.has_retrytimes()) {
      set_retrytimes(from.retrytimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opentimeout()) {
      set_opentimeout(from.opentimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalperSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalperSettings::CopyFrom(const ScalperSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalperSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void ScalperSettings::Swap(ScalperSettings* other) {
  if (other != this) {
    std::swap(threshold_, other->threshold_);
    std::swap(pricetick_, other->pricetick_);
    std::swap(casele2tick_, other->casele2tick_);
    std::swap(casele3tick_, other->casele3tick_);
    std::swap(casege4tick_, other->casege4tick_);
    std::swap(casenochange_, other->casenochange_);
    std::swap(stoplossstrategy_, other->stoplossstrategy_);
    std::swap(retrytimes_, other->retrytimes_);
    std::swap(opentimeout_, other->opentimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalperSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalperSettings_descriptor_;
  metadata.reflection = ScalperSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyStrategyParam::kPortfIdFieldNumber;
const int ModifyStrategyParam::kStrategyNameFieldNumber;
const int ModifyStrategyParam::kStrategyDataFieldNumber;
#endif  // !_MSC_VER

ModifyStrategyParam::ModifyStrategyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyStrategyParam::InitAsDefaultInstance() {
}

ModifyStrategyParam::ModifyStrategyParam(const ModifyStrategyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyStrategyParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyStrategyParam::~ModifyStrategyParam() {
  SharedDtor();
}

void ModifyStrategyParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
    delete strategyname_;
  }
  if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
    delete strategydata_;
  }
  if (this != default_instance_) {
  }
}

void ModifyStrategyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyStrategyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyStrategyParam_descriptor_;
}

const ModifyStrategyParam& ModifyStrategyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyStrategyParam* ModifyStrategyParam::default_instance_ = NULL;

ModifyStrategyParam* ModifyStrategyParam::New() const {
  return new ModifyStrategyParam;
}

void ModifyStrategyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_strategyname()) {
      if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
        strategyname_->clear();
      }
    }
    if (has_strategydata()) {
      if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
        strategydata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyStrategyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StrategyName;
        break;
      }
      
      // required string StrategyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategyname().data(), this->strategyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StrategyData;
        break;
      }
      
      // required bytes StrategyData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyStrategyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string StrategyName = 2;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strategyname(), output);
  }
  
  // required bytes StrategyData = 3;
  if (has_strategydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strategydata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyStrategyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string StrategyName = 2;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strategyname(), target);
  }
  
  // required bytes StrategyData = 3;
  if (has_strategydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strategydata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyStrategyParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string StrategyName = 2;
    if (has_strategyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategyname());
    }
    
    // required bytes StrategyData = 3;
    if (has_strategydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategydata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyStrategyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyStrategyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyStrategyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyStrategyParam::MergeFrom(const ModifyStrategyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_strategyname()) {
      set_strategyname(from.strategyname());
    }
    if (from.has_strategydata()) {
      set_strategydata(from.strategydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyStrategyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyStrategyParam::CopyFrom(const ModifyStrategyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyStrategyParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ModifyStrategyParam::Swap(ModifyStrategyParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(strategyname_, other->strategyname_);
    std::swap(strategydata_, other->strategydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyStrategyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyStrategyParam_descriptor_;
  metadata.reflection = ModifyStrategyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioSwitchParam::kPortfIdFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoOpenFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoStopGainFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoStopLossFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoTrackingFieldNumber;
const int ModifyPortfolioSwitchParam::kEnablePreferFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioSwitchParam::ModifyPortfolioSwitchParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioSwitchParam::InitAsDefaultInstance() {
}

ModifyPortfolioSwitchParam::ModifyPortfolioSwitchParam(const ModifyPortfolioSwitchParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioSwitchParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autoopen_ = false;
  autostopgain_ = false;
  autostoploss_ = false;
  autotracking_ = false;
  enableprefer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioSwitchParam::~ModifyPortfolioSwitchParam() {
  SharedDtor();
}

void ModifyPortfolioSwitchParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioSwitchParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioSwitchParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioSwitchParam_descriptor_;
}

const ModifyPortfolioSwitchParam& ModifyPortfolioSwitchParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioSwitchParam* ModifyPortfolioSwitchParam::default_instance_ = NULL;

ModifyPortfolioSwitchParam* ModifyPortfolioSwitchParam::New() const {
  return new ModifyPortfolioSwitchParam;
}

void ModifyPortfolioSwitchParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    autoopen_ = false;
    autostopgain_ = false;
    autostoploss_ = false;
    autotracking_ = false;
    enableprefer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioSwitchParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AutoOpen;
        break;
      }
      
      // required bool AutoOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoopen_)));
          set_has_autoopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AutoStopGain;
        break;
      }
      
      // required bool AutoStopGain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostopgain_)));
          set_has_autostopgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AutoStopLoss;
        break;
      }
      
      // required bool AutoStopLoss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostoploss_)));
          set_has_autostoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AutoTracking;
        break;
      }
      
      // required bool AutoTracking = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoTracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autotracking_)));
          set_has_autotracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_EnablePrefer;
        break;
      }
      
      // required bool EnablePrefer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnablePrefer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableprefer_)));
          set_has_enableprefer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioSwitchParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required bool AutoOpen = 2;
  if (has_autoopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoopen(), output);
  }
  
  // required bool AutoStopGain = 3;
  if (has_autostopgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autostopgain(), output);
  }
  
  // required bool AutoStopLoss = 4;
  if (has_autostoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autostoploss(), output);
  }
  
  // required bool AutoTracking = 5;
  if (has_autotracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autotracking(), output);
  }
  
  // required bool EnablePrefer = 6;
  if (has_enableprefer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enableprefer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioSwitchParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required bool AutoOpen = 2;
  if (has_autoopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoopen(), target);
  }
  
  // required bool AutoStopGain = 3;
  if (has_autostopgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autostopgain(), target);
  }
  
  // required bool AutoStopLoss = 4;
  if (has_autostoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autostoploss(), target);
  }
  
  // required bool AutoTracking = 5;
  if (has_autotracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autotracking(), target);
  }
  
  // required bool EnablePrefer = 6;
  if (has_enableprefer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enableprefer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioSwitchParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required bool AutoOpen = 2;
    if (has_autoopen()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopGain = 3;
    if (has_autostopgain()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopLoss = 4;
    if (has_autostoploss()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoTracking = 5;
    if (has_autotracking()) {
      total_size += 1 + 1;
    }
    
    // required bool EnablePrefer = 6;
    if (has_enableprefer()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioSwitchParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioSwitchParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioSwitchParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioSwitchParam::MergeFrom(const ModifyPortfolioSwitchParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_autoopen()) {
      set_autoopen(from.autoopen());
    }
    if (from.has_autostopgain()) {
      set_autostopgain(from.autostopgain());
    }
    if (from.has_autostoploss()) {
      set_autostoploss(from.autostoploss());
    }
    if (from.has_autotracking()) {
      set_autotracking(from.autotracking());
    }
    if (from.has_enableprefer()) {
      set_enableprefer(from.enableprefer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioSwitchParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioSwitchParam::CopyFrom(const ModifyPortfolioSwitchParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioSwitchParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ModifyPortfolioSwitchParam::Swap(ModifyPortfolioSwitchParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(autoopen_, other->autoopen_);
    std::swap(autostopgain_, other->autostopgain_);
    std::swap(autostoploss_, other->autostoploss_);
    std::swap(autotracking_, other->autotracking_);
    std::swap(enableprefer_, other->enableprefer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioSwitchParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioSwitchParam_descriptor_;
  metadata.reflection = ModifyPortfolioSwitchParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioQtyParam::kPortfIdFieldNumber;
const int ModifyPortfolioQtyParam::kOnceQtyFieldNumber;
const int ModifyPortfolioQtyParam::kMaxQtyFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioQtyParam::ModifyPortfolioQtyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioQtyParam::InitAsDefaultInstance() {
}

ModifyPortfolioQtyParam::ModifyPortfolioQtyParam(const ModifyPortfolioQtyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioQtyParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onceqty_ = 0;
  maxqty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioQtyParam::~ModifyPortfolioQtyParam() {
  SharedDtor();
}

void ModifyPortfolioQtyParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioQtyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioQtyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioQtyParam_descriptor_;
}

const ModifyPortfolioQtyParam& ModifyPortfolioQtyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioQtyParam* ModifyPortfolioQtyParam::default_instance_ = NULL;

ModifyPortfolioQtyParam* ModifyPortfolioQtyParam::New() const {
  return new ModifyPortfolioQtyParam;
}

void ModifyPortfolioQtyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    onceqty_ = 0;
    maxqty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioQtyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OnceQty;
        break;
      }
      
      // required int32 OnceQty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnceQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onceqty_)));
          set_has_onceqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxQty;
        break;
      }
      
      // required int32 MaxQty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxqty_)));
          set_has_maxqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioQtyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required int32 OnceQty = 2;
  if (has_onceqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onceqty(), output);
  }
  
  // required int32 MaxQty = 3;
  if (has_maxqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxqty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioQtyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required int32 OnceQty = 2;
  if (has_onceqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onceqty(), target);
  }
  
  // required int32 MaxQty = 3;
  if (has_maxqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxqty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioQtyParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required int32 OnceQty = 2;
    if (has_onceqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onceqty());
    }
    
    // required int32 MaxQty = 3;
    if (has_maxqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxqty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioQtyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioQtyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioQtyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioQtyParam::MergeFrom(const ModifyPortfolioQtyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_onceqty()) {
      set_onceqty(from.onceqty());
    }
    if (from.has_maxqty()) {
      set_maxqty(from.maxqty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioQtyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioQtyParam::CopyFrom(const ModifyPortfolioQtyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioQtyParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ModifyPortfolioQtyParam::Swap(ModifyPortfolioQtyParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(onceqty_, other->onceqty_);
    std::swap(maxqty_, other->maxqty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioQtyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioQtyParam_descriptor_;
  metadata.reflection = ModifyPortfolioQtyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyRunningStatusParam::kPortfIdFieldNumber;
const int ModifyRunningStatusParam::kEnabledFieldNumber;
#endif  // !_MSC_VER

ModifyRunningStatusParam::ModifyRunningStatusParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyRunningStatusParam::InitAsDefaultInstance() {
}

ModifyRunningStatusParam::ModifyRunningStatusParam(const ModifyRunningStatusParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyRunningStatusParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyRunningStatusParam::~ModifyRunningStatusParam() {
  SharedDtor();
}

void ModifyRunningStatusParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyRunningStatusParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyRunningStatusParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyRunningStatusParam_descriptor_;
}

const ModifyRunningStatusParam& ModifyRunningStatusParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyRunningStatusParam* ModifyRunningStatusParam::default_instance_ = NULL;

ModifyRunningStatusParam* ModifyRunningStatusParam::New() const {
  return new ModifyRunningStatusParam;
}

void ModifyRunningStatusParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyRunningStatusParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Enabled;
        break;
      }
      
      // required bool Enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyRunningStatusParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required bool Enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyRunningStatusParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required bool Enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyRunningStatusParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required bool Enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyRunningStatusParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyRunningStatusParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyRunningStatusParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyRunningStatusParam::MergeFrom(const ModifyRunningStatusParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyRunningStatusParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRunningStatusParam::CopyFrom(const ModifyRunningStatusParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRunningStatusParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ModifyRunningStatusParam::Swap(ModifyRunningStatusParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyRunningStatusParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyRunningStatusParam_descriptor_;
  metadata.reflection = ModifyRunningStatusParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioPreferredLegParam::kPortfIdFieldNumber;
const int ModifyPortfolioPreferredLegParam::kLegSymbolFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioPreferredLegParam::ModifyPortfolioPreferredLegParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioPreferredLegParam::InitAsDefaultInstance() {
}

ModifyPortfolioPreferredLegParam::ModifyPortfolioPreferredLegParam(const ModifyPortfolioPreferredLegParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioPreferredLegParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioPreferredLegParam::~ModifyPortfolioPreferredLegParam() {
  SharedDtor();
}

void ModifyPortfolioPreferredLegParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (legsymbol_ != &::google::protobuf::internal::kEmptyString) {
    delete legsymbol_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioPreferredLegParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioPreferredLegParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioPreferredLegParam_descriptor_;
}

const ModifyPortfolioPreferredLegParam& ModifyPortfolioPreferredLegParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioPreferredLegParam* ModifyPortfolioPreferredLegParam::default_instance_ = NULL;

ModifyPortfolioPreferredLegParam* ModifyPortfolioPreferredLegParam::New() const {
  return new ModifyPortfolioPreferredLegParam;
}

void ModifyPortfolioPreferredLegParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_legsymbol()) {
      if (legsymbol_ != &::google::protobuf::internal::kEmptyString) {
        legsymbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioPreferredLegParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LegSymbol;
        break;
      }
      
      // required string LegSymbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legsymbol().data(), this->legsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioPreferredLegParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string LegSymbol = 2;
  if (has_legsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legsymbol().data(), this->legsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legsymbol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioPreferredLegParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string LegSymbol = 2;
  if (has_legsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legsymbol().data(), this->legsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legsymbol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioPreferredLegParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string LegSymbol = 2;
    if (has_legsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legsymbol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioPreferredLegParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioPreferredLegParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioPreferredLegParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioPreferredLegParam::MergeFrom(const ModifyPortfolioPreferredLegParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_legsymbol()) {
      set_legsymbol(from.legsymbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioPreferredLegParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioPreferredLegParam::CopyFrom(const ModifyPortfolioPreferredLegParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioPreferredLegParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ModifyPortfolioPreferredLegParam::Swap(ModifyPortfolioPreferredLegParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(legsymbol_, other->legsymbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioPreferredLegParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioPreferredLegParam_descriptor_;
  metadata.reflection = ModifyPortfolioPreferredLegParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelOrderParam::kOrderRefFieldNumber;
const int CancelOrderParam::kExchangeIdFieldNumber;
const int CancelOrderParam::kOrdSysIdFieldNumber;
const int CancelOrderParam::kUserIdFieldNumber;
const int CancelOrderParam::kSymbolFieldNumber;
#endif  // !_MSC_VER

CancelOrderParam::CancelOrderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelOrderParam::InitAsDefaultInstance() {
}

CancelOrderParam::CancelOrderParam(const CancelOrderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelOrderParam::SharedCtor() {
  _cached_size_ = 0;
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordsysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelOrderParam::~CancelOrderParam() {
  SharedDtor();
}

void CancelOrderParam::SharedDtor() {
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (ordsysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordsysid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void CancelOrderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelOrderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelOrderParam_descriptor_;
}

const CancelOrderParam& CancelOrderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

CancelOrderParam* CancelOrderParam::default_instance_ = NULL;

CancelOrderParam* CancelOrderParam::New() const {
  return new CancelOrderParam;
}

void CancelOrderParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_ordsysid()) {
      if (ordsysid_ != &::google::protobuf::internal::kEmptyString) {
        ordsysid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelOrderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string OrderRef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExchangeId;
        break;
      }
      
      // required string ExchangeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OrdSysId;
        break;
      }
      
      // required string OrdSysId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrdSysId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordsysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordsysid().data(), this->ordsysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Symbol;
        break;
      }
      
      // required string Symbol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelOrderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string OrderRef = 1;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderref(), output);
  }
  
  // required string ExchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exchangeid(), output);
  }
  
  // required string OrdSysId = 3;
  if (has_ordsysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordsysid().data(), this->ordsysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ordsysid(), output);
  }
  
  // required string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }
  
  // required string Symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->symbol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelOrderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string OrderRef = 1;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderref(), target);
  }
  
  // required string ExchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }
  
  // required string OrdSysId = 3;
  if (has_ordsysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordsysid().data(), this->ordsysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ordsysid(), target);
  }
  
  // required string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }
  
  // required string Symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->symbol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelOrderParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string OrderRef = 1;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }
    
    // required string ExchangeId = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string OrdSysId = 3;
    if (has_ordsysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordsysid());
    }
    
    // required string UserId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string Symbol = 5;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelOrderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelOrderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelOrderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelOrderParam::MergeFrom(const CancelOrderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_ordsysid()) {
      set_ordsysid(from.ordsysid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelOrderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderParam::CopyFrom(const CancelOrderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CancelOrderParam::Swap(CancelOrderParam* other) {
  if (other != this) {
    std::swap(orderref_, other->orderref_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(ordsysid_, other->ordsysid_);
    std::swap(userid_, other->userid_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelOrderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelOrderParam_descriptor_;
  metadata.reflection = CancelOrderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualCloseOrderParam::kSymbolFieldNumber;
const int ManualCloseOrderParam::kDirectionFieldNumber;
const int ManualCloseOrderParam::kOpenDateFieldNumber;
const int ManualCloseOrderParam::kQuantityFieldNumber;
#endif  // !_MSC_VER

ManualCloseOrderParam::ManualCloseOrderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManualCloseOrderParam::InitAsDefaultInstance() {
}

ManualCloseOrderParam::ManualCloseOrderParam(const ManualCloseOrderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManualCloseOrderParam::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = 48;
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualCloseOrderParam::~ManualCloseOrderParam() {
  SharedDtor();
}

void ManualCloseOrderParam::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (this != default_instance_) {
  }
}

void ManualCloseOrderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualCloseOrderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualCloseOrderParam_descriptor_;
}

const ManualCloseOrderParam& ManualCloseOrderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ManualCloseOrderParam* ManualCloseOrderParam::default_instance_ = NULL;

ManualCloseOrderParam* ManualCloseOrderParam::New() const {
  return new ManualCloseOrderParam;
}

void ManualCloseOrderParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    direction_ = 48;
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualCloseOrderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Direction;
        break;
      }
      
      // required .trade.TradeDirectionType Direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (trade::TradeDirectionType_IsValid(value)) {
            set_direction(static_cast< trade::TradeDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OpenDate;
        break;
      }
      
      // required string OpenDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManualCloseOrderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }
  
  // required .trade.TradeDirectionType Direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }
  
  // required string OpenDate = 3;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opendate(), output);
  }
  
  // required int32 Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManualCloseOrderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }
  
  // required .trade.TradeDirectionType Direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }
  
  // required string OpenDate = 3;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opendate(), target);
  }
  
  // required int32 Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManualCloseOrderParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required .trade.TradeDirectionType Direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
    // required string OpenDate = 3;
    if (has_opendate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }
    
    // required int32 Quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualCloseOrderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualCloseOrderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualCloseOrderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualCloseOrderParam::MergeFrom(const ManualCloseOrderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualCloseOrderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualCloseOrderParam::CopyFrom(const ManualCloseOrderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualCloseOrderParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ManualCloseOrderParam::Swap(ManualCloseOrderParam* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(direction_, other->direction_);
    std::swap(opendate_, other->opendate_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualCloseOrderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualCloseOrderParam_descriptor_;
  metadata.reflection = ManualCloseOrderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolInfo::kInstrumentFieldNumber;
const int SymbolInfo::kExchangeIDFieldNumber;
const int SymbolInfo::kExchangeInstIDFieldNumber;
const int SymbolInfo::kProductIDFieldNumber;
const int SymbolInfo::kVolumeMultipleFieldNumber;
const int SymbolInfo::kPriceTickFieldNumber;
#endif  // !_MSC_VER

SymbolInfo::SymbolInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolInfo::InitAsDefaultInstance() {
}

SymbolInfo::SymbolInfo(const SymbolInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolInfo::SharedCtor() {
  _cached_size_ = 0;
  instrument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volumemultiple_ = 0;
  pricetick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolInfo::~SymbolInfo() {
  SharedDtor();
}

void SymbolInfo::SharedDtor() {
  if (instrument_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (this != default_instance_) {
  }
}

void SymbolInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolInfo_descriptor_;
}

const SymbolInfo& SymbolInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SymbolInfo* SymbolInfo::default_instance_ = NULL;

SymbolInfo* SymbolInfo::New() const {
  return new SymbolInfo;
}

void SymbolInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument()) {
      if (instrument_ != &::google::protobuf::internal::kEmptyString) {
        instrument_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    volumemultiple_ = 0;
    pricetick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Instrument = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument().data(), this->instrument().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeInstID;
        break;
      }
      
      // required string ExchangeInstID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ProductID;
        break;
      }
      
      // required string ProductID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VolumeMultiple;
        break;
      }
      
      // required int32 VolumeMultiple = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumemultiple_)));
          set_has_volumemultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PriceTick;
        break;
      }
      
      // required double PriceTick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Instrument = 1;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument(), output);
  }
  
  // required string ExchangeID = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exchangeid(), output);
  }
  
  // required string ExchangeInstID = 3;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchangeinstid(), output);
  }
  
  // required string ProductID = 4;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->productid(), output);
  }
  
  // required int32 VolumeMultiple = 5;
  if (has_volumemultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volumemultiple(), output);
  }
  
  // required double PriceTick = 6;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pricetick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Instrument = 1;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument(), target);
  }
  
  // required string ExchangeID = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }
  
  // required string ExchangeInstID = 3;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeinstid(), target);
  }
  
  // required string ProductID = 4;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->productid(), target);
  }
  
  // required int32 VolumeMultiple = 5;
  if (has_volumemultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volumemultiple(), target);
  }
  
  // required double PriceTick = 6;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pricetick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Instrument = 1;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument());
    }
    
    // required string ExchangeID = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string ExchangeInstID = 3;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }
    
    // required string ProductID = 4;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }
    
    // required int32 VolumeMultiple = 5;
    if (has_volumemultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumemultiple());
    }
    
    // required double PriceTick = 6;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolInfo::MergeFrom(const SymbolInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument()) {
      set_instrument(from.instrument());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_volumemultiple()) {
      set_volumemultiple(from.volumemultiple());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolInfo::CopyFrom(const SymbolInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SymbolInfo::Swap(SymbolInfo* other) {
  if (other != this) {
    std::swap(instrument_, other->instrument_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(productid_, other->productid_);
    std::swap(volumemultiple_, other->volumemultiple_);
    std::swap(pricetick_, other->pricetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolInfo_descriptor_;
  metadata.reflection = SymbolInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity

// @@protoc_insertion_point(global_scope)
