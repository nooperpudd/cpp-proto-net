// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace entity {

namespace {

const ::google::protobuf::Descriptor* Quote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quote_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_quote_2eproto() {
  protobuf_AddDesc_quote_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quote.proto");
  GOOGLE_CHECK(file != NULL);
  Quote_descriptor_ = file->message_type(0);
  static const int Quote_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, exchange_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, exchange_symbol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, prev_settlement_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, prev_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, prev_open_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, open_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, settlement_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, upper_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, lower_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, prev_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, curr_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, update_millisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_size_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_size_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_size_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_size_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_size_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_size_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, bid_size_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, ask_size_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, average_price_),
  };
  Quote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quote_descriptor_,
      Quote::default_instance_,
      Quote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quote));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quote_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quote_descriptor_, &Quote::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quote_2eproto() {
  delete Quote::default_instance_;
  delete Quote_reflection_;
}

void protobuf_AddDesc_quote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013quote.proto\022\006entity\"\276\006\n\005Quote\022\016\n\006symbo"
    "l\030\001 \002(\t\022\023\n\013trading_day\030\002 \002(\t\022\023\n\013exchange"
    "_id\030\003 \002(\t\022\032\n\022exchange_symbol_id\030\004 \002(\t\022\014\n"
    "\004last\030\005 \002(\001\022\035\n\025prev_settlement_price\030\006 \002"
    "(\001\022\022\n\nprev_close\030\007 \002(\001\022\032\n\022prev_open_inte"
    "rest\030\010 \002(\001\022\014\n\004open\030\t \002(\001\022\014\n\004high\030\n \002(\001\022\013"
    "\n\003low\030\013 \002(\001\022\016\n\006volume\030\014 \002(\005\022\020\n\010turnover\030"
    "\r \002(\001\022\025\n\ropen_interest\030\016 \002(\001\022\r\n\005close\030\017 "
    "\002(\001\022\030\n\020settlement_price\030\020 \002(\001\022\031\n\021upper_l"
    "imit_price\030\021 \002(\001\022\031\n\021lower_limit_price\030\022 "
    "\002(\001\022\022\n\nprev_delta\030\023 \002(\001\022\022\n\ncurr_delta\030\024 "
    "\002(\001\022\023\n\013update_time\030\025 \002(\t\022\027\n\017update_milli"
    "sec\030\026 \002(\005\022\013\n\003bid\030\027 \002(\001\022\020\n\010bid_size\030\030 \002(\005"
    "\022\013\n\003ask\030\031 \002(\001\022\020\n\010ask_size\030\032 \002(\005\022\r\n\005bid_2"
    "\030\033 \002(\001\022\022\n\nbid_size_2\030\034 \002(\005\022\r\n\005ask_2\030\035 \002("
    "\001\022\022\n\nask_size_2\030\036 \002(\005\022\r\n\005bid_3\030\037 \002(\001\022\022\n\n"
    "bid_size_3\030  \002(\005\022\r\n\005ask_3\030! \002(\001\022\022\n\nask_s"
    "ize_3\030\" \002(\005\022\r\n\005bid_4\030# \002(\001\022\022\n\nbid_size_4"
    "\030$ \002(\005\022\r\n\005ask_4\030% \002(\001\022\022\n\nask_size_4\030& \002("
    "\005\022\r\n\005bid_5\030\' \002(\001\022\022\n\nbid_size_5\030( \002(\005\022\r\n\005"
    "ask_5\030) \002(\001\022\022\n\nask_size_5\030* \002(\005\022\025\n\ravera"
    "ge_price\030+ \002(\001", 854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quote.proto", &protobuf_RegisterTypes);
  Quote::default_instance_ = new Quote();
  Quote::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quote_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quote_2eproto {
  StaticDescriptorInitializer_quote_2eproto() {
    protobuf_AddDesc_quote_2eproto();
  }
} static_descriptor_initializer_quote_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Quote::kSymbolFieldNumber;
const int Quote::kTradingDayFieldNumber;
const int Quote::kExchangeIdFieldNumber;
const int Quote::kExchangeSymbolIdFieldNumber;
const int Quote::kLastFieldNumber;
const int Quote::kPrevSettlementPriceFieldNumber;
const int Quote::kPrevCloseFieldNumber;
const int Quote::kPrevOpenInterestFieldNumber;
const int Quote::kOpenFieldNumber;
const int Quote::kHighFieldNumber;
const int Quote::kLowFieldNumber;
const int Quote::kVolumeFieldNumber;
const int Quote::kTurnoverFieldNumber;
const int Quote::kOpenInterestFieldNumber;
const int Quote::kCloseFieldNumber;
const int Quote::kSettlementPriceFieldNumber;
const int Quote::kUpperLimitPriceFieldNumber;
const int Quote::kLowerLimitPriceFieldNumber;
const int Quote::kPrevDeltaFieldNumber;
const int Quote::kCurrDeltaFieldNumber;
const int Quote::kUpdateTimeFieldNumber;
const int Quote::kUpdateMillisecFieldNumber;
const int Quote::kBidFieldNumber;
const int Quote::kBidSizeFieldNumber;
const int Quote::kAskFieldNumber;
const int Quote::kAskSizeFieldNumber;
const int Quote::kBid2FieldNumber;
const int Quote::kBidSize2FieldNumber;
const int Quote::kAsk2FieldNumber;
const int Quote::kAskSize2FieldNumber;
const int Quote::kBid3FieldNumber;
const int Quote::kBidSize3FieldNumber;
const int Quote::kAsk3FieldNumber;
const int Quote::kAskSize3FieldNumber;
const int Quote::kBid4FieldNumber;
const int Quote::kBidSize4FieldNumber;
const int Quote::kAsk4FieldNumber;
const int Quote::kAskSize4FieldNumber;
const int Quote::kBid5FieldNumber;
const int Quote::kBidSize5FieldNumber;
const int Quote::kAsk5FieldNumber;
const int Quote::kAskSize5FieldNumber;
const int Quote::kAveragePriceFieldNumber;
#endif  // !_MSC_VER

Quote::Quote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quote::InitAsDefaultInstance() {
}

Quote::Quote(const Quote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quote::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_symbol_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_ = 0;
  prev_settlement_price_ = 0;
  prev_close_ = 0;
  prev_open_interest_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  volume_ = 0;
  turnover_ = 0;
  open_interest_ = 0;
  close_ = 0;
  settlement_price_ = 0;
  upper_limit_price_ = 0;
  lower_limit_price_ = 0;
  prev_delta_ = 0;
  curr_delta_ = 0;
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_millisec_ = 0;
  bid_ = 0;
  bid_size_ = 0;
  ask_ = 0;
  ask_size_ = 0;
  bid_2_ = 0;
  bid_size_2_ = 0;
  ask_2_ = 0;
  ask_size_2_ = 0;
  bid_3_ = 0;
  bid_size_3_ = 0;
  ask_3_ = 0;
  ask_size_3_ = 0;
  bid_4_ = 0;
  bid_size_4_ = 0;
  ask_4_ = 0;
  ask_size_4_ = 0;
  bid_5_ = 0;
  bid_size_5_ = 0;
  ask_5_ = 0;
  ask_size_5_ = 0;
  average_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quote::~Quote() {
  SharedDtor();
}

void Quote::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (trading_day_ != &::google::protobuf::internal::kEmptyString) {
    delete trading_day_;
  }
  if (exchange_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_id_;
  }
  if (exchange_symbol_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_symbol_id_;
  }
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    delete update_time_;
  }
  if (this != default_instance_) {
  }
}

void Quote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quote_descriptor_;
}

const Quote& Quote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quote_2eproto();
  return *default_instance_;
}

Quote* Quote::default_instance_ = NULL;

Quote* Quote::New() const {
  return new Quote;
}

void Quote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_trading_day()) {
      if (trading_day_ != &::google::protobuf::internal::kEmptyString) {
        trading_day_->clear();
      }
    }
    if (has_exchange_id()) {
      if (exchange_id_ != &::google::protobuf::internal::kEmptyString) {
        exchange_id_->clear();
      }
    }
    if (has_exchange_symbol_id()) {
      if (exchange_symbol_id_ != &::google::protobuf::internal::kEmptyString) {
        exchange_symbol_id_->clear();
      }
    }
    last_ = 0;
    prev_settlement_price_ = 0;
    prev_close_ = 0;
    prev_open_interest_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    open_ = 0;
    high_ = 0;
    low_ = 0;
    volume_ = 0;
    turnover_ = 0;
    open_interest_ = 0;
    close_ = 0;
    settlement_price_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    upper_limit_price_ = 0;
    lower_limit_price_ = 0;
    prev_delta_ = 0;
    curr_delta_ = 0;
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::kEmptyString) {
        update_time_->clear();
      }
    }
    update_millisec_ = 0;
    bid_ = 0;
    bid_size_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ask_ = 0;
    ask_size_ = 0;
    bid_2_ = 0;
    bid_size_2_ = 0;
    ask_2_ = 0;
    ask_size_2_ = 0;
    bid_3_ = 0;
    bid_size_3_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ask_3_ = 0;
    ask_size_3_ = 0;
    bid_4_ = 0;
    bid_size_4_ = 0;
    ask_4_ = 0;
    ask_size_4_ = 0;
    bid_5_ = 0;
    bid_size_5_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    ask_5_ = 0;
    ask_size_5_ = 0;
    average_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trading_day;
        break;
      }

      // required string trading_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trading_day().data(), this->trading_day().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exchange_id;
        break;
      }

      // required string exchange_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange_id().data(), this->exchange_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exchange_symbol_id;
        break;
      }

      // required string exchange_symbol_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_symbol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_symbol_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange_symbol_id().data(), this->exchange_symbol_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_last;
        break;
      }

      // required double last = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_prev_settlement_price;
        break;
      }

      // required double prev_settlement_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prev_settlement_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prev_settlement_price_)));
          set_has_prev_settlement_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_prev_close;
        break;
      }

      // required double prev_close = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prev_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prev_close_)));
          set_has_prev_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_prev_open_interest;
        break;
      }

      // required double prev_open_interest = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prev_open_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prev_open_interest_)));
          set_has_prev_open_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_open;
        break;
      }

      // required double open = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_high;
        break;
      }

      // required double high = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_low;
        break;
      }

      // required double low = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_volume;
        break;
      }

      // required int32 volume = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_turnover;
        break;
      }

      // required double turnover = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_open_interest;
        break;
      }

      // required double open_interest = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_interest_)));
          set_has_open_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_close;
        break;
      }

      // required double close = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_settlement_price;
        break;
      }

      // required double settlement_price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_settlement_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlement_price_)));
          set_has_settlement_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_upper_limit_price;
        break;
      }

      // required double upper_limit_price = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_upper_limit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_price_)));
          set_has_upper_limit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_lower_limit_price;
        break;
      }

      // required double lower_limit_price = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lower_limit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_price_)));
          set_has_lower_limit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_prev_delta;
        break;
      }

      // required double prev_delta = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prev_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prev_delta_)));
          set_has_prev_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_curr_delta;
        break;
      }

      // required double curr_delta = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_curr_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curr_delta_)));
          set_has_curr_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_update_time;
        break;
      }

      // required string update_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_time().data(), this->update_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_update_millisec;
        break;
      }

      // required int32 update_millisec = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_millisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_millisec_)));
          set_has_update_millisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_bid;
        break;
      }

      // required double bid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_bid_size;
        break;
      }

      // required int32 bid_size = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_size_)));
          set_has_bid_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_ask;
        break;
      }

      // required double ask = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ask_size;
        break;
      }

      // required int32 ask_size = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_size_)));
          set_has_ask_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_bid_2;
        break;
      }

      // required double bid_2 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_2_)));
          set_has_bid_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_bid_size_2;
        break;
      }

      // required int32 bid_size_2 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_size_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_size_2_)));
          set_has_bid_size_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_ask_2;
        break;
      }

      // required double ask_2 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_2_)));
          set_has_ask_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_ask_size_2;
        break;
      }

      // required int32 ask_size_2 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_size_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_size_2_)));
          set_has_ask_size_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_bid_3;
        break;
      }

      // required double bid_3 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_3_)));
          set_has_bid_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_bid_size_3;
        break;
      }

      // required int32 bid_size_3 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_size_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_size_3_)));
          set_has_bid_size_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_ask_3;
        break;
      }

      // required double ask_3 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_3_)));
          set_has_ask_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_ask_size_3;
        break;
      }

      // required int32 ask_size_3 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_size_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_size_3_)));
          set_has_ask_size_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_bid_4;
        break;
      }

      // required double bid_4 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_4_)));
          set_has_bid_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_bid_size_4;
        break;
      }

      // required int32 bid_size_4 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_size_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_size_4_)));
          set_has_bid_size_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_ask_4;
        break;
      }

      // required double ask_4 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_4_)));
          set_has_ask_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_ask_size_4;
        break;
      }

      // required int32 ask_size_4 = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_size_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_size_4_)));
          set_has_ask_size_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_bid_5;
        break;
      }

      // required double bid_5 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_5_)));
          set_has_bid_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_bid_size_5;
        break;
      }

      // required int32 bid_size_5 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_size_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_size_5_)));
          set_has_bid_size_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_ask_5;
        break;
      }

      // required double ask_5 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_5_)));
          set_has_ask_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_ask_size_5;
        break;
      }

      // required int32 ask_size_5 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_size_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_size_5_)));
          set_has_ask_size_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_average_price;
        break;
      }

      // required double average_price = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_average_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_price_)));
          set_has_average_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required string trading_day = 2;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_day().data(), this->trading_day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trading_day(), output);
  }

  // required string exchange_id = 3;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_id().data(), this->exchange_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchange_id(), output);
  }

  // required string exchange_symbol_id = 4;
  if (has_exchange_symbol_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_symbol_id().data(), this->exchange_symbol_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exchange_symbol_id(), output);
  }

  // required double last = 5;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->last(), output);
  }

  // required double prev_settlement_price = 6;
  if (has_prev_settlement_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->prev_settlement_price(), output);
  }

  // required double prev_close = 7;
  if (has_prev_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prev_close(), output);
  }

  // required double prev_open_interest = 8;
  if (has_prev_open_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->prev_open_interest(), output);
  }

  // required double open = 9;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->open(), output);
  }

  // required double high = 10;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->high(), output);
  }

  // required double low = 11;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->low(), output);
  }

  // required int32 volume = 12;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volume(), output);
  }

  // required double turnover = 13;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->turnover(), output);
  }

  // required double open_interest = 14;
  if (has_open_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->open_interest(), output);
  }

  // required double close = 15;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->close(), output);
  }

  // required double settlement_price = 16;
  if (has_settlement_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->settlement_price(), output);
  }

  // required double upper_limit_price = 17;
  if (has_upper_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->upper_limit_price(), output);
  }

  // required double lower_limit_price = 18;
  if (has_lower_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lower_limit_price(), output);
  }

  // required double prev_delta = 19;
  if (has_prev_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->prev_delta(), output);
  }

  // required double curr_delta = 20;
  if (has_curr_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->curr_delta(), output);
  }

  // required string update_time = 21;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->update_time(), output);
  }

  // required int32 update_millisec = 22;
  if (has_update_millisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->update_millisec(), output);
  }

  // required double bid = 23;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->bid(), output);
  }

  // required int32 bid_size = 24;
  if (has_bid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->bid_size(), output);
  }

  // required double ask = 25;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->ask(), output);
  }

  // required int32 ask_size = 26;
  if (has_ask_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ask_size(), output);
  }

  // required double bid_2 = 27;
  if (has_bid_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->bid_2(), output);
  }

  // required int32 bid_size_2 = 28;
  if (has_bid_size_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->bid_size_2(), output);
  }

  // required double ask_2 = 29;
  if (has_ask_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->ask_2(), output);
  }

  // required int32 ask_size_2 = 30;
  if (has_ask_size_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->ask_size_2(), output);
  }

  // required double bid_3 = 31;
  if (has_bid_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->bid_3(), output);
  }

  // required int32 bid_size_3 = 32;
  if (has_bid_size_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->bid_size_3(), output);
  }

  // required double ask_3 = 33;
  if (has_ask_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->ask_3(), output);
  }

  // required int32 ask_size_3 = 34;
  if (has_ask_size_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ask_size_3(), output);
  }

  // required double bid_4 = 35;
  if (has_bid_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->bid_4(), output);
  }

  // required int32 bid_size_4 = 36;
  if (has_bid_size_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->bid_size_4(), output);
  }

  // required double ask_4 = 37;
  if (has_ask_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->ask_4(), output);
  }

  // required int32 ask_size_4 = 38;
  if (has_ask_size_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->ask_size_4(), output);
  }

  // required double bid_5 = 39;
  if (has_bid_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->bid_5(), output);
  }

  // required int32 bid_size_5 = 40;
  if (has_bid_size_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->bid_size_5(), output);
  }

  // required double ask_5 = 41;
  if (has_ask_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->ask_5(), output);
  }

  // required int32 ask_size_5 = 42;
  if (has_ask_size_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->ask_size_5(), output);
  }

  // required double average_price = 43;
  if (has_average_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->average_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required string trading_day = 2;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_day().data(), this->trading_day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trading_day(), target);
  }

  // required string exchange_id = 3;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_id().data(), this->exchange_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_id(), target);
  }

  // required string exchange_symbol_id = 4;
  if (has_exchange_symbol_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_symbol_id().data(), this->exchange_symbol_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange_symbol_id(), target);
  }

  // required double last = 5;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->last(), target);
  }

  // required double prev_settlement_price = 6;
  if (has_prev_settlement_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->prev_settlement_price(), target);
  }

  // required double prev_close = 7;
  if (has_prev_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prev_close(), target);
  }

  // required double prev_open_interest = 8;
  if (has_prev_open_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->prev_open_interest(), target);
  }

  // required double open = 9;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->open(), target);
  }

  // required double high = 10;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->high(), target);
  }

  // required double low = 11;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->low(), target);
  }

  // required int32 volume = 12;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volume(), target);
  }

  // required double turnover = 13;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->turnover(), target);
  }

  // required double open_interest = 14;
  if (has_open_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->open_interest(), target);
  }

  // required double close = 15;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->close(), target);
  }

  // required double settlement_price = 16;
  if (has_settlement_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->settlement_price(), target);
  }

  // required double upper_limit_price = 17;
  if (has_upper_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->upper_limit_price(), target);
  }

  // required double lower_limit_price = 18;
  if (has_lower_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lower_limit_price(), target);
  }

  // required double prev_delta = 19;
  if (has_prev_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->prev_delta(), target);
  }

  // required double curr_delta = 20;
  if (has_curr_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->curr_delta(), target);
  }

  // required string update_time = 21;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->update_time(), target);
  }

  // required int32 update_millisec = 22;
  if (has_update_millisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->update_millisec(), target);
  }

  // required double bid = 23;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->bid(), target);
  }

  // required int32 bid_size = 24;
  if (has_bid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->bid_size(), target);
  }

  // required double ask = 25;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->ask(), target);
  }

  // required int32 ask_size = 26;
  if (has_ask_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ask_size(), target);
  }

  // required double bid_2 = 27;
  if (has_bid_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->bid_2(), target);
  }

  // required int32 bid_size_2 = 28;
  if (has_bid_size_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->bid_size_2(), target);
  }

  // required double ask_2 = 29;
  if (has_ask_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->ask_2(), target);
  }

  // required int32 ask_size_2 = 30;
  if (has_ask_size_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->ask_size_2(), target);
  }

  // required double bid_3 = 31;
  if (has_bid_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->bid_3(), target);
  }

  // required int32 bid_size_3 = 32;
  if (has_bid_size_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->bid_size_3(), target);
  }

  // required double ask_3 = 33;
  if (has_ask_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->ask_3(), target);
  }

  // required int32 ask_size_3 = 34;
  if (has_ask_size_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ask_size_3(), target);
  }

  // required double bid_4 = 35;
  if (has_bid_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->bid_4(), target);
  }

  // required int32 bid_size_4 = 36;
  if (has_bid_size_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->bid_size_4(), target);
  }

  // required double ask_4 = 37;
  if (has_ask_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->ask_4(), target);
  }

  // required int32 ask_size_4 = 38;
  if (has_ask_size_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->ask_size_4(), target);
  }

  // required double bid_5 = 39;
  if (has_bid_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->bid_5(), target);
  }

  // required int32 bid_size_5 = 40;
  if (has_bid_size_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->bid_size_5(), target);
  }

  // required double ask_5 = 41;
  if (has_ask_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->ask_5(), target);
  }

  // required int32 ask_size_5 = 42;
  if (has_ask_size_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->ask_size_5(), target);
  }

  // required double average_price = 43;
  if (has_average_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->average_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required string trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_day());
    }

    // required string exchange_id = 3;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // required string exchange_symbol_id = 4;
    if (has_exchange_symbol_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_symbol_id());
    }

    // required double last = 5;
    if (has_last()) {
      total_size += 1 + 8;
    }

    // required double prev_settlement_price = 6;
    if (has_prev_settlement_price()) {
      total_size += 1 + 8;
    }

    // required double prev_close = 7;
    if (has_prev_close()) {
      total_size += 1 + 8;
    }

    // required double prev_open_interest = 8;
    if (has_prev_open_interest()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double open = 9;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 10;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 11;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required int32 volume = 12;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // required double turnover = 13;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // required double open_interest = 14;
    if (has_open_interest()) {
      total_size += 1 + 8;
    }

    // required double close = 15;
    if (has_close()) {
      total_size += 1 + 8;
    }

    // required double settlement_price = 16;
    if (has_settlement_price()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double upper_limit_price = 17;
    if (has_upper_limit_price()) {
      total_size += 2 + 8;
    }

    // required double lower_limit_price = 18;
    if (has_lower_limit_price()) {
      total_size += 2 + 8;
    }

    // required double prev_delta = 19;
    if (has_prev_delta()) {
      total_size += 2 + 8;
    }

    // required double curr_delta = 20;
    if (has_curr_delta()) {
      total_size += 2 + 8;
    }

    // required string update_time = 21;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_time());
    }

    // required int32 update_millisec = 22;
    if (has_update_millisec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_millisec());
    }

    // required double bid = 23;
    if (has_bid()) {
      total_size += 2 + 8;
    }

    // required int32 bid_size = 24;
    if (has_bid_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_size());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double ask = 25;
    if (has_ask()) {
      total_size += 2 + 8;
    }

    // required int32 ask_size = 26;
    if (has_ask_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_size());
    }

    // required double bid_2 = 27;
    if (has_bid_2()) {
      total_size += 2 + 8;
    }

    // required int32 bid_size_2 = 28;
    if (has_bid_size_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_size_2());
    }

    // required double ask_2 = 29;
    if (has_ask_2()) {
      total_size += 2 + 8;
    }

    // required int32 ask_size_2 = 30;
    if (has_ask_size_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_size_2());
    }

    // required double bid_3 = 31;
    if (has_bid_3()) {
      total_size += 2 + 8;
    }

    // required int32 bid_size_3 = 32;
    if (has_bid_size_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_size_3());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double ask_3 = 33;
    if (has_ask_3()) {
      total_size += 2 + 8;
    }

    // required int32 ask_size_3 = 34;
    if (has_ask_size_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_size_3());
    }

    // required double bid_4 = 35;
    if (has_bid_4()) {
      total_size += 2 + 8;
    }

    // required int32 bid_size_4 = 36;
    if (has_bid_size_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_size_4());
    }

    // required double ask_4 = 37;
    if (has_ask_4()) {
      total_size += 2 + 8;
    }

    // required int32 ask_size_4 = 38;
    if (has_ask_size_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_size_4());
    }

    // required double bid_5 = 39;
    if (has_bid_5()) {
      total_size += 2 + 8;
    }

    // required int32 bid_size_5 = 40;
    if (has_bid_size_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_size_5());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required double ask_5 = 41;
    if (has_ask_5()) {
      total_size += 2 + 8;
    }

    // required int32 ask_size_5 = 42;
    if (has_ask_size_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_size_5());
    }

    // required double average_price = 43;
    if (has_average_price()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quote::MergeFrom(const Quote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
    if (from.has_exchange_symbol_id()) {
      set_exchange_symbol_id(from.exchange_symbol_id());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_prev_settlement_price()) {
      set_prev_settlement_price(from.prev_settlement_price());
    }
    if (from.has_prev_close()) {
      set_prev_close(from.prev_close());
    }
    if (from.has_prev_open_interest()) {
      set_prev_open_interest(from.prev_open_interest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_open_interest()) {
      set_open_interest(from.open_interest());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_settlement_price()) {
      set_settlement_price(from.settlement_price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upper_limit_price()) {
      set_upper_limit_price(from.upper_limit_price());
    }
    if (from.has_lower_limit_price()) {
      set_lower_limit_price(from.lower_limit_price());
    }
    if (from.has_prev_delta()) {
      set_prev_delta(from.prev_delta());
    }
    if (from.has_curr_delta()) {
      set_curr_delta(from.curr_delta());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_update_millisec()) {
      set_update_millisec(from.update_millisec());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_bid_size()) {
      set_bid_size(from.bid_size());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_ask_size()) {
      set_ask_size(from.ask_size());
    }
    if (from.has_bid_2()) {
      set_bid_2(from.bid_2());
    }
    if (from.has_bid_size_2()) {
      set_bid_size_2(from.bid_size_2());
    }
    if (from.has_ask_2()) {
      set_ask_2(from.ask_2());
    }
    if (from.has_ask_size_2()) {
      set_ask_size_2(from.ask_size_2());
    }
    if (from.has_bid_3()) {
      set_bid_3(from.bid_3());
    }
    if (from.has_bid_size_3()) {
      set_bid_size_3(from.bid_size_3());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ask_3()) {
      set_ask_3(from.ask_3());
    }
    if (from.has_ask_size_3()) {
      set_ask_size_3(from.ask_size_3());
    }
    if (from.has_bid_4()) {
      set_bid_4(from.bid_4());
    }
    if (from.has_bid_size_4()) {
      set_bid_size_4(from.bid_size_4());
    }
    if (from.has_ask_4()) {
      set_ask_4(from.ask_4());
    }
    if (from.has_ask_size_4()) {
      set_ask_size_4(from.ask_size_4());
    }
    if (from.has_bid_5()) {
      set_bid_5(from.bid_5());
    }
    if (from.has_bid_size_5()) {
      set_bid_size_5(from.bid_size_5());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ask_5()) {
      set_ask_5(from.ask_5());
    }
    if (from.has_ask_size_5()) {
      set_ask_size_5(from.ask_size_5());
    }
    if (from.has_average_price()) {
      set_average_price(from.average_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quote::CopyFrom(const Quote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quote::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void Quote::Swap(Quote* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(trading_day_, other->trading_day_);
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(exchange_symbol_id_, other->exchange_symbol_id_);
    std::swap(last_, other->last_);
    std::swap(prev_settlement_price_, other->prev_settlement_price_);
    std::swap(prev_close_, other->prev_close_);
    std::swap(prev_open_interest_, other->prev_open_interest_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(open_interest_, other->open_interest_);
    std::swap(close_, other->close_);
    std::swap(settlement_price_, other->settlement_price_);
    std::swap(upper_limit_price_, other->upper_limit_price_);
    std::swap(lower_limit_price_, other->lower_limit_price_);
    std::swap(prev_delta_, other->prev_delta_);
    std::swap(curr_delta_, other->curr_delta_);
    std::swap(update_time_, other->update_time_);
    std::swap(update_millisec_, other->update_millisec_);
    std::swap(bid_, other->bid_);
    std::swap(bid_size_, other->bid_size_);
    std::swap(ask_, other->ask_);
    std::swap(ask_size_, other->ask_size_);
    std::swap(bid_2_, other->bid_2_);
    std::swap(bid_size_2_, other->bid_size_2_);
    std::swap(ask_2_, other->ask_2_);
    std::swap(ask_size_2_, other->ask_size_2_);
    std::swap(bid_3_, other->bid_3_);
    std::swap(bid_size_3_, other->bid_size_3_);
    std::swap(ask_3_, other->ask_3_);
    std::swap(ask_size_3_, other->ask_size_3_);
    std::swap(bid_4_, other->bid_4_);
    std::swap(bid_size_4_, other->bid_size_4_);
    std::swap(ask_4_, other->ask_4_);
    std::swap(ask_size_4_, other->ask_size_4_);
    std::swap(bid_5_, other->bid_5_);
    std::swap(bid_size_5_, other->bid_size_5_);
    std::swap(ask_5_, other->ask_5_);
    std::swap(ask_size_5_, other->ask_size_5_);
    std::swap(average_price_, other->average_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quote_descriptor_;
  metadata.reflection = Quote_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity

// @@protoc_insertion_point(global_scope)
