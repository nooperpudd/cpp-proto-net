// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trade {

namespace {

const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trade_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputOrderAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputOrderAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLegOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLegOrder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PosiDirectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HedgeFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderPriceTypeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradeDirectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VolumeConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContingentConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ForceCloseReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderSubmitStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderSourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderTypeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingRoleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OffsetFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradeTypeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceSourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubmitReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MlOrderOffset_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trade_2eproto() {
  protobuf_AddDesc_trade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trade.proto");
  GOOGLE_CHECK(file != NULL);
  AccountInfo_descriptor_ = file->message_type(0);
  static const int AccountInfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, premortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, precredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, predeposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, interestbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, currmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, withdrawquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, deliverymargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, exchangedeliverymargin_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  PositionInfo_descriptor_ = file->message_type(1);
  static const int PositionInfo_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, posidirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, positiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, ydposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, longfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, shortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, longfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, shortfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, openvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, openamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, positioncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, usemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, opencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, combposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, comblongfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, combshortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, closeprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, todayposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, marginratebymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, marginratebyvolume_),
  };
  PositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInfo_descriptor_,
      PositionInfo::default_instance_,
      PositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInfo));
  PositionDetailInfo_descriptor_ = file->message_type(2);
  static const int PositionDetailInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, combinstrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, closeprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, closeprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, positionprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, positionprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, exchmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, marginratebymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, marginratebyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, lastsettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, closeamount_),
  };
  PositionDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionDetailInfo_descriptor_,
      PositionDetailInfo::default_instance_,
      PositionDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionDetailInfo));
  InputOrder_descriptor_ = file->message_type(3);
  static const int InputOrder_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, orderpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, comboffsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, combhedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, volumetotaloriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, timecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, gtddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, volumecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, minvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, contingentcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, stopprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, forceclosereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, isautosuspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, userforceclose_),
  };
  InputOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputOrder_descriptor_,
      InputOrder::default_instance_,
      InputOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputOrder));
  Order_descriptor_ = file->message_type(4);
  static const int Order_offsets_[56] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, orderpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, comboffsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, combhedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, volumetotaloriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, timecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, gtddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, volumecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, minvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, contingentcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, stopprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, forceclosereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, isautosuspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, installid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, ordersubmitstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, notifysequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, ordersource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, volumetraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, volumetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, insertdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, inserttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, suspendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, canceltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, activetraderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, clearingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, userproductinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, userforceclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, activeuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, brokerorderseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, relativeordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, preferred_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  Trade_descriptor_ = file->message_type(5);
  static const int Trade_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, tradingrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, offsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, tradedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, pricesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, clearingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, brokerorderseq_),
  };
  Trade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trade_descriptor_,
      Trade::default_instance_,
      Trade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trade));
  InputOrderAction_descriptor_ = file->message_type(6);
  static const int InputOrderAction_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, orderactionref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, actionflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, volumechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, instrumentid_),
  };
  InputOrderAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputOrderAction_descriptor_,
      InputOrderAction::default_instance_,
      InputOrderAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOrderAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputOrderAction));
  MultiLegOrder_descriptor_ = file->message_type(7);
  static const int MultiLegOrder_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, portfolioid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, legs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, openorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, haswarn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, offset_),
  };
  MultiLegOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiLegOrder_descriptor_,
      MultiLegOrder::default_instance_,
      MultiLegOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLegOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiLegOrder));
  PosiDirectionType_descriptor_ = file->enum_type(0);
  HedgeFlagType_descriptor_ = file->enum_type(1);
  OrderPriceTypeType_descriptor_ = file->enum_type(2);
  TradeDirectionType_descriptor_ = file->enum_type(3);
  TimeConditionType_descriptor_ = file->enum_type(4);
  VolumeConditionType_descriptor_ = file->enum_type(5);
  ContingentConditionType_descriptor_ = file->enum_type(6);
  ForceCloseReasonType_descriptor_ = file->enum_type(7);
  OrderSubmitStatusType_descriptor_ = file->enum_type(8);
  OrderSourceType_descriptor_ = file->enum_type(9);
  OrderStatusType_descriptor_ = file->enum_type(10);
  OrderTypeType_descriptor_ = file->enum_type(11);
  TradingRoleType_descriptor_ = file->enum_type(12);
  OffsetFlagType_descriptor_ = file->enum_type(13);
  TradeTypeType_descriptor_ = file->enum_type(14);
  PriceSourceType_descriptor_ = file->enum_type(15);
  ActionFlagType_descriptor_ = file->enum_type(16);
  SubmitReason_descriptor_ = file->enum_type(17);
  MlOrderOffset_descriptor_ = file->enum_type(18);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInfo_descriptor_, &PositionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionDetailInfo_descriptor_, &PositionDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputOrder_descriptor_, &InputOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trade_descriptor_, &Trade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputOrderAction_descriptor_, &InputOrderAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiLegOrder_descriptor_, &MultiLegOrder::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trade_2eproto() {
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete PositionInfo::default_instance_;
  delete PositionInfo_reflection_;
  delete PositionDetailInfo::default_instance_;
  delete PositionDetailInfo_reflection_;
  delete InputOrder::default_instance_;
  delete InputOrder_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete Trade::default_instance_;
  delete Trade_reflection_;
  delete InputOrderAction::default_instance_;
  delete InputOrderAction_reflection_;
  delete MultiLegOrder::default_instance_;
  delete MultiLegOrder_reflection_;
}

void protobuf_AddDesc_trade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013trade.proto\022\005trade\"\361\004\n\013AccountInfo\022\020\n\010"
    "BrokerID\030\001 \002(\t\022\021\n\tAccountID\030\002 \002(\t\022\023\n\013Pre"
    "Mortgage\030\003 \002(\001\022\021\n\tPreCredit\030\004 \002(\001\022\022\n\nPre"
    "Deposit\030\005 \002(\001\022\022\n\nPreBalance\030\006 \002(\001\022\021\n\tPre"
    "Margin\030\007 \002(\001\022\024\n\014InterestBase\030\010 \002(\001\022\020\n\010In"
    "terest\030\t \002(\001\022\017\n\007Deposit\030\n \002(\001\022\020\n\010Withdra"
    "w\030\013 \002(\001\022\024\n\014FrozenMargin\030\014 \002(\001\022\022\n\nFrozenC"
    "ash\030\r \002(\001\022\030\n\020FrozenCommission\030\016 \002(\001\022\022\n\nC"
    "urrMargin\030\017 \002(\001\022\016\n\006CashIn\030\020 \002(\001\022\022\n\nCommi"
    "ssion\030\021 \002(\001\022\023\n\013CloseProfit\030\022 \002(\001\022\026\n\016Posi"
    "tionProfit\030\023 \002(\001\022\017\n\007Balance\030\024 \002(\001\022\021\n\tAva"
    "ilable\030\025 \002(\001\022\025\n\rWithdrawQuota\030\026 \002(\001\022\017\n\007R"
    "eserve\030\027 \002(\001\022\022\n\nTradingDay\030\030 \002(\t\022\024\n\014Sett"
    "lementID\030\031 \002(\005\022\016\n\006Credit\030\032 \002(\001\022\020\n\010Mortga"
    "ge\030\033 \002(\001\022\026\n\016ExchangeMargin\030\034 \002(\001\022\026\n\016Deli"
    "veryMargin\030\035 \002(\001\022\036\n\026ExchangeDeliveryMarg"
    "in\030\036 \002(\001\"\266\007\n\014PositionInfo\022\024\n\014InstrumentI"
    "D\030\001 \002(\t\022\020\n\010BrokerID\030\002 \002(\t\022\022\n\nInvestorID\030"
    "\003 \002(\t\022/\n\rPosiDirection\030\004 \002(\0162\030.trade.Pos"
    "iDirectionType\022\'\n\tHedgeFlag\030\005 \002(\0162\024.trad"
    "e.HedgeFlagType\022\024\n\014PositionDate\030\006 \002(\t\022\022\n"
    "\nYdPosition\030\007 \002(\005\022\020\n\010Position\030\010 \002(\005\022\022\n\nL"
    "ongFrozen\030\t \002(\005\022\023\n\013ShortFrozen\030\n \002(\005\022\030\n\020"
    "LongFrozenAmount\030\013 \002(\001\022\031\n\021ShortFrozenAmo"
    "unt\030\014 \002(\001\022\022\n\nOpenVolume\030\r \002(\005\022\023\n\013CloseVo"
    "lume\030\016 \002(\005\022\022\n\nOpenAmount\030\017 \002(\001\022\023\n\013CloseA"
    "mount\030\020 \002(\001\022\024\n\014PositionCost\030\021 \002(\001\022\021\n\tPre"
    "Margin\030\022 \002(\001\022\021\n\tUseMargin\030\023 \002(\001\022\024\n\014Froze"
    "nMargin\030\024 \002(\001\022\022\n\nFrozenCash\030\025 \002(\001\022\030\n\020Fro"
    "zenCommission\030\026 \002(\001\022\016\n\006CashIn\030\027 \002(\001\022\022\n\nC"
    "ommission\030\030 \002(\001\022\023\n\013CloseProfit\030\031 \002(\001\022\026\n\016"
    "PositionProfit\030\032 \002(\001\022\032\n\022PreSettlementPri"
    "ce\030\033 \002(\001\022\027\n\017SettlementPrice\030\034 \002(\001\022\022\n\nTra"
    "dingDay\030\035 \002(\t\022\024\n\014SettlementID\030\036 \002(\005\022\020\n\010O"
    "penCost\030\037 \002(\001\022\026\n\016ExchangeMargin\030  \002(\001\022\024\n"
    "\014CombPosition\030! \002(\005\022\026\n\016CombLongFrozen\030\" "
    "\002(\005\022\027\n\017CombShortFrozen\030# \002(\005\022\031\n\021ClosePro"
    "fitByDate\030$ \002(\001\022\032\n\022CloseProfitByTrade\030% "
    "\002(\001\022\025\n\rTodayPosition\030& \002(\005\022\031\n\021MarginRate"
    "ByMoney\030\' \002(\001\022\032\n\022MarginRateByVolume\030( \002("
    "\001\"\235\005\n\022PositionDetailInfo\022\024\n\014InstrumentID"
    "\030\001 \002(\t\022\020\n\010BrokerID\030\002 \002(\t\022\022\n\nInvestorID\030\003"
    " \002(\t\022\'\n\tHedgeFlag\030\004 \002(\0162\024.trade.HedgeFla"
    "gType\022,\n\tDirection\030\005 \002(\0162\031.trade.TradeDi"
    "rectionType\022\020\n\010OpenDate\030\006 \002(\t\022\017\n\007TradeID"
    "\030\007 \002(\t\022\016\n\006Volume\030\010 \002(\005\022\021\n\tOpenPrice\030\t \002("
    "\001\022\022\n\nTradingDay\030\n \002(\t\022\024\n\014SettlementID\030\013 "
    "\002(\005\022\'\n\tTradeType\030\014 \002(\0162\024.trade.TradeType"
    "Type\022\030\n\020CombInstrumentID\030\r \002(\t\022\022\n\nExchan"
    "geID\030\016 \002(\t\022\031\n\021CloseProfitByDate\030\017 \002(\001\022\032\n"
    "\022CloseProfitByTrade\030\020 \002(\001\022\034\n\024PositionPro"
    "fitByDate\030\021 \002(\001\022\035\n\025PositionProfitByTrade"
    "\030\022 \002(\001\022\016\n\006Margin\030\023 \002(\001\022\022\n\nExchMargin\030\024 \002"
    "(\001\022\031\n\021MarginRateByMoney\030\025 \002(\001\022\032\n\022MarginR"
    "ateByVolume\030\026 \002(\001\022\033\n\023LastSettlementPrice"
    "\030\027 \002(\001\022\027\n\017SettlementPrice\030\030 \002(\001\022\023\n\013Close"
    "Volume\030\031 \002(\005\022\023\n\013CloseAmount\030\032 \002(\001\"\224\005\n\nIn"
    "putOrder\022\020\n\010BrokerID\030\001 \002(\t\022\022\n\nInvestorID"
    "\030\002 \002(\t\022\024\n\014InstrumentID\030\003 \002(\t\022\020\n\010OrderRef"
    "\030\004 \002(\t\022\016\n\006UserID\030\005 \002(\t\0221\n\016OrderPriceType"
    "\030\006 \002(\0162\031.trade.OrderPriceTypeType\022,\n\tDir"
    "ection\030\007 \002(\0162\031.trade.TradeDirectionType\022"
    "\026\n\016CombOffsetFlag\030\010 \002(\t\022\025\n\rCombHedgeFlag"
    "\030\t \002(\t\022\022\n\nLimitPrice\030\n \002(\001\022\033\n\023VolumeTota"
    "lOriginal\030\013 \002(\005\022/\n\rTimeCondition\030\014 \002(\0162\030"
    ".trade.TimeConditionType\022\017\n\007GTDDate\030\r \002("
    "\t\0223\n\017VolumeCondition\030\016 \002(\0162\032.trade.Volum"
    "eConditionType\022\021\n\tMinVolume\030\017 \002(\005\022;\n\023Con"
    "tingentCondition\030\020 \002(\0162\036.trade.Contingen"
    "tConditionType\022\021\n\tStopPrice\030\021 \002(\001\0225\n\020For"
    "ceCloseReason\030\022 \002(\0162\033.trade.ForceCloseRe"
    "asonType\022\025\n\rIsAutoSuspend\030\023 \002(\010\022\024\n\014Busin"
    "essUnit\030\024 \002(\t\022\021\n\tRequestID\030\025 \002(\005\022\026\n\016User"
    "ForceClose\030\026 \002(\010\"\306\013\n\005Order\022\020\n\010BrokerID\030\001"
    " \002(\t\022\022\n\nInvestorID\030\002 \002(\t\022\024\n\014InstrumentID"
    "\030\003 \002(\t\022\020\n\010OrderRef\030\004 \002(\t\022\016\n\006UserID\030\005 \001(\t"
    "\0221\n\016OrderPriceType\030\006 \002(\0162\031.trade.OrderPr"
    "iceTypeType\022,\n\tDirection\030\007 \002(\0162\031.trade.T"
    "radeDirectionType\022\026\n\016CombOffsetFlag\030\010 \002("
    "\t\022\025\n\rCombHedgeFlag\030\t \002(\t\022\022\n\nLimitPrice\030\n"
    " \002(\001\022\033\n\023VolumeTotalOriginal\030\013 \002(\005\022/\n\rTim"
    "eCondition\030\014 \002(\0162\030.trade.TimeConditionTy"
    "pe\022\017\n\007GTDDate\030\r \001(\t\0223\n\017VolumeCondition\030\016"
    " \002(\0162\032.trade.VolumeConditionType\022\021\n\tMinV"
    "olume\030\017 \002(\005\022;\n\023ContingentCondition\030\020 \002(\016"
    "2\036.trade.ContingentConditionType\022\021\n\tStop"
    "Price\030\021 \001(\001\0225\n\020ForceCloseReason\030\022 \002(\0162\033."
    "trade.ForceCloseReasonType\022\025\n\rIsAutoSusp"
    "end\030\023 \002(\010\022\024\n\014BusinessUnit\030\024 \001(\t\022\021\n\tReque"
    "stID\030\025 \001(\005\022\024\n\014OrderLocalID\030\026 \001(\t\022\022\n\nExch"
    "angeID\030\027 \001(\t\022\025\n\rParticipantID\030\030 \001(\t\022\020\n\010C"
    "lientID\030\031 \001(\t\022\026\n\016ExchangeInstID\030\032 \001(\t\022\020\n"
    "\010TraderID\030\033 \001(\t\022\021\n\tInstallID\030\034 \001(\005\0227\n\021Or"
    "derSubmitStatus\030\035 \002(\0162\034.trade.OrderSubmi"
    "tStatusType\022\026\n\016NotifySequence\030\036 \001(\005\022\022\n\nT"
    "radingDay\030\037 \001(\t\022\024\n\014SettlementID\030  \001(\005\022\022\n"
    "\nOrderSysID\030! \001(\t\022+\n\013OrderSource\030\" \001(\0162\026"
    ".trade.OrderSourceType\022+\n\013OrderStatus\030# "
    "\002(\0162\026.trade.OrderStatusType\022\'\n\tOrderType"
    "\030$ \001(\0162\024.trade.OrderTypeType\022\024\n\014VolumeTr"
    "aded\030% \001(\005\022\023\n\013VolumeTotal\030& \001(\005\022\022\n\nInser"
    "tDate\030\' \001(\t\022\022\n\nInsertTime\030( \001(\t\022\022\n\nActiv"
    "eTime\030) \001(\t\022\023\n\013SuspendTime\030* \001(\t\022\022\n\nUpda"
    "teTime\030+ \001(\t\022\022\n\nCancelTime\030, \001(\t\022\026\n\016Acti"
    "veTraderID\030- \001(\t\022\026\n\016ClearingPartID\030. \001(\t"
    "\022\022\n\nSequenceNo\030/ \001(\005\022\017\n\007FrontID\0300 \001(\005\022\021\n"
    "\tSessionID\0301 \001(\005\022\027\n\017UserProductInfo\0302 \001("
    "\t\022\021\n\tStatusMsg\0303 \001(\t\022\026\n\016UserForceClose\0304"
    " \001(\010\022\024\n\014ActiveUserID\0305 \001(\t\022\026\n\016BrokerOrde"
    "rSeq\0306 \001(\005\022\032\n\022RelativeOrderSysID\0307 \001(\t\022\021"
    "\n\tPreferred\0308 \001(\010\"\325\005\n\005Trade\022\020\n\010BrokerID\030"
    "\001 \002(\t\022\022\n\nInvestorID\030\002 \002(\t\022\024\n\014InstrumentI"
    "D\030\003 \002(\t\022\020\n\010OrderRef\030\004 \002(\t\022\016\n\006UserID\030\005 \002("
    "\t\022\022\n\nExchangeID\030\006 \002(\t\022\017\n\007TradeID\030\007 \002(\t\022,"
    "\n\tDirection\030\010 \002(\0162\031.trade.TradeDirection"
    "Type\022\022\n\nOrderSysID\030\t \002(\t\022\025\n\rParticipantI"
    "D\030\n \002(\t\022\020\n\010ClientID\030\013 \002(\t\022+\n\013TradingRole"
    "\030\014 \002(\0162\026.trade.TradingRoleType\022\026\n\016Exchan"
    "geInstID\030\r \002(\t\022)\n\nOffsetFlag\030\016 \002(\0162\025.tra"
    "de.OffsetFlagType\022\'\n\tHedgeFlag\030\017 \002(\0162\024.t"
    "rade.HedgeFlagType\022\r\n\005Price\030\020 \002(\001\022\016\n\006Vol"
    "ume\030\021 \002(\005\022\021\n\tTradeDate\030\022 \002(\t\022\021\n\tTradeTim"
    "e\030\023 \002(\t\022\'\n\tTradeType\030\024 \002(\0162\024.trade.Trade"
    "TypeType\022+\n\013PriceSource\030\025 \002(\0162\026.trade.Pr"
    "iceSourceType\022\020\n\010TraderID\030\026 \002(\t\022\024\n\014Order"
    "LocalID\030\027 \002(\t\022\026\n\016ClearingPartID\030\030 \002(\t\022\024\n"
    "\014BusinessUnit\030\031 \002(\t\022\022\n\nSequenceNo\030\032 \002(\005\022"
    "\022\n\nTradingDay\030\033 \002(\t\022\024\n\014SettlementID\030\034 \002("
    "\005\022\026\n\016BrokerOrderSeq\030\035 \002(\005\"\274\002\n\020InputOrder"
    "Action\022\020\n\010BrokerID\030\001 \002(\t\022\022\n\nInvestorID\030\002"
    " \002(\t\022\026\n\016OrderActionRef\030\003 \002(\005\022\020\n\010OrderRef"
    "\030\004 \002(\t\022\021\n\tRequestID\030\005 \002(\005\022\017\n\007FrontID\030\006 \002"
    "(\005\022\021\n\tSessionID\030\007 \002(\005\022\022\n\nExchangeID\030\010 \002("
    "\t\022\022\n\nOrderSysID\030\t \002(\t\022)\n\nActionFlag\030\n \002("
    "\0162\025.trade.ActionFlagType\022\022\n\nLimitPrice\030\013"
    " \002(\001\022\024\n\014VolumeChange\030\014 \002(\005\022\016\n\006UserID\030\r \002"
    "(\t\022\024\n\014InstrumentID\030\016 \002(\t\"\371\001\n\rMultiLegOrd"
    "er\022\017\n\007OrderId\030\001 \002(\t\022\023\n\013PortfolioId\030\002 \002(\t"
    "\022\020\n\010Quantity\030\003 \002(\005\022\032\n\004Legs\030\004 \003(\0132\014.trade"
    ".Order\022\023\n\013OpenOrderId\030\005 \002(\t\022\020\n\010OpenDate\030"
    "\006 \002(\t\022#\n\006Reason\030\007 \002(\0162\023.trade.SubmitReas"
    "on\022\017\n\007HasWarn\030\010 \002(\010\022\021\n\tStatusMsg\030\t \002(\t\022$"
    "\n\006Offset\030\n \002(\0162\024.trade.MlOrderOffset*1\n\021"
    "PosiDirectionType\022\007\n\003NET\0201\022\010\n\004LONG\0202\022\t\n\005"
    "SHORT\0203*:\n\rHedgeFlagType\022\017\n\013SPECULATION\020"
    "1\022\r\n\tARBITRAGE\0202\022\t\n\005HEDGE\0203*\221\003\n\022OrderPri"
    "ceTypeType\022\r\n\tANY_PRICE\0201\022\017\n\013LIMIT_PRICE"
    "\0202\022\016\n\nBEST_PRICE\0203\022\016\n\nLAST_PRICE\0204\022\035\n\031LA"
    "ST_PRICE_PLUS_ONE_TICKS\0205\022\035\n\031LAST_PRICE_"
    "PLUS_TWO_TICKS\0206\022\037\n\033LAST_PRICE_PLUS_THRE"
    "E_TICKS\0207\022\016\n\nASK_PRICE1\0208\022\035\n\031ASK_PRICE1_"
    "PLUS_ONE_TICKS\0209\022\035\n\031ASK_PRICE1_PLUS_TWO_"
    "TICKS\020A\022\037\n\033ASK_PRICE1_PLUS_THREE_TICKS\020B"
    "\022\016\n\nBID_PRICE1\020C\022\035\n\031BID_PRICE1_PLUS_ONE_"
    "TICKS\020D\022\035\n\031BID_PRICE1_PLUS_TWO_TICKS\020E\022\037"
    "\n\033BID_PRICE1_PLUS_THREE_TICKS\020F*\'\n\022Trade"
    "DirectionType\022\007\n\003BUY\0200\022\010\n\004SELL\0201*[\n\021Time"
    "ConditionType\022\n\n\006TC_IOC\0201\022\n\n\006TC_GFS\0202\022\n\n"
    "\006TC_GFD\0203\022\n\n\006TC_GTD\0204\022\n\n\006TC_GTC\0205\022\n\n\006TC_"
    "GFA\0206*6\n\023VolumeConditionType\022\t\n\005VC_AV\0201\022"
    "\t\n\005VC_MV\0202\022\t\n\005VC_CV\0203*\261\004\n\027ContingentCond"
    "itionType\022\017\n\013IMMEDIATELY\0201\022\t\n\005TOUCH\0202\022\020\n"
    "\014TOUCH_PROFIT\0203\022\020\n\014PARKED_ORDER\0204\022&\n\"LAS"
    "T_PRICE_GREATER_THAN_STOP_PRICE\0205\022\'\n#LAS"
    "T_PRICE_GREATER_EQUAL_STOP_PRICE\0206\022%\n!LA"
    "ST_PRICE_LESSER_THAN_STOP_PRICE\0207\022&\n\"LAS"
    "T_PRICE_LESSER_EQUAL_STOP_PRICE\0208\022%\n!ASK"
    "_PRICE_GREATER_THAN_STOP_PRICE\0209\022&\n\"ASK_"
    "PRICE_GREATER_EQUAL_STOP_PRICE\020A\022$\n ASK_"
    "PRICE_LESSER_THAN_STOP_PRICE\020B\022%\n!ASK_PR"
    "ICE_LESSER_EQUAL_STOP_PRICE\020C\022%\n!BID_PRI"
    "CE_GREATER_THAN_STOP_PRICE\020D\022&\n\"BID_PRIC"
    "E_GREATER_EQUAL_STOP_PRICE\020E\022$\n BID_PRIC"
    "E_LESSER_THAN_STOP_PRICE\020F\022%\n!BID_PRICE_"
    "LESSER_EQUAL_STOP_PRICE\020G*\277\001\n\024ForceClose"
    "ReasonType\022\023\n\017NOT_FORCE_CLOSE\0200\022\020\n\014LACK_"
    "DEPOSIT\0201\022\036\n\032CLIENT_OVER_POSITION_LIMIT\020"
    "2\022\036\n\032MEMBER_OVER_POSITION_LIMIT\0203\022\020\n\014NOT"
    "_MULTIPLE\0204\022\r\n\tVIOLATION\0205\022\r\n\tFCC_OTHER\020"
    "6\022\020\n\014PERSON_DELIV\0207*\271\001\n\025OrderSubmitStatu"
    "sType\022\021\n\rNOT_SUBMITTED\020/\022\024\n\020INSERT_SUBMI"
    "TTED\0200\022\024\n\020CANCEL_SUBMITTED\0201\022\024\n\020MODIFY_S"
    "UBMITTED\0202\022\014\n\010ACCEPTED\0203\022\023\n\017INSERT_REJEC"
    "TED\0204\022\023\n\017CANCEL_REJECTED\0205\022\023\n\017MODIFY_REJ"
    "ECTED\0206*5\n\017OrderSourceType\022\017\n\013PARTICIPAN"
    "T\0200\022\021\n\rADMINISTRATOR\0201*\364\001\n\017OrderStatusTy"
    "pe\022\016\n\nALL_TRADED\0200\022\030\n\024PART_TRADED_QUEUEI"
    "NG\0201\022\034\n\030PART_TRADED_NOT_QUEUEING\0202\022\025\n\021NO"
    "_TRADE_QUEUEING\0203\022\031\n\025NO_TRADE_NOT_QUEUEI"
    "NG\0204\022\022\n\016ORDER_CANCELED\0205\022\025\n\021ACCEPTED_NO_"
    "REPLY\0206\022\022\n\016STATUS_UNKNOWN\020a\022\025\n\021ORDER_NOT"
    "_TOUCHED\020b\022\021\n\rORDER_TOUCHED\020c*\215\001\n\rOrderT"
    "ypeType\022\020\n\014NORMAL_ORDER\0200\022\025\n\021DERIVE_FROM"
    "_QUOTE\0201\022\033\n\027DERIVE_FROM_COMBINATION\0202\022\017\n"
    "\013COMBINATION\0203\022\025\n\021CONDITIONAL_ORDER\0204\022\016\n"
    "\nSWAP_ORDER\0205*;\n\017TradingRoleType\022\r\n\tER_B"
    "ROKER\0201\022\013\n\007ER_HOST\0202\022\014\n\010ER_MAKER\0203*\227\001\n\016O"
    "ffsetFlagType\022\013\n\007OF_OPEN\0200\022\014\n\010OF_CLOSE\0201"
    "\022\022\n\016OF_FORCE_CLOSE\0202\022\022\n\016OF_CLOSE_TODAY\0203"
    "\022\026\n\022OF_CLOSE_YESTERDAY\0204\022\020\n\014OF_FORCE_OFF"
    "\0205\022\030\n\024OF_LOCAL_FORCE_CLOSE\0206*~\n\rTradeTyp"
    "eType\022\017\n\013TRDT_COMMON\0200\022\032\n\026TRDT_OPTIONS_E"
    "XECUTION\0201\022\014\n\010TRDT_OTC\0202\022\024\n\020TRDT_EFP_DER"
    "IVED\0203\022\034\n\030TRDT_COMBINATION_DERIVED\0204*C\n\017"
    "PriceSourceType\022\023\n\017PSRC_LAST_PRICE\0200\022\014\n\010"
    "PSRC_BUY\0201\022\r\n\tPSRC_SELL\0202*.\n\016ActionFlagT"
    "ype\022\r\n\tAF_Delete\0200\022\r\n\tAF_Modify\0203*\200\001\n\014Su"
    "bmitReason\022\r\n\tSR_Manual\020\000\022\017\n\013SR_AutoOpen"
    "\020\001\022\017\n\013SR_StopGain\020\002\022\017\n\013SR_StopLoss\020\003\022\021\n\r"
    "SR_AutoSwitch\020\004\022\r\n\tSR_Scalpe\020\005\022\014\n\010SR_Tre"
    "nd\020\006*A\n\rMlOrderOffset\022\016\n\nML_OF_OPEN\020\000\022\017\n"
    "\013ML_OF_CLOSE\020\001\022\017\n\013ML_OF_OTHER\020\002", 8471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade.proto", &protobuf_RegisterTypes);
  AccountInfo::default_instance_ = new AccountInfo();
  PositionInfo::default_instance_ = new PositionInfo();
  PositionDetailInfo::default_instance_ = new PositionDetailInfo();
  InputOrder::default_instance_ = new InputOrder();
  Order::default_instance_ = new Order();
  Trade::default_instance_ = new Trade();
  InputOrderAction::default_instance_ = new InputOrderAction();
  MultiLegOrder::default_instance_ = new MultiLegOrder();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  PositionInfo::default_instance_->InitAsDefaultInstance();
  PositionDetailInfo::default_instance_->InitAsDefaultInstance();
  InputOrder::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  Trade::default_instance_->InitAsDefaultInstance();
  InputOrderAction::default_instance_->InitAsDefaultInstance();
  MultiLegOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trade_2eproto {
  StaticDescriptorInitializer_trade_2eproto() {
    protobuf_AddDesc_trade_2eproto();
  }
} static_descriptor_initializer_trade_2eproto_;
const ::google::protobuf::EnumDescriptor* PosiDirectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosiDirectionType_descriptor_;
}
bool PosiDirectionType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HedgeFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HedgeFlagType_descriptor_;
}
bool HedgeFlagType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderPriceTypeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderPriceTypeType_descriptor_;
}
bool OrderPriceTypeType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeDirectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeDirectionType_descriptor_;
}
bool TradeDirectionType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeConditionType_descriptor_;
}
bool TimeConditionType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VolumeConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeConditionType_descriptor_;
}
bool VolumeConditionType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContingentConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContingentConditionType_descriptor_;
}
bool ContingentConditionType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ForceCloseReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceCloseReasonType_descriptor_;
}
bool ForceCloseReasonType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderSubmitStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderSubmitStatusType_descriptor_;
}
bool OrderSubmitStatusType_IsValid(int value) {
  switch(value) {
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderSourceType_descriptor_;
}
bool OrderSourceType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderStatusType_descriptor_;
}
bool OrderStatusType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 97:
    case 98:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderTypeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderTypeType_descriptor_;
}
bool OrderTypeType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingRoleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingRoleType_descriptor_;
}
bool TradingRoleType_IsValid(int value) {
  switch(value) {
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OffsetFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetFlagType_descriptor_;
}
bool OffsetFlagType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeTypeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeTypeType_descriptor_;
}
bool TradeTypeType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceSourceType_descriptor_;
}
bool PriceSourceType_IsValid(int value) {
  switch(value) {
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionFlagType_descriptor_;
}
bool ActionFlagType_IsValid(int value) {
  switch(value) {
    case 48:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubmitReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitReason_descriptor_;
}
bool SubmitReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MlOrderOffset_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MlOrderOffset_descriptor_;
}
bool MlOrderOffset_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kBrokerIDFieldNumber;
const int AccountInfo::kAccountIDFieldNumber;
const int AccountInfo::kPreMortgageFieldNumber;
const int AccountInfo::kPreCreditFieldNumber;
const int AccountInfo::kPreDepositFieldNumber;
const int AccountInfo::kPreBalanceFieldNumber;
const int AccountInfo::kPreMarginFieldNumber;
const int AccountInfo::kInterestBaseFieldNumber;
const int AccountInfo::kInterestFieldNumber;
const int AccountInfo::kDepositFieldNumber;
const int AccountInfo::kWithdrawFieldNumber;
const int AccountInfo::kFrozenMarginFieldNumber;
const int AccountInfo::kFrozenCashFieldNumber;
const int AccountInfo::kFrozenCommissionFieldNumber;
const int AccountInfo::kCurrMarginFieldNumber;
const int AccountInfo::kCashInFieldNumber;
const int AccountInfo::kCommissionFieldNumber;
const int AccountInfo::kCloseProfitFieldNumber;
const int AccountInfo::kPositionProfitFieldNumber;
const int AccountInfo::kBalanceFieldNumber;
const int AccountInfo::kAvailableFieldNumber;
const int AccountInfo::kWithdrawQuotaFieldNumber;
const int AccountInfo::kReserveFieldNumber;
const int AccountInfo::kTradingDayFieldNumber;
const int AccountInfo::kSettlementIDFieldNumber;
const int AccountInfo::kCreditFieldNumber;
const int AccountInfo::kMortgageFieldNumber;
const int AccountInfo::kExchangeMarginFieldNumber;
const int AccountInfo::kDeliveryMarginFieldNumber;
const int AccountInfo::kExchangeDeliveryMarginFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  premortgage_ = 0;
  precredit_ = 0;
  predeposit_ = 0;
  prebalance_ = 0;
  premargin_ = 0;
  interestbase_ = 0;
  interest_ = 0;
  deposit_ = 0;
  withdraw_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  currmargin_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  balance_ = 0;
  available_ = 0;
  withdrawquota_ = 0;
  reserve_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  credit_ = 0;
  mortgage_ = 0;
  exchangemargin_ = 0;
  deliverymargin_ = 0;
  exchangedeliverymargin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    premortgage_ = 0;
    precredit_ = 0;
    predeposit_ = 0;
    prebalance_ = 0;
    premargin_ = 0;
    interestbase_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    interest_ = 0;
    deposit_ = 0;
    withdraw_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    currmargin_ = 0;
    cashin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    commission_ = 0;
    closeprofit_ = 0;
    positionprofit_ = 0;
    balance_ = 0;
    available_ = 0;
    withdrawquota_ = 0;
    reserve_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    settlementid_ = 0;
    credit_ = 0;
    mortgage_ = 0;
    exchangemargin_ = 0;
    deliverymargin_ = 0;
    exchangedeliverymargin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountID;
        break;
      }

      // required string AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_PreMortgage;
        break;
      }

      // required double PreMortgage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premortgage_)));
          set_has_premortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_PreCredit;
        break;
      }

      // required double PreCredit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreCredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precredit_)));
          set_has_precredit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_PreDeposit;
        break;
      }

      // required double PreDeposit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreDeposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predeposit_)));
          set_has_predeposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PreBalance;
        break;
      }

      // required double PreBalance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));
          set_has_prebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_PreMargin;
        break;
      }

      // required double PreMargin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_InterestBase;
        break;
      }

      // required double InterestBase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_InterestBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interestbase_)));
          set_has_interestbase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Interest;
        break;
      }

      // required double Interest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_Deposit;
        break;
      }

      // required double Deposit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
          set_has_deposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_Withdraw;
        break;
      }

      // required double Withdraw = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
          set_has_withdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_FrozenMargin;
        break;
      }

      // required double FrozenMargin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_FrozenCash;
        break;
      }

      // required double FrozenCash = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_FrozenCommission;
        break;
      }

      // required double FrozenCommission = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_CurrMargin;
        break;
      }

      // required double CurrMargin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurrMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));
          set_has_currmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_CashIn;
        break;
      }

      // required double CashIn = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_Commission;
        break;
      }

      // required double Commission = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_CloseProfit;
        break;
      }

      // required double CloseProfit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PositionProfit;
        break;
      }

      // required double PositionProfit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_Balance;
        break;
      }

      // required double Balance = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_Available;
        break;
      }

      // required double Available = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_WithdrawQuota;
        break;
      }

      // required double WithdrawQuota = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WithdrawQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));
          set_has_withdrawquota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_Reserve;
        break;
      }

      // required double Reserve = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_TradingDay;
        break;
      }

      // required string TradingDay = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_SettlementID;
        break;
      }

      // required int32 SettlementID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_Credit;
        break;
      }

      // required double Credit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_Mortgage;
        break;
      }

      // required double Mortgage = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));
          set_has_mortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_ExchangeMargin;
        break;
      }

      // required double ExchangeMargin = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_DeliveryMargin;
        break;
      }

      // required double DeliveryMargin = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deliverymargin_)));
          set_has_deliverymargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_ExchangeDeliveryMargin;
        break;
      }

      // required double ExchangeDeliveryMargin = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeDeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangedeliverymargin_)));
          set_has_exchangedeliverymargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }

  // required string AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountid(), output);
  }

  // required double PreMortgage = 3;
  if (has_premortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->premortgage(), output);
  }

  // required double PreCredit = 4;
  if (has_precredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->precredit(), output);
  }

  // required double PreDeposit = 5;
  if (has_predeposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->predeposit(), output);
  }

  // required double PreBalance = 6;
  if (has_prebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->prebalance(), output);
  }

  // required double PreMargin = 7;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->premargin(), output);
  }

  // required double InterestBase = 8;
  if (has_interestbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->interestbase(), output);
  }

  // required double Interest = 9;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->interest(), output);
  }

  // required double Deposit = 10;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->deposit(), output);
  }

  // required double Withdraw = 11;
  if (has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->withdraw(), output);
  }

  // required double FrozenMargin = 12;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->frozenmargin(), output);
  }

  // required double FrozenCash = 13;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->frozencash(), output);
  }

  // required double FrozenCommission = 14;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozencommission(), output);
  }

  // required double CurrMargin = 15;
  if (has_currmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->currmargin(), output);
  }

  // required double CashIn = 16;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->cashin(), output);
  }

  // required double Commission = 17;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->commission(), output);
  }

  // required double CloseProfit = 18;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->closeprofit(), output);
  }

  // required double PositionProfit = 19;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->positionprofit(), output);
  }

  // required double Balance = 20;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->balance(), output);
  }

  // required double Available = 21;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->available(), output);
  }

  // required double WithdrawQuota = 22;
  if (has_withdrawquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->withdrawquota(), output);
  }

  // required double Reserve = 23;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->reserve(), output);
  }

  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tradingday(), output);
  }

  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->settlementid(), output);
  }

  // required double Credit = 26;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->credit(), output);
  }

  // required double Mortgage = 27;
  if (has_mortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->mortgage(), output);
  }

  // required double ExchangeMargin = 28;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->exchangemargin(), output);
  }

  // required double DeliveryMargin = 29;
  if (has_deliverymargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->deliverymargin(), output);
  }

  // required double ExchangeDeliveryMargin = 30;
  if (has_exchangedeliverymargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->exchangedeliverymargin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }

  // required string AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }

  // required double PreMortgage = 3;
  if (has_premortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->premortgage(), target);
  }

  // required double PreCredit = 4;
  if (has_precredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->precredit(), target);
  }

  // required double PreDeposit = 5;
  if (has_predeposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->predeposit(), target);
  }

  // required double PreBalance = 6;
  if (has_prebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->prebalance(), target);
  }

  // required double PreMargin = 7;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->premargin(), target);
  }

  // required double InterestBase = 8;
  if (has_interestbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->interestbase(), target);
  }

  // required double Interest = 9;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->interest(), target);
  }

  // required double Deposit = 10;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->deposit(), target);
  }

  // required double Withdraw = 11;
  if (has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->withdraw(), target);
  }

  // required double FrozenMargin = 12;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->frozenmargin(), target);
  }

  // required double FrozenCash = 13;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->frozencash(), target);
  }

  // required double FrozenCommission = 14;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozencommission(), target);
  }

  // required double CurrMargin = 15;
  if (has_currmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->currmargin(), target);
  }

  // required double CashIn = 16;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->cashin(), target);
  }

  // required double Commission = 17;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->commission(), target);
  }

  // required double CloseProfit = 18;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->closeprofit(), target);
  }

  // required double PositionProfit = 19;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->positionprofit(), target);
  }

  // required double Balance = 20;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->balance(), target);
  }

  // required double Available = 21;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->available(), target);
  }

  // required double WithdrawQuota = 22;
  if (has_withdrawquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->withdrawquota(), target);
  }

  // required double Reserve = 23;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->reserve(), target);
  }

  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->tradingday(), target);
  }

  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->settlementid(), target);
  }

  // required double Credit = 26;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->credit(), target);
  }

  // required double Mortgage = 27;
  if (has_mortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->mortgage(), target);
  }

  // required double ExchangeMargin = 28;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->exchangemargin(), target);
  }

  // required double DeliveryMargin = 29;
  if (has_deliverymargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->deliverymargin(), target);
  }

  // required double ExchangeDeliveryMargin = 30;
  if (has_exchangedeliverymargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->exchangedeliverymargin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // required double PreMortgage = 3;
    if (has_premortgage()) {
      total_size += 1 + 8;
    }

    // required double PreCredit = 4;
    if (has_precredit()) {
      total_size += 1 + 8;
    }

    // required double PreDeposit = 5;
    if (has_predeposit()) {
      total_size += 1 + 8;
    }

    // required double PreBalance = 6;
    if (has_prebalance()) {
      total_size += 1 + 8;
    }

    // required double PreMargin = 7;
    if (has_premargin()) {
      total_size += 1 + 8;
    }

    // required double InterestBase = 8;
    if (has_interestbase()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double Interest = 9;
    if (has_interest()) {
      total_size += 1 + 8;
    }

    // required double Deposit = 10;
    if (has_deposit()) {
      total_size += 1 + 8;
    }

    // required double Withdraw = 11;
    if (has_withdraw()) {
      total_size += 1 + 8;
    }

    // required double FrozenMargin = 12;
    if (has_frozenmargin()) {
      total_size += 1 + 8;
    }

    // required double FrozenCash = 13;
    if (has_frozencash()) {
      total_size += 1 + 8;
    }

    // required double FrozenCommission = 14;
    if (has_frozencommission()) {
      total_size += 1 + 8;
    }

    // required double CurrMargin = 15;
    if (has_currmargin()) {
      total_size += 1 + 8;
    }

    // required double CashIn = 16;
    if (has_cashin()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double Commission = 17;
    if (has_commission()) {
      total_size += 2 + 8;
    }

    // required double CloseProfit = 18;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }

    // required double PositionProfit = 19;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }

    // required double Balance = 20;
    if (has_balance()) {
      total_size += 2 + 8;
    }

    // required double Available = 21;
    if (has_available()) {
      total_size += 2 + 8;
    }

    // required double WithdrawQuota = 22;
    if (has_withdrawquota()) {
      total_size += 2 + 8;
    }

    // required double Reserve = 23;
    if (has_reserve()) {
      total_size += 2 + 8;
    }

    // required string TradingDay = 24;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 SettlementID = 25;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // required double Credit = 26;
    if (has_credit()) {
      total_size += 2 + 8;
    }

    // required double Mortgage = 27;
    if (has_mortgage()) {
      total_size += 2 + 8;
    }

    // required double ExchangeMargin = 28;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }

    // required double DeliveryMargin = 29;
    if (has_deliverymargin()) {
      total_size += 2 + 8;
    }

    // required double ExchangeDeliveryMargin = 30;
    if (has_exchangedeliverymargin()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_premortgage()) {
      set_premortgage(from.premortgage());
    }
    if (from.has_precredit()) {
      set_precredit(from.precredit());
    }
    if (from.has_predeposit()) {
      set_predeposit(from.predeposit());
    }
    if (from.has_prebalance()) {
      set_prebalance(from.prebalance());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_interestbase()) {
      set_interestbase(from.interestbase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_deposit()) {
      set_deposit(from.deposit());
    }
    if (from.has_withdraw()) {
      set_withdraw(from.withdraw());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_currmargin()) {
      set_currmargin(from.currmargin());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_withdrawquota()) {
      set_withdrawquota(from.withdrawquota());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_mortgage()) {
      set_mortgage(from.mortgage());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
    if (from.has_deliverymargin()) {
      set_deliverymargin(from.deliverymargin());
    }
    if (from.has_exchangedeliverymargin()) {
      set_exchangedeliverymargin(from.exchangedeliverymargin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(premortgage_, other->premortgage_);
    std::swap(precredit_, other->precredit_);
    std::swap(predeposit_, other->predeposit_);
    std::swap(prebalance_, other->prebalance_);
    std::swap(premargin_, other->premargin_);
    std::swap(interestbase_, other->interestbase_);
    std::swap(interest_, other->interest_);
    std::swap(deposit_, other->deposit_);
    std::swap(withdraw_, other->withdraw_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(currmargin_, other->currmargin_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(balance_, other->balance_);
    std::swap(available_, other->available_);
    std::swap(withdrawquota_, other->withdrawquota_);
    std::swap(reserve_, other->reserve_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(credit_, other->credit_);
    std::swap(mortgage_, other->mortgage_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(deliverymargin_, other->deliverymargin_);
    std::swap(exchangedeliverymargin_, other->exchangedeliverymargin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionInfo::kInstrumentIDFieldNumber;
const int PositionInfo::kBrokerIDFieldNumber;
const int PositionInfo::kInvestorIDFieldNumber;
const int PositionInfo::kPosiDirectionFieldNumber;
const int PositionInfo::kHedgeFlagFieldNumber;
const int PositionInfo::kPositionDateFieldNumber;
const int PositionInfo::kYdPositionFieldNumber;
const int PositionInfo::kPositionFieldNumber;
const int PositionInfo::kLongFrozenFieldNumber;
const int PositionInfo::kShortFrozenFieldNumber;
const int PositionInfo::kLongFrozenAmountFieldNumber;
const int PositionInfo::kShortFrozenAmountFieldNumber;
const int PositionInfo::kOpenVolumeFieldNumber;
const int PositionInfo::kCloseVolumeFieldNumber;
const int PositionInfo::kOpenAmountFieldNumber;
const int PositionInfo::kCloseAmountFieldNumber;
const int PositionInfo::kPositionCostFieldNumber;
const int PositionInfo::kPreMarginFieldNumber;
const int PositionInfo::kUseMarginFieldNumber;
const int PositionInfo::kFrozenMarginFieldNumber;
const int PositionInfo::kFrozenCashFieldNumber;
const int PositionInfo::kFrozenCommissionFieldNumber;
const int PositionInfo::kCashInFieldNumber;
const int PositionInfo::kCommissionFieldNumber;
const int PositionInfo::kCloseProfitFieldNumber;
const int PositionInfo::kPositionProfitFieldNumber;
const int PositionInfo::kPreSettlementPriceFieldNumber;
const int PositionInfo::kSettlementPriceFieldNumber;
const int PositionInfo::kTradingDayFieldNumber;
const int PositionInfo::kSettlementIDFieldNumber;
const int PositionInfo::kOpenCostFieldNumber;
const int PositionInfo::kExchangeMarginFieldNumber;
const int PositionInfo::kCombPositionFieldNumber;
const int PositionInfo::kCombLongFrozenFieldNumber;
const int PositionInfo::kCombShortFrozenFieldNumber;
const int PositionInfo::kCloseProfitByDateFieldNumber;
const int PositionInfo::kCloseProfitByTradeFieldNumber;
const int PositionInfo::kTodayPositionFieldNumber;
const int PositionInfo::kMarginRateByMoneyFieldNumber;
const int PositionInfo::kMarginRateByVolumeFieldNumber;
#endif  // !_MSC_VER

PositionInfo::PositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionInfo::InitAsDefaultInstance() {
}

PositionInfo::PositionInfo(const PositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionInfo::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posidirection_ = 49;
  hedgeflag_ = 49;
  positiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ydposition_ = 0;
  position_ = 0;
  longfrozen_ = 0;
  shortfrozen_ = 0;
  longfrozenamount_ = 0;
  shortfrozenamount_ = 0;
  openvolume_ = 0;
  closevolume_ = 0;
  openamount_ = 0;
  closeamount_ = 0;
  positioncost_ = 0;
  premargin_ = 0;
  usemargin_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  presettlementprice_ = 0;
  settlementprice_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  opencost_ = 0;
  exchangemargin_ = 0;
  combposition_ = 0;
  comblongfrozen_ = 0;
  combshortfrozen_ = 0;
  closeprofitbydate_ = 0;
  closeprofitbytrade_ = 0;
  todayposition_ = 0;
  marginratebymoney_ = 0;
  marginratebyvolume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInfo::~PositionInfo() {
  SharedDtor();
}

void PositionInfo::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (positiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete positiondate_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void PositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInfo_descriptor_;
}

const PositionInfo& PositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PositionInfo* PositionInfo::default_instance_ = NULL;

PositionInfo* PositionInfo::New() const {
  return new PositionInfo;
}

void PositionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    posidirection_ = 49;
    hedgeflag_ = 49;
    if (has_positiondate()) {
      if (positiondate_ != &::google::protobuf::internal::kEmptyString) {
        positiondate_->clear();
      }
    }
    ydposition_ = 0;
    position_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    longfrozen_ = 0;
    shortfrozen_ = 0;
    longfrozenamount_ = 0;
    shortfrozenamount_ = 0;
    openvolume_ = 0;
    closevolume_ = 0;
    openamount_ = 0;
    closeamount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    positioncost_ = 0;
    premargin_ = 0;
    usemargin_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    cashin_ = 0;
    commission_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    closeprofit_ = 0;
    positionprofit_ = 0;
    presettlementprice_ = 0;
    settlementprice_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    opencost_ = 0;
    exchangemargin_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    combposition_ = 0;
    comblongfrozen_ = 0;
    combshortfrozen_ = 0;
    closeprofitbydate_ = 0;
    closeprofitbytrade_ = 0;
    todayposition_ = 0;
    marginratebymoney_ = 0;
    marginratebyvolume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }

      // required string BrokerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // required string InvestorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PosiDirection;
        break;
      }

      // required .trade.PosiDirectionType PosiDirection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosiDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::PosiDirectionType_IsValid(value)) {
            set_posidirection(static_cast< ::trade::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HedgeFlag;
        break;
      }

      // required .trade.HedgeFlagType HedgeFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HedgeFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::HedgeFlagType_IsValid(value)) {
            set_hedgeflag(static_cast< ::trade::HedgeFlagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PositionDate;
        break;
      }

      // required string PositionDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positiondate().data(), this->positiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_YdPosition;
        break;
      }

      // required int32 YdPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YdPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));
          set_has_ydposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Position;
        break;
      }

      // required int32 Position = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LongFrozen;
        break;
      }

      // required int32 LongFrozen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longfrozen_)));
          set_has_longfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ShortFrozen;
        break;
      }

      // required int32 ShortFrozen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortfrozen_)));
          set_has_shortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_LongFrozenAmount;
        break;
      }

      // required double LongFrozenAmount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LongFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longfrozenamount_)));
          set_has_longfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_ShortFrozenAmount;
        break;
      }

      // required double ShortFrozenAmount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShortFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortfrozenamount_)));
          set_has_shortfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_OpenVolume;
        break;
      }

      // required int32 OpenVolume = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));
          set_has_openvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CloseVolume;
        break;
      }

      // required int32 CloseVolume = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
          set_has_closevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_OpenAmount;
        break;
      }

      // required double OpenAmount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));
          set_has_openamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_CloseAmount;
        break;
      }

      // required double CloseAmount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
          set_has_closeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_PositionCost;
        break;
      }

      // required double PositionCost = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncost_)));
          set_has_positioncost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_PreMargin;
        break;
      }

      // required double PreMargin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_UseMargin;
        break;
      }

      // required double UseMargin = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UseMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));
          set_has_usemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_FrozenMargin;
        break;
      }

      // required double FrozenMargin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_FrozenCash;
        break;
      }

      // required double FrozenCash = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_FrozenCommission;
        break;
      }

      // required double FrozenCommission = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_CashIn;
        break;
      }

      // required double CashIn = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_Commission;
        break;
      }

      // required double Commission = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_CloseProfit;
        break;
      }

      // required double CloseProfit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_PositionProfit;
        break;
      }

      // required double PositionProfit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_PreSettlementPrice;
        break;
      }

      // required double PreSettlementPrice = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_SettlementPrice;
        break;
      }

      // required double SettlementPrice = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_TradingDay;
        break;
      }

      // required string TradingDay = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_SettlementID;
        break;
      }

      // required int32 SettlementID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_OpenCost;
        break;
      }

      // required double OpenCost = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));
          set_has_opencost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_ExchangeMargin;
        break;
      }

      // required double ExchangeMargin = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CombPosition;
        break;
      }

      // required int32 CombPosition = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combposition_)));
          set_has_combposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_CombLongFrozen;
        break;
      }

      // required int32 CombLongFrozen = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombLongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comblongfrozen_)));
          set_has_comblongfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CombShortFrozen;
        break;
      }

      // required int32 CombShortFrozen = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combshortfrozen_)));
          set_has_combshortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_CloseProfitByDate;
        break;
      }

      // required double CloseProfitByDate = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));
          set_has_closeprofitbydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_CloseProfitByTrade;
        break;
      }

      // required double CloseProfitByTrade = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));
          set_has_closeprofitbytrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_TodayPosition;
        break;
      }

      // required int32 TodayPosition = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayposition_)));
          set_has_todayposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_MarginRateByMoney;
        break;
      }

      // required double MarginRateByMoney = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));
          set_has_marginratebymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_MarginRateByVolume;
        break;
      }

      // required double MarginRateByVolume = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));
          set_has_marginratebyvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }

  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brokerid(), output);
  }

  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->investorid(), output);
  }

  // required .trade.PosiDirectionType PosiDirection = 4;
  if (has_posidirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->posidirection(), output);
  }

  // required .trade.HedgeFlagType HedgeFlag = 5;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->hedgeflag(), output);
  }

  // required string PositionDate = 6;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->positiondate(), output);
  }

  // required int32 YdPosition = 7;
  if (has_ydposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ydposition(), output);
  }

  // required int32 Position = 8;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->position(), output);
  }

  // required int32 LongFrozen = 9;
  if (has_longfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->longfrozen(), output);
  }

  // required int32 ShortFrozen = 10;
  if (has_shortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shortfrozen(), output);
  }

  // required double LongFrozenAmount = 11;
  if (has_longfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longfrozenamount(), output);
  }

  // required double ShortFrozenAmount = 12;
  if (has_shortfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->shortfrozenamount(), output);
  }

  // required int32 OpenVolume = 13;
  if (has_openvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->openvolume(), output);
  }

  // required int32 CloseVolume = 14;
  if (has_closevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->closevolume(), output);
  }

  // required double OpenAmount = 15;
  if (has_openamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->openamount(), output);
  }

  // required double CloseAmount = 16;
  if (has_closeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->closeamount(), output);
  }

  // required double PositionCost = 17;
  if (has_positioncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->positioncost(), output);
  }

  // required double PreMargin = 18;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->premargin(), output);
  }

  // required double UseMargin = 19;
  if (has_usemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->usemargin(), output);
  }

  // required double FrozenMargin = 20;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->frozenmargin(), output);
  }

  // required double FrozenCash = 21;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->frozencash(), output);
  }

  // required double FrozenCommission = 22;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->frozencommission(), output);
  }

  // required double CashIn = 23;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->cashin(), output);
  }

  // required double Commission = 24;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->commission(), output);
  }

  // required double CloseProfit = 25;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->closeprofit(), output);
  }

  // required double PositionProfit = 26;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->positionprofit(), output);
  }

  // required double PreSettlementPrice = 27;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->presettlementprice(), output);
  }

  // required double SettlementPrice = 28;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->settlementprice(), output);
  }

  // required string TradingDay = 29;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->tradingday(), output);
  }

  // required int32 SettlementID = 30;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->settlementid(), output);
  }

  // required double OpenCost = 31;
  if (has_opencost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->opencost(), output);
  }

  // required double ExchangeMargin = 32;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->exchangemargin(), output);
  }

  // required int32 CombPosition = 33;
  if (has_combposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->combposition(), output);
  }

  // required int32 CombLongFrozen = 34;
  if (has_comblongfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->comblongfrozen(), output);
  }

  // required int32 CombShortFrozen = 35;
  if (has_combshortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->combshortfrozen(), output);
  }

  // required double CloseProfitByDate = 36;
  if (has_closeprofitbydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->closeprofitbydate(), output);
  }

  // required double CloseProfitByTrade = 37;
  if (has_closeprofitbytrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->closeprofitbytrade(), output);
  }

  // required int32 TodayPosition = 38;
  if (has_todayposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->todayposition(), output);
  }

  // required double MarginRateByMoney = 39;
  if (has_marginratebymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->marginratebymoney(), output);
  }

  // required double MarginRateByVolume = 40;
  if (has_marginratebyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->marginratebyvolume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // required .trade.PosiDirectionType PosiDirection = 4;
  if (has_posidirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->posidirection(), target);
  }

  // required .trade.HedgeFlagType HedgeFlag = 5;
  if (has_hedgeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->hedgeflag(), target);
  }

  // required string PositionDate = 6;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->positiondate(), target);
  }

  // required int32 YdPosition = 7;
  if (has_ydposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ydposition(), target);
  }

  // required int32 Position = 8;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->position(), target);
  }

  // required int32 LongFrozen = 9;
  if (has_longfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->longfrozen(), target);
  }

  // required int32 ShortFrozen = 10;
  if (has_shortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shortfrozen(), target);
  }

  // required double LongFrozenAmount = 11;
  if (has_longfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longfrozenamount(), target);
  }

  // required double ShortFrozenAmount = 12;
  if (has_shortfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->shortfrozenamount(), target);
  }

  // required int32 OpenVolume = 13;
  if (has_openvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->openvolume(), target);
  }

  // required int32 CloseVolume = 14;
  if (has_closevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->closevolume(), target);
  }

  // required double OpenAmount = 15;
  if (has_openamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->openamount(), target);
  }

  // required double CloseAmount = 16;
  if (has_closeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->closeamount(), target);
  }

  // required double PositionCost = 17;
  if (has_positioncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->positioncost(), target);
  }

  // required double PreMargin = 18;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->premargin(), target);
  }

  // required double UseMargin = 19;
  if (has_usemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->usemargin(), target);
  }

  // required double FrozenMargin = 20;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->frozenmargin(), target);
  }

  // required double FrozenCash = 21;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->frozencash(), target);
  }

  // required double FrozenCommission = 22;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->frozencommission(), target);
  }

  // required double CashIn = 23;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->cashin(), target);
  }

  // required double Commission = 24;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->commission(), target);
  }

  // required double CloseProfit = 25;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->closeprofit(), target);
  }

  // required double PositionProfit = 26;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->positionprofit(), target);
  }

  // required double PreSettlementPrice = 27;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->presettlementprice(), target);
  }

  // required double SettlementPrice = 28;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->settlementprice(), target);
  }

  // required string TradingDay = 29;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->tradingday(), target);
  }

  // required int32 SettlementID = 30;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->settlementid(), target);
  }

  // required double OpenCost = 31;
  if (has_opencost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->opencost(), target);
  }

  // required double ExchangeMargin = 32;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->exchangemargin(), target);
  }

  // required int32 CombPosition = 33;
  if (has_combposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->combposition(), target);
  }

  // required int32 CombLongFrozen = 34;
  if (has_comblongfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->comblongfrozen(), target);
  }

  // required int32 CombShortFrozen = 35;
  if (has_combshortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->combshortfrozen(), target);
  }

  // required double CloseProfitByDate = 36;
  if (has_closeprofitbydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->closeprofitbydate(), target);
  }

  // required double CloseProfitByTrade = 37;
  if (has_closeprofitbytrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->closeprofitbytrade(), target);
  }

  // required int32 TodayPosition = 38;
  if (has_todayposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->todayposition(), target);
  }

  // required double MarginRateByMoney = 39;
  if (has_marginratebymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->marginratebymoney(), target);
  }

  // required double MarginRateByVolume = 40;
  if (has_marginratebyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->marginratebyvolume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // required string BrokerID = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string InvestorID = 3;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // required .trade.PosiDirectionType PosiDirection = 4;
    if (has_posidirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->posidirection());
    }

    // required .trade.HedgeFlagType HedgeFlag = 5;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hedgeflag());
    }

    // required string PositionDate = 6;
    if (has_positiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positiondate());
    }

    // required int32 YdPosition = 7;
    if (has_ydposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydposition());
    }

    // required int32 Position = 8;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LongFrozen = 9;
    if (has_longfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longfrozen());
    }

    // required int32 ShortFrozen = 10;
    if (has_shortfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortfrozen());
    }

    // required double LongFrozenAmount = 11;
    if (has_longfrozenamount()) {
      total_size += 1 + 8;
    }

    // required double ShortFrozenAmount = 12;
    if (has_shortfrozenamount()) {
      total_size += 1 + 8;
    }

    // required int32 OpenVolume = 13;
    if (has_openvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openvolume());
    }

    // required int32 CloseVolume = 14;
    if (has_closevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closevolume());
    }

    // required double OpenAmount = 15;
    if (has_openamount()) {
      total_size += 1 + 8;
    }

    // required double CloseAmount = 16;
    if (has_closeamount()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double PositionCost = 17;
    if (has_positioncost()) {
      total_size += 2 + 8;
    }

    // required double PreMargin = 18;
    if (has_premargin()) {
      total_size += 2 + 8;
    }

    // required double UseMargin = 19;
    if (has_usemargin()) {
      total_size += 2 + 8;
    }

    // required double FrozenMargin = 20;
    if (has_frozenmargin()) {
      total_size += 2 + 8;
    }

    // required double FrozenCash = 21;
    if (has_frozencash()) {
      total_size += 2 + 8;
    }

    // required double FrozenCommission = 22;
    if (has_frozencommission()) {
      total_size += 2 + 8;
    }

    // required double CashIn = 23;
    if (has_cashin()) {
      total_size += 2 + 8;
    }

    // required double Commission = 24;
    if (has_commission()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double CloseProfit = 25;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }

    // required double PositionProfit = 26;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }

    // required double PreSettlementPrice = 27;
    if (has_presettlementprice()) {
      total_size += 2 + 8;
    }

    // required double SettlementPrice = 28;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }

    // required string TradingDay = 29;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required int32 SettlementID = 30;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // required double OpenCost = 31;
    if (has_opencost()) {
      total_size += 2 + 8;
    }

    // required double ExchangeMargin = 32;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 CombPosition = 33;
    if (has_combposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combposition());
    }

    // required int32 CombLongFrozen = 34;
    if (has_comblongfrozen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comblongfrozen());
    }

    // required int32 CombShortFrozen = 35;
    if (has_combshortfrozen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combshortfrozen());
    }

    // required double CloseProfitByDate = 36;
    if (has_closeprofitbydate()) {
      total_size += 2 + 8;
    }

    // required double CloseProfitByTrade = 37;
    if (has_closeprofitbytrade()) {
      total_size += 2 + 8;
    }

    // required int32 TodayPosition = 38;
    if (has_todayposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayposition());
    }

    // required double MarginRateByMoney = 39;
    if (has_marginratebymoney()) {
      total_size += 2 + 8;
    }

    // required double MarginRateByVolume = 40;
    if (has_marginratebyvolume()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInfo::MergeFrom(const PositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_posidirection()) {
      set_posidirection(from.posidirection());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_positiondate()) {
      set_positiondate(from.positiondate());
    }
    if (from.has_ydposition()) {
      set_ydposition(from.ydposition());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_longfrozen()) {
      set_longfrozen(from.longfrozen());
    }
    if (from.has_shortfrozen()) {
      set_shortfrozen(from.shortfrozen());
    }
    if (from.has_longfrozenamount()) {
      set_longfrozenamount(from.longfrozenamount());
    }
    if (from.has_shortfrozenamount()) {
      set_shortfrozenamount(from.shortfrozenamount());
    }
    if (from.has_openvolume()) {
      set_openvolume(from.openvolume());
    }
    if (from.has_closevolume()) {
      set_closevolume(from.closevolume());
    }
    if (from.has_openamount()) {
      set_openamount(from.openamount());
    }
    if (from.has_closeamount()) {
      set_closeamount(from.closeamount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_positioncost()) {
      set_positioncost(from.positioncost());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_usemargin()) {
      set_usemargin(from.usemargin());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_opencost()) {
      set_opencost(from.opencost());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_combposition()) {
      set_combposition(from.combposition());
    }
    if (from.has_comblongfrozen()) {
      set_comblongfrozen(from.comblongfrozen());
    }
    if (from.has_combshortfrozen()) {
      set_combshortfrozen(from.combshortfrozen());
    }
    if (from.has_closeprofitbydate()) {
      set_closeprofitbydate(from.closeprofitbydate());
    }
    if (from.has_closeprofitbytrade()) {
      set_closeprofitbytrade(from.closeprofitbytrade());
    }
    if (from.has_todayposition()) {
      set_todayposition(from.todayposition());
    }
    if (from.has_marginratebymoney()) {
      set_marginratebymoney(from.marginratebymoney());
    }
    if (from.has_marginratebyvolume()) {
      set_marginratebyvolume(from.marginratebyvolume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInfo::CopyFrom(const PositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PositionInfo::Swap(PositionInfo* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(posidirection_, other->posidirection_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(positiondate_, other->positiondate_);
    std::swap(ydposition_, other->ydposition_);
    std::swap(position_, other->position_);
    std::swap(longfrozen_, other->longfrozen_);
    std::swap(shortfrozen_, other->shortfrozen_);
    std::swap(longfrozenamount_, other->longfrozenamount_);
    std::swap(shortfrozenamount_, other->shortfrozenamount_);
    std::swap(openvolume_, other->openvolume_);
    std::swap(closevolume_, other->closevolume_);
    std::swap(openamount_, other->openamount_);
    std::swap(closeamount_, other->closeamount_);
    std::swap(positioncost_, other->positioncost_);
    std::swap(premargin_, other->premargin_);
    std::swap(usemargin_, other->usemargin_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(opencost_, other->opencost_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(combposition_, other->combposition_);
    std::swap(comblongfrozen_, other->comblongfrozen_);
    std::swap(combshortfrozen_, other->combshortfrozen_);
    std::swap(closeprofitbydate_, other->closeprofitbydate_);
    std::swap(closeprofitbytrade_, other->closeprofitbytrade_);
    std::swap(todayposition_, other->todayposition_);
    std::swap(marginratebymoney_, other->marginratebymoney_);
    std::swap(marginratebyvolume_, other->marginratebyvolume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInfo_descriptor_;
  metadata.reflection = PositionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionDetailInfo::kInstrumentIDFieldNumber;
const int PositionDetailInfo::kBrokerIDFieldNumber;
const int PositionDetailInfo::kInvestorIDFieldNumber;
const int PositionDetailInfo::kHedgeFlagFieldNumber;
const int PositionDetailInfo::kDirectionFieldNumber;
const int PositionDetailInfo::kOpenDateFieldNumber;
const int PositionDetailInfo::kTradeIDFieldNumber;
const int PositionDetailInfo::kVolumeFieldNumber;
const int PositionDetailInfo::kOpenPriceFieldNumber;
const int PositionDetailInfo::kTradingDayFieldNumber;
const int PositionDetailInfo::kSettlementIDFieldNumber;
const int PositionDetailInfo::kTradeTypeFieldNumber;
const int PositionDetailInfo::kCombInstrumentIDFieldNumber;
const int PositionDetailInfo::kExchangeIDFieldNumber;
const int PositionDetailInfo::kCloseProfitByDateFieldNumber;
const int PositionDetailInfo::kCloseProfitByTradeFieldNumber;
const int PositionDetailInfo::kPositionProfitByDateFieldNumber;
const int PositionDetailInfo::kPositionProfitByTradeFieldNumber;
const int PositionDetailInfo::kMarginFieldNumber;
const int PositionDetailInfo::kExchMarginFieldNumber;
const int PositionDetailInfo::kMarginRateByMoneyFieldNumber;
const int PositionDetailInfo::kMarginRateByVolumeFieldNumber;
const int PositionDetailInfo::kLastSettlementPriceFieldNumber;
const int PositionDetailInfo::kSettlementPriceFieldNumber;
const int PositionDetailInfo::kCloseVolumeFieldNumber;
const int PositionDetailInfo::kCloseAmountFieldNumber;
#endif  // !_MSC_VER

PositionDetailInfo::PositionDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionDetailInfo::InitAsDefaultInstance() {
}

PositionDetailInfo::PositionDetailInfo(const PositionDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hedgeflag_ = 49;
  direction_ = 48;
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  openprice_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  tradetype_ = 48;
  combinstrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closeprofitbydate_ = 0;
  closeprofitbytrade_ = 0;
  positionprofitbydate_ = 0;
  positionprofitbytrade_ = 0;
  margin_ = 0;
  exchmargin_ = 0;
  marginratebymoney_ = 0;
  marginratebyvolume_ = 0;
  lastsettlementprice_ = 0;
  settlementprice_ = 0;
  closevolume_ = 0;
  closeamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionDetailInfo::~PositionDetailInfo() {
  SharedDtor();
}

void PositionDetailInfo::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (tradeid_ != &::google::protobuf::internal::kEmptyString) {
    delete tradeid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (combinstrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete combinstrumentid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (this != default_instance_) {
  }
}

void PositionDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionDetailInfo_descriptor_;
}

const PositionDetailInfo& PositionDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PositionDetailInfo* PositionDetailInfo::default_instance_ = NULL;

PositionDetailInfo* PositionDetailInfo::New() const {
  return new PositionDetailInfo;
}

void PositionDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    hedgeflag_ = 49;
    direction_ = 48;
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
    if (has_tradeid()) {
      if (tradeid_ != &::google::protobuf::internal::kEmptyString) {
        tradeid_->clear();
      }
    }
    volume_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    openprice_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    tradetype_ = 48;
    if (has_combinstrumentid()) {
      if (combinstrumentid_ != &::google::protobuf::internal::kEmptyString) {
        combinstrumentid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    closeprofitbydate_ = 0;
    closeprofitbytrade_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    positionprofitbydate_ = 0;
    positionprofitbytrade_ = 0;
    margin_ = 0;
    exchmargin_ = 0;
    marginratebymoney_ = 0;
    marginratebyvolume_ = 0;
    lastsettlementprice_ = 0;
    settlementprice_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    closevolume_ = 0;
    closeamount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }

      // required string BrokerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // required string InvestorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HedgeFlag;
        break;
      }

      // required .trade.HedgeFlagType HedgeFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HedgeFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::HedgeFlagType_IsValid(value)) {
            set_hedgeflag(static_cast< ::trade::HedgeFlagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Direction;
        break;
      }

      // required .trade.TradeDirectionType Direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradeDirectionType_IsValid(value)) {
            set_direction(static_cast< ::trade::TradeDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_OpenDate;
        break;
      }

      // required string OpenDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_TradeID;
        break;
      }

      // required string TradeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradeid().data(), this->tradeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Volume;
        break;
      }

      // required int32 Volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_OpenPrice;
        break;
      }

      // required double OpenPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_TradingDay;
        break;
      }

      // required string TradingDay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SettlementID;
        break;
      }

      // required int32 SettlementID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_TradeType;
        break;
      }

      // required .trade.TradeTypeType TradeType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradeTypeType_IsValid(value)) {
            set_tradetype(static_cast< ::trade::TradeTypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_CombInstrumentID;
        break;
      }

      // required string CombInstrumentID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombInstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combinstrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->combinstrumentid().data(), this->combinstrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ExchangeID;
        break;
      }

      // required string ExchangeID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_CloseProfitByDate;
        break;
      }

      // required double CloseProfitByDate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));
          set_has_closeprofitbydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_CloseProfitByTrade;
        break;
      }

      // required double CloseProfitByTrade = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));
          set_has_closeprofitbytrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_PositionProfitByDate;
        break;
      }

      // required double PositionProfitByDate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfitByDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofitbydate_)));
          set_has_positionprofitbydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_PositionProfitByTrade;
        break;
      }

      // required double PositionProfitByTrade = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfitByTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofitbytrade_)));
          set_has_positionprofitbytrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_Margin;
        break;
      }

      // required double Margin = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_ExchMargin;
        break;
      }

      // required double ExchMargin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchmargin_)));
          set_has_exchmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_MarginRateByMoney;
        break;
      }

      // required double MarginRateByMoney = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));
          set_has_marginratebymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_MarginRateByVolume;
        break;
      }

      // required double MarginRateByVolume = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));
          set_has_marginratebyvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_LastSettlementPrice;
        break;
      }

      // required double LastSettlementPrice = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LastSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastsettlementprice_)));
          set_has_lastsettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_SettlementPrice;
        break;
      }

      // required double SettlementPrice = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_CloseVolume;
        break;
      }

      // required int32 CloseVolume = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
          set_has_closevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_CloseAmount;
        break;
      }

      // required double CloseAmount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
          set_has_closeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PositionDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }

  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brokerid(), output);
  }

  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->investorid(), output);
  }

  // required .trade.HedgeFlagType HedgeFlag = 4;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->hedgeflag(), output);
  }

  // required .trade.TradeDirectionType Direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->direction(), output);
  }

  // required string OpenDate = 6;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opendate(), output);
  }

  // required string TradeID = 7;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tradeid(), output);
  }

  // required int32 Volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // required double OpenPrice = 9;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openprice(), output);
  }

  // required string TradingDay = 10;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tradingday(), output);
  }

  // required int32 SettlementID = 11;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->settlementid(), output);
  }

  // required .trade.TradeTypeType TradeType = 12;
  if (has_tradetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->tradetype(), output);
  }

  // required string CombInstrumentID = 13;
  if (has_combinstrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combinstrumentid().data(), this->combinstrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->combinstrumentid(), output);
  }

  // required string ExchangeID = 14;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->exchangeid(), output);
  }

  // required double CloseProfitByDate = 15;
  if (has_closeprofitbydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->closeprofitbydate(), output);
  }

  // required double CloseProfitByTrade = 16;
  if (has_closeprofitbytrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->closeprofitbytrade(), output);
  }

  // required double PositionProfitByDate = 17;
  if (has_positionprofitbydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->positionprofitbydate(), output);
  }

  // required double PositionProfitByTrade = 18;
  if (has_positionprofitbytrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->positionprofitbytrade(), output);
  }

  // required double Margin = 19;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->margin(), output);
  }

  // required double ExchMargin = 20;
  if (has_exchmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->exchmargin(), output);
  }

  // required double MarginRateByMoney = 21;
  if (has_marginratebymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->marginratebymoney(), output);
  }

  // required double MarginRateByVolume = 22;
  if (has_marginratebyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->marginratebyvolume(), output);
  }

  // required double LastSettlementPrice = 23;
  if (has_lastsettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lastsettlementprice(), output);
  }

  // required double SettlementPrice = 24;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->settlementprice(), output);
  }

  // required int32 CloseVolume = 25;
  if (has_closevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->closevolume(), output);
  }

  // required double CloseAmount = 26;
  if (has_closeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->closeamount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // required .trade.HedgeFlagType HedgeFlag = 4;
  if (has_hedgeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->hedgeflag(), target);
  }

  // required .trade.TradeDirectionType Direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->direction(), target);
  }

  // required string OpenDate = 6;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->opendate(), target);
  }

  // required string TradeID = 7;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tradeid(), target);
  }

  // required int32 Volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // required double OpenPrice = 9;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openprice(), target);
  }

  // required string TradingDay = 10;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tradingday(), target);
  }

  // required int32 SettlementID = 11;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->settlementid(), target);
  }

  // required .trade.TradeTypeType TradeType = 12;
  if (has_tradetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->tradetype(), target);
  }

  // required string CombInstrumentID = 13;
  if (has_combinstrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combinstrumentid().data(), this->combinstrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->combinstrumentid(), target);
  }

  // required string ExchangeID = 14;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exchangeid(), target);
  }

  // required double CloseProfitByDate = 15;
  if (has_closeprofitbydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->closeprofitbydate(), target);
  }

  // required double CloseProfitByTrade = 16;
  if (has_closeprofitbytrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->closeprofitbytrade(), target);
  }

  // required double PositionProfitByDate = 17;
  if (has_positionprofitbydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->positionprofitbydate(), target);
  }

  // required double PositionProfitByTrade = 18;
  if (has_positionprofitbytrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->positionprofitbytrade(), target);
  }

  // required double Margin = 19;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->margin(), target);
  }

  // required double ExchMargin = 20;
  if (has_exchmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->exchmargin(), target);
  }

  // required double MarginRateByMoney = 21;
  if (has_marginratebymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->marginratebymoney(), target);
  }

  // required double MarginRateByVolume = 22;
  if (has_marginratebyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->marginratebyvolume(), target);
  }

  // required double LastSettlementPrice = 23;
  if (has_lastsettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lastsettlementprice(), target);
  }

  // required double SettlementPrice = 24;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->settlementprice(), target);
  }

  // required int32 CloseVolume = 25;
  if (has_closevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->closevolume(), target);
  }

  // required double CloseAmount = 26;
  if (has_closeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->closeamount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // required string BrokerID = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string InvestorID = 3;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // required .trade.HedgeFlagType HedgeFlag = 4;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hedgeflag());
    }

    // required .trade.TradeDirectionType Direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required string OpenDate = 6;
    if (has_opendate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }

    // required string TradeID = 7;
    if (has_tradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeid());
    }

    // required int32 Volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double OpenPrice = 9;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required string TradingDay = 10;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required int32 SettlementID = 11;
    if (has_settlementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // required .trade.TradeTypeType TradeType = 12;
    if (has_tradetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradetype());
    }

    // required string CombInstrumentID = 13;
    if (has_combinstrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combinstrumentid());
    }

    // required string ExchangeID = 14;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required double CloseProfitByDate = 15;
    if (has_closeprofitbydate()) {
      total_size += 1 + 8;
    }

    // required double CloseProfitByTrade = 16;
    if (has_closeprofitbytrade()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double PositionProfitByDate = 17;
    if (has_positionprofitbydate()) {
      total_size += 2 + 8;
    }

    // required double PositionProfitByTrade = 18;
    if (has_positionprofitbytrade()) {
      total_size += 2 + 8;
    }

    // required double Margin = 19;
    if (has_margin()) {
      total_size += 2 + 8;
    }

    // required double ExchMargin = 20;
    if (has_exchmargin()) {
      total_size += 2 + 8;
    }

    // required double MarginRateByMoney = 21;
    if (has_marginratebymoney()) {
      total_size += 2 + 8;
    }

    // required double MarginRateByVolume = 22;
    if (has_marginratebyvolume()) {
      total_size += 2 + 8;
    }

    // required double LastSettlementPrice = 23;
    if (has_lastsettlementprice()) {
      total_size += 2 + 8;
    }

    // required double SettlementPrice = 24;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 CloseVolume = 25;
    if (has_closevolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closevolume());
    }

    // required double CloseAmount = 26;
    if (has_closeamount()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionDetailInfo::MergeFrom(const PositionDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_tradetype()) {
      set_tradetype(from.tradetype());
    }
    if (from.has_combinstrumentid()) {
      set_combinstrumentid(from.combinstrumentid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_closeprofitbydate()) {
      set_closeprofitbydate(from.closeprofitbydate());
    }
    if (from.has_closeprofitbytrade()) {
      set_closeprofitbytrade(from.closeprofitbytrade());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_positionprofitbydate()) {
      set_positionprofitbydate(from.positionprofitbydate());
    }
    if (from.has_positionprofitbytrade()) {
      set_positionprofitbytrade(from.positionprofitbytrade());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_exchmargin()) {
      set_exchmargin(from.exchmargin());
    }
    if (from.has_marginratebymoney()) {
      set_marginratebymoney(from.marginratebymoney());
    }
    if (from.has_marginratebyvolume()) {
      set_marginratebyvolume(from.marginratebyvolume());
    }
    if (from.has_lastsettlementprice()) {
      set_lastsettlementprice(from.lastsettlementprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_closevolume()) {
      set_closevolume(from.closevolume());
    }
    if (from.has_closeamount()) {
      set_closeamount(from.closeamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionDetailInfo::CopyFrom(const PositionDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x03ffffff) != 0x03ffffff) return false;

  return true;
}

void PositionDetailInfo::Swap(PositionDetailInfo* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(direction_, other->direction_);
    std::swap(opendate_, other->opendate_);
    std::swap(tradeid_, other->tradeid_);
    std::swap(volume_, other->volume_);
    std::swap(openprice_, other->openprice_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(tradetype_, other->tradetype_);
    std::swap(combinstrumentid_, other->combinstrumentid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(closeprofitbydate_, other->closeprofitbydate_);
    std::swap(closeprofitbytrade_, other->closeprofitbytrade_);
    std::swap(positionprofitbydate_, other->positionprofitbydate_);
    std::swap(positionprofitbytrade_, other->positionprofitbytrade_);
    std::swap(margin_, other->margin_);
    std::swap(exchmargin_, other->exchmargin_);
    std::swap(marginratebymoney_, other->marginratebymoney_);
    std::swap(marginratebyvolume_, other->marginratebyvolume_);
    std::swap(lastsettlementprice_, other->lastsettlementprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(closevolume_, other->closevolume_);
    std::swap(closeamount_, other->closeamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionDetailInfo_descriptor_;
  metadata.reflection = PositionDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputOrder::kBrokerIDFieldNumber;
const int InputOrder::kInvestorIDFieldNumber;
const int InputOrder::kInstrumentIDFieldNumber;
const int InputOrder::kOrderRefFieldNumber;
const int InputOrder::kUserIDFieldNumber;
const int InputOrder::kOrderPriceTypeFieldNumber;
const int InputOrder::kDirectionFieldNumber;
const int InputOrder::kCombOffsetFlagFieldNumber;
const int InputOrder::kCombHedgeFlagFieldNumber;
const int InputOrder::kLimitPriceFieldNumber;
const int InputOrder::kVolumeTotalOriginalFieldNumber;
const int InputOrder::kTimeConditionFieldNumber;
const int InputOrder::kGTDDateFieldNumber;
const int InputOrder::kVolumeConditionFieldNumber;
const int InputOrder::kMinVolumeFieldNumber;
const int InputOrder::kContingentConditionFieldNumber;
const int InputOrder::kStopPriceFieldNumber;
const int InputOrder::kForceCloseReasonFieldNumber;
const int InputOrder::kIsAutoSuspendFieldNumber;
const int InputOrder::kBusinessUnitFieldNumber;
const int InputOrder::kRequestIDFieldNumber;
const int InputOrder::kUserForceCloseFieldNumber;
#endif  // !_MSC_VER

InputOrder::InputOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InputOrder::InitAsDefaultInstance() {
}

InputOrder::InputOrder(const InputOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InputOrder::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderpricetype_ = 49;
  direction_ = 48;
  comboffsetflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combhedgeflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  timecondition_ = 49;
  gtddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volumecondition_ = 49;
  minvolume_ = 0;
  contingentcondition_ = 49;
  stopprice_ = 0;
  forceclosereason_ = 48;
  isautosuspend_ = false;
  businessunit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestid_ = 0;
  userforceclose_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputOrder::~InputOrder() {
  SharedDtor();
}

void InputOrder::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
    delete comboffsetflag_;
  }
  if (combhedgeflag_ != &::google::protobuf::internal::kEmptyString) {
    delete combhedgeflag_;
  }
  if (gtddate_ != &::google::protobuf::internal::kEmptyString) {
    delete gtddate_;
  }
  if (businessunit_ != &::google::protobuf::internal::kEmptyString) {
    delete businessunit_;
  }
  if (this != default_instance_) {
  }
}

void InputOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputOrder_descriptor_;
}

const InputOrder& InputOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

InputOrder* InputOrder::default_instance_ = NULL;

InputOrder* InputOrder::New() const {
  return new InputOrder;
}

void InputOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    orderpricetype_ = 49;
    direction_ = 48;
    if (has_comboffsetflag()) {
      if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
        comboffsetflag_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_combhedgeflag()) {
      if (combhedgeflag_ != &::google::protobuf::internal::kEmptyString) {
        combhedgeflag_->clear();
      }
    }
    limitprice_ = 0;
    volumetotaloriginal_ = 0;
    timecondition_ = 49;
    if (has_gtddate()) {
      if (gtddate_ != &::google::protobuf::internal::kEmptyString) {
        gtddate_->clear();
      }
    }
    volumecondition_ = 49;
    minvolume_ = 0;
    contingentcondition_ = 49;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    stopprice_ = 0;
    forceclosereason_ = 48;
    isautosuspend_ = false;
    if (has_businessunit()) {
      if (businessunit_ != &::google::protobuf::internal::kEmptyString) {
        businessunit_->clear();
      }
    }
    requestid_ = 0;
    userforceclose_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InvestorID;
        break;
      }

      // required string InvestorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InstrumentID;
        break;
      }

      // required string InstrumentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OrderRef;
        break;
      }

      // required string OrderRef = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UserID;
        break;
      }

      // required string UserID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_OrderPriceType;
        break;
      }

      // required .trade.OrderPriceTypeType OrderPriceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderPriceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OrderPriceTypeType_IsValid(value)) {
            set_orderpricetype(static_cast< ::trade::OrderPriceTypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Direction;
        break;
      }

      // required .trade.TradeDirectionType Direction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradeDirectionType_IsValid(value)) {
            set_direction(static_cast< ::trade::TradeDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_CombOffsetFlag;
        break;
      }

      // required string CombOffsetFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombOffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comboffsetflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comboffsetflag().data(), this->comboffsetflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CombHedgeFlag;
        break;
      }

      // required string CombHedgeFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombHedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combhedgeflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->combhedgeflag().data(), this->combhedgeflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_LimitPrice;
        break;
      }

      // required double LimitPrice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
          set_has_limitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_VolumeTotalOriginal;
        break;
      }

      // required int32 VolumeTotalOriginal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTotalOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));
          set_has_volumetotaloriginal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_TimeCondition;
        break;
      }

      // required .trade.TimeConditionType TimeCondition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TimeConditionType_IsValid(value)) {
            set_timecondition(static_cast< ::trade::TimeConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_GTDDate;
        break;
      }

      // required string GTDDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GTDDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gtddate().data(), this->gtddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_VolumeCondition;
        break;
      }

      // required .trade.VolumeConditionType VolumeCondition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::VolumeConditionType_IsValid(value)) {
            set_volumecondition(static_cast< ::trade::VolumeConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_MinVolume;
        break;
      }

      // required int32 MinVolume = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minvolume_)));
          set_has_minvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ContingentCondition;
        break;
      }

      // required .trade.ContingentConditionType ContingentCondition = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContingentCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::ContingentConditionType_IsValid(value)) {
            set_contingentcondition(static_cast< ::trade::ContingentConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_StopPrice;
        break;
      }

      // required double StopPrice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));
          set_has_stopprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ForceCloseReason;
        break;
      }

      // required .trade.ForceCloseReasonType ForceCloseReason = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ForceCloseReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::ForceCloseReasonType_IsValid(value)) {
            set_forceclosereason(static_cast< ::trade::ForceCloseReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_IsAutoSuspend;
        break;
      }

      // required bool IsAutoSuspend = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoSuspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautosuspend_)));
          set_has_isautosuspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_BusinessUnit;
        break;
      }

      // required string BusinessUnit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_RequestID;
        break;
      }

      // required int32 RequestID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UserForceClose;
        break;
      }

      // required bool UserForceClose = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserForceClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &userforceclose_)));
          set_has_userforceclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InputOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investorid(), output);
  }

  // required string InstrumentID = 3;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrumentid(), output);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orderref(), output);
  }

  // required string UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required .trade.OrderPriceTypeType OrderPriceType = 6;
  if (has_orderpricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->orderpricetype(), output);
  }

  // required .trade.TradeDirectionType Direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->direction(), output);
  }

  // required string CombOffsetFlag = 8;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->comboffsetflag(), output);
  }

  // required string CombHedgeFlag = 9;
  if (has_combhedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->combhedgeflag(), output);
  }

  // required double LimitPrice = 10;
  if (has_limitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->limitprice(), output);
  }

  // required int32 VolumeTotalOriginal = 11;
  if (has_volumetotaloriginal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->volumetotaloriginal(), output);
  }

  // required .trade.TimeConditionType TimeCondition = 12;
  if (has_timecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->timecondition(), output);
  }

  // required string GTDDate = 13;
  if (has_gtddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->gtddate(), output);
  }

  // required .trade.VolumeConditionType VolumeCondition = 14;
  if (has_volumecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->volumecondition(), output);
  }

  // required int32 MinVolume = 15;
  if (has_minvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->minvolume(), output);
  }

  // required .trade.ContingentConditionType ContingentCondition = 16;
  if (has_contingentcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->contingentcondition(), output);
  }

  // required double StopPrice = 17;
  if (has_stopprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->stopprice(), output);
  }

  // required .trade.ForceCloseReasonType ForceCloseReason = 18;
  if (has_forceclosereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->forceclosereason(), output);
  }

  // required bool IsAutoSuspend = 19;
  if (has_isautosuspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isautosuspend(), output);
  }

  // required string BusinessUnit = 20;
  if (has_businessunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->businessunit(), output);
  }

  // required int32 RequestID = 21;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->requestid(), output);
  }

  // required bool UserForceClose = 22;
  if (has_userforceclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->userforceclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InputOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }

  // required string InstrumentID = 3;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrumentid(), target);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderref(), target);
  }

  // required string UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required .trade.OrderPriceTypeType OrderPriceType = 6;
  if (has_orderpricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->orderpricetype(), target);
  }

  // required .trade.TradeDirectionType Direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->direction(), target);
  }

  // required string CombOffsetFlag = 8;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->comboffsetflag(), target);
  }

  // required string CombHedgeFlag = 9;
  if (has_combhedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->combhedgeflag(), target);
  }

  // required double LimitPrice = 10;
  if (has_limitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->limitprice(), target);
  }

  // required int32 VolumeTotalOriginal = 11;
  if (has_volumetotaloriginal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->volumetotaloriginal(), target);
  }

  // required .trade.TimeConditionType TimeCondition = 12;
  if (has_timecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->timecondition(), target);
  }

  // required string GTDDate = 13;
  if (has_gtddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->gtddate(), target);
  }

  // required .trade.VolumeConditionType VolumeCondition = 14;
  if (has_volumecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->volumecondition(), target);
  }

  // required int32 MinVolume = 15;
  if (has_minvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->minvolume(), target);
  }

  // required .trade.ContingentConditionType ContingentCondition = 16;
  if (has_contingentcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->contingentcondition(), target);
  }

  // required double StopPrice = 17;
  if (has_stopprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->stopprice(), target);
  }

  // required .trade.ForceCloseReasonType ForceCloseReason = 18;
  if (has_forceclosereason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->forceclosereason(), target);
  }

  // required bool IsAutoSuspend = 19;
  if (has_isautosuspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isautosuspend(), target);
  }

  // required string BusinessUnit = 20;
  if (has_businessunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->businessunit(), target);
  }

  // required int32 RequestID = 21;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->requestid(), target);
  }

  // required bool UserForceClose = 22;
  if (has_userforceclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->userforceclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InputOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string InvestorID = 2;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // required string InstrumentID = 3;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // required string OrderRef = 4;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }

    // required string UserID = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .trade.OrderPriceTypeType OrderPriceType = 6;
    if (has_orderpricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderpricetype());
    }

    // required .trade.TradeDirectionType Direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required string CombOffsetFlag = 8;
    if (has_comboffsetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comboffsetflag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string CombHedgeFlag = 9;
    if (has_combhedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combhedgeflag());
    }

    // required double LimitPrice = 10;
    if (has_limitprice()) {
      total_size += 1 + 8;
    }

    // required int32 VolumeTotalOriginal = 11;
    if (has_volumetotaloriginal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetotaloriginal());
    }

    // required .trade.TimeConditionType TimeCondition = 12;
    if (has_timecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timecondition());
    }

    // required string GTDDate = 13;
    if (has_gtddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gtddate());
    }

    // required .trade.VolumeConditionType VolumeCondition = 14;
    if (has_volumecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->volumecondition());
    }

    // required int32 MinVolume = 15;
    if (has_minvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minvolume());
    }

    // required .trade.ContingentConditionType ContingentCondition = 16;
    if (has_contingentcondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contingentcondition());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double StopPrice = 17;
    if (has_stopprice()) {
      total_size += 2 + 8;
    }

    // required .trade.ForceCloseReasonType ForceCloseReason = 18;
    if (has_forceclosereason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forceclosereason());
    }

    // required bool IsAutoSuspend = 19;
    if (has_isautosuspend()) {
      total_size += 2 + 1;
    }

    // required string BusinessUnit = 20;
    if (has_businessunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businessunit());
    }

    // required int32 RequestID = 21;
    if (has_requestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required bool UserForceClose = 22;
    if (has_userforceclose()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputOrder::MergeFrom(const InputOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_orderpricetype()) {
      set_orderpricetype(from.orderpricetype());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_comboffsetflag()) {
      set_comboffsetflag(from.comboffsetflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combhedgeflag()) {
      set_combhedgeflag(from.combhedgeflag());
    }
    if (from.has_limitprice()) {
      set_limitprice(from.limitprice());
    }
    if (from.has_volumetotaloriginal()) {
      set_volumetotaloriginal(from.volumetotaloriginal());
    }
    if (from.has_timecondition()) {
      set_timecondition(from.timecondition());
    }
    if (from.has_gtddate()) {
      set_gtddate(from.gtddate());
    }
    if (from.has_volumecondition()) {
      set_volumecondition(from.volumecondition());
    }
    if (from.has_minvolume()) {
      set_minvolume(from.minvolume());
    }
    if (from.has_contingentcondition()) {
      set_contingentcondition(from.contingentcondition());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stopprice()) {
      set_stopprice(from.stopprice());
    }
    if (from.has_forceclosereason()) {
      set_forceclosereason(from.forceclosereason());
    }
    if (from.has_isautosuspend()) {
      set_isautosuspend(from.isautosuspend());
    }
    if (from.has_businessunit()) {
      set_businessunit(from.businessunit());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_userforceclose()) {
      set_userforceclose(from.userforceclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOrder::CopyFrom(const InputOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void InputOrder::Swap(InputOrder* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(orderref_, other->orderref_);
    std::swap(userid_, other->userid_);
    std::swap(orderpricetype_, other->orderpricetype_);
    std::swap(direction_, other->direction_);
    std::swap(comboffsetflag_, other->comboffsetflag_);
    std::swap(combhedgeflag_, other->combhedgeflag_);
    std::swap(limitprice_, other->limitprice_);
    std::swap(volumetotaloriginal_, other->volumetotaloriginal_);
    std::swap(timecondition_, other->timecondition_);
    std::swap(gtddate_, other->gtddate_);
    std::swap(volumecondition_, other->volumecondition_);
    std::swap(minvolume_, other->minvolume_);
    std::swap(contingentcondition_, other->contingentcondition_);
    std::swap(stopprice_, other->stopprice_);
    std::swap(forceclosereason_, other->forceclosereason_);
    std::swap(isautosuspend_, other->isautosuspend_);
    std::swap(businessunit_, other->businessunit_);
    std::swap(requestid_, other->requestid_);
    std::swap(userforceclose_, other->userforceclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputOrder_descriptor_;
  metadata.reflection = InputOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Order::kBrokerIDFieldNumber;
const int Order::kInvestorIDFieldNumber;
const int Order::kInstrumentIDFieldNumber;
const int Order::kOrderRefFieldNumber;
const int Order::kUserIDFieldNumber;
const int Order::kOrderPriceTypeFieldNumber;
const int Order::kDirectionFieldNumber;
const int Order::kCombOffsetFlagFieldNumber;
const int Order::kCombHedgeFlagFieldNumber;
const int Order::kLimitPriceFieldNumber;
const int Order::kVolumeTotalOriginalFieldNumber;
const int Order::kTimeConditionFieldNumber;
const int Order::kGTDDateFieldNumber;
const int Order::kVolumeConditionFieldNumber;
const int Order::kMinVolumeFieldNumber;
const int Order::kContingentConditionFieldNumber;
const int Order::kStopPriceFieldNumber;
const int Order::kForceCloseReasonFieldNumber;
const int Order::kIsAutoSuspendFieldNumber;
const int Order::kBusinessUnitFieldNumber;
const int Order::kRequestIDFieldNumber;
const int Order::kOrderLocalIDFieldNumber;
const int Order::kExchangeIDFieldNumber;
const int Order::kParticipantIDFieldNumber;
const int Order::kClientIDFieldNumber;
const int Order::kExchangeInstIDFieldNumber;
const int Order::kTraderIDFieldNumber;
const int Order::kInstallIDFieldNumber;
const int Order::kOrderSubmitStatusFieldNumber;
const int Order::kNotifySequenceFieldNumber;
const int Order::kTradingDayFieldNumber;
const int Order::kSettlementIDFieldNumber;
const int Order::kOrderSysIDFieldNumber;
const int Order::kOrderSourceFieldNumber;
const int Order::kOrderStatusFieldNumber;
const int Order::kOrderTypeFieldNumber;
const int Order::kVolumeTradedFieldNumber;
const int Order::kVolumeTotalFieldNumber;
const int Order::kInsertDateFieldNumber;
const int Order::kInsertTimeFieldNumber;
const int Order::kActiveTimeFieldNumber;
const int Order::kSuspendTimeFieldNumber;
const int Order::kUpdateTimeFieldNumber;
const int Order::kCancelTimeFieldNumber;
const int Order::kActiveTraderIDFieldNumber;
const int Order::kClearingPartIDFieldNumber;
const int Order::kSequenceNoFieldNumber;
const int Order::kFrontIDFieldNumber;
const int Order::kSessionIDFieldNumber;
const int Order::kUserProductInfoFieldNumber;
const int Order::kStatusMsgFieldNumber;
const int Order::kUserForceCloseFieldNumber;
const int Order::kActiveUserIDFieldNumber;
const int Order::kBrokerOrderSeqFieldNumber;
const int Order::kRelativeOrderSysIDFieldNumber;
const int Order::kPreferredFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Order::InitAsDefaultInstance() {
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderpricetype_ = 49;
  direction_ = 48;
  comboffsetflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combhedgeflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  timecondition_ = 49;
  gtddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volumecondition_ = 49;
  minvolume_ = 0;
  contingentcondition_ = 49;
  stopprice_ = 0;
  forceclosereason_ = 48;
  isautosuspend_ = false;
  businessunit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestid_ = 0;
  orderlocalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  participantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  traderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  installid_ = 0;
  ordersubmitstatus_ = 47;
  notifysequence_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  ordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordersource_ = 48;
  orderstatus_ = 48;
  ordertype_ = 48;
  volumetraded_ = 0;
  volumetotal_ = 0;
  insertdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inserttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suspendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  canceltime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activetraderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clearingpartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequenceno_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  userproductinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userforceclose_ = false;
  activeuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerorderseq_ = 0;
  relativeordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preferred_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  SharedDtor();
}

void Order::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
    delete comboffsetflag_;
  }
  if (combhedgeflag_ != &::google::protobuf::internal::kEmptyString) {
    delete combhedgeflag_;
  }
  if (gtddate_ != &::google::protobuf::internal::kEmptyString) {
    delete gtddate_;
  }
  if (businessunit_ != &::google::protobuf::internal::kEmptyString) {
    delete businessunit_;
  }
  if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderlocalid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (participantid_ != &::google::protobuf::internal::kEmptyString) {
    delete participantid_;
  }
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (traderid_ != &::google::protobuf::internal::kEmptyString) {
    delete traderid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersysid_;
  }
  if (insertdate_ != &::google::protobuf::internal::kEmptyString) {
    delete insertdate_;
  }
  if (inserttime_ != &::google::protobuf::internal::kEmptyString) {
    delete inserttime_;
  }
  if (activetime_ != &::google::protobuf::internal::kEmptyString) {
    delete activetime_;
  }
  if (suspendtime_ != &::google::protobuf::internal::kEmptyString) {
    delete suspendtime_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (canceltime_ != &::google::protobuf::internal::kEmptyString) {
    delete canceltime_;
  }
  if (activetraderid_ != &::google::protobuf::internal::kEmptyString) {
    delete activetraderid_;
  }
  if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
    delete clearingpartid_;
  }
  if (userproductinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete userproductinfo_;
  }
  if (statusmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete statusmsg_;
  }
  if (activeuserid_ != &::google::protobuf::internal::kEmptyString) {
    delete activeuserid_;
  }
  if (relativeordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete relativeordersysid_;
  }
  if (this != default_instance_) {
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    orderpricetype_ = 49;
    direction_ = 48;
    if (has_comboffsetflag()) {
      if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
        comboffsetflag_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_combhedgeflag()) {
      if (combhedgeflag_ != &::google::protobuf::internal::kEmptyString) {
        combhedgeflag_->clear();
      }
    }
    limitprice_ = 0;
    volumetotaloriginal_ = 0;
    timecondition_ = 49;
    if (has_gtddate()) {
      if (gtddate_ != &::google::protobuf::internal::kEmptyString) {
        gtddate_->clear();
      }
    }
    volumecondition_ = 49;
    minvolume_ = 0;
    contingentcondition_ = 49;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    stopprice_ = 0;
    forceclosereason_ = 48;
    isautosuspend_ = false;
    if (has_businessunit()) {
      if (businessunit_ != &::google::protobuf::internal::kEmptyString) {
        businessunit_->clear();
      }
    }
    requestid_ = 0;
    if (has_orderlocalid()) {
      if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
        orderlocalid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_participantid()) {
      if (participantid_ != &::google::protobuf::internal::kEmptyString) {
        participantid_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    if (has_traderid()) {
      if (traderid_ != &::google::protobuf::internal::kEmptyString) {
        traderid_->clear();
      }
    }
    installid_ = 0;
    ordersubmitstatus_ = 47;
    notifysequence_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_ordersysid()) {
      if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
        ordersysid_->clear();
      }
    }
    ordersource_ = 48;
    orderstatus_ = 48;
    ordertype_ = 48;
    volumetraded_ = 0;
    volumetotal_ = 0;
    if (has_insertdate()) {
      if (insertdate_ != &::google::protobuf::internal::kEmptyString) {
        insertdate_->clear();
      }
    }
    if (has_inserttime()) {
      if (inserttime_ != &::google::protobuf::internal::kEmptyString) {
        inserttime_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_activetime()) {
      if (activetime_ != &::google::protobuf::internal::kEmptyString) {
        activetime_->clear();
      }
    }
    if (has_suspendtime()) {
      if (suspendtime_ != &::google::protobuf::internal::kEmptyString) {
        suspendtime_->clear();
      }
    }
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
    if (has_canceltime()) {
      if (canceltime_ != &::google::protobuf::internal::kEmptyString) {
        canceltime_->clear();
      }
    }
    if (has_activetraderid()) {
      if (activetraderid_ != &::google::protobuf::internal::kEmptyString) {
        activetraderid_->clear();
      }
    }
    if (has_clearingpartid()) {
      if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
        clearingpartid_->clear();
      }
    }
    sequenceno_ = 0;
    frontid_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    sessionid_ = 0;
    if (has_userproductinfo()) {
      if (userproductinfo_ != &::google::protobuf::internal::kEmptyString) {
        userproductinfo_->clear();
      }
    }
    if (has_statusmsg()) {
      if (statusmsg_ != &::google::protobuf::internal::kEmptyString) {
        statusmsg_->clear();
      }
    }
    userforceclose_ = false;
    if (has_activeuserid()) {
      if (activeuserid_ != &::google::protobuf::internal::kEmptyString) {
        activeuserid_->clear();
      }
    }
    brokerorderseq_ = 0;
    if (has_relativeordersysid()) {
      if (relativeordersysid_ != &::google::protobuf::internal::kEmptyString) {
        relativeordersysid_->clear();
      }
    }
    preferred_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InvestorID;
        break;
      }

      // required string InvestorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InstrumentID;
        break;
      }

      // required string InstrumentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OrderRef;
        break;
      }

      // required string OrderRef = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UserID;
        break;
      }

      // optional string UserID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_OrderPriceType;
        break;
      }

      // required .trade.OrderPriceTypeType OrderPriceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderPriceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OrderPriceTypeType_IsValid(value)) {
            set_orderpricetype(static_cast< ::trade::OrderPriceTypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Direction;
        break;
      }

      // required .trade.TradeDirectionType Direction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradeDirectionType_IsValid(value)) {
            set_direction(static_cast< ::trade::TradeDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_CombOffsetFlag;
        break;
      }

      // required string CombOffsetFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombOffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comboffsetflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comboffsetflag().data(), this->comboffsetflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CombHedgeFlag;
        break;
      }

      // required string CombHedgeFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombHedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combhedgeflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->combhedgeflag().data(), this->combhedgeflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_LimitPrice;
        break;
      }

      // required double LimitPrice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
          set_has_limitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_VolumeTotalOriginal;
        break;
      }

      // required int32 VolumeTotalOriginal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTotalOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));
          set_has_volumetotaloriginal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_TimeCondition;
        break;
      }

      // required .trade.TimeConditionType TimeCondition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TimeConditionType_IsValid(value)) {
            set_timecondition(static_cast< ::trade::TimeConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_GTDDate;
        break;
      }

      // optional string GTDDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GTDDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gtddate().data(), this->gtddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_VolumeCondition;
        break;
      }

      // required .trade.VolumeConditionType VolumeCondition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::VolumeConditionType_IsValid(value)) {
            set_volumecondition(static_cast< ::trade::VolumeConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_MinVolume;
        break;
      }

      // required int32 MinVolume = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minvolume_)));
          set_has_minvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ContingentCondition;
        break;
      }

      // required .trade.ContingentConditionType ContingentCondition = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContingentCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::ContingentConditionType_IsValid(value)) {
            set_contingentcondition(static_cast< ::trade::ContingentConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_StopPrice;
        break;
      }

      // optional double StopPrice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));
          set_has_stopprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ForceCloseReason;
        break;
      }

      // required .trade.ForceCloseReasonType ForceCloseReason = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ForceCloseReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::ForceCloseReasonType_IsValid(value)) {
            set_forceclosereason(static_cast< ::trade::ForceCloseReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_IsAutoSuspend;
        break;
      }

      // required bool IsAutoSuspend = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoSuspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautosuspend_)));
          set_has_isautosuspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_BusinessUnit;
        break;
      }

      // optional string BusinessUnit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_OrderLocalID;
        break;
      }

      // optional string OrderLocalID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_ParticipantID;
        break;
      }

      // optional string ParticipantID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParticipantID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->participantid().data(), this->participantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_ClientID;
        break;
      }

      // optional string ClientID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_TraderID;
        break;
      }

      // optional string TraderID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->traderid().data(), this->traderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_InstallID;
        break;
      }

      // optional int32 InstallID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstallID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installid_)));
          set_has_installid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_OrderSubmitStatus;
        break;
      }

      // required .trade.OrderSubmitStatusType OrderSubmitStatus = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderSubmitStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OrderSubmitStatusType_IsValid(value)) {
            set_ordersubmitstatus(static_cast< ::trade::OrderSubmitStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_NotifySequence;
        break;
      }

      // optional int32 NotifySequence = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NotifySequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notifysequence_)));
          set_has_notifysequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_OrderSysID;
        break;
      }

      // optional string OrderSysID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_OrderSource;
        break;
      }

      // optional .trade.OrderSourceType OrderSource = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OrderSourceType_IsValid(value)) {
            set_ordersource(static_cast< ::trade::OrderSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_OrderStatus;
        break;
      }

      // required .trade.OrderStatusType OrderStatus = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OrderStatusType_IsValid(value)) {
            set_orderstatus(static_cast< ::trade::OrderStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(35, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_OrderType;
        break;
      }

      // optional .trade.OrderTypeType OrderType = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OrderTypeType_IsValid(value)) {
            set_ordertype(static_cast< ::trade::OrderTypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(36, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_VolumeTraded;
        break;
      }

      // optional int32 VolumeTraded = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetraded_)));
          set_has_volumetraded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_VolumeTotal;
        break;
      }

      // optional int32 VolumeTotal = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotal_)));
          set_has_volumetotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_InsertDate;
        break;
      }

      // optional string InsertDate = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InsertDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->insertdate().data(), this->insertdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_InsertTime;
        break;
      }

      // optional string InsertTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InsertTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inserttime().data(), this->inserttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_ActiveTime;
        break;
      }

      // optional string ActiveTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activetime().data(), this->activetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_SuspendTime;
        break;
      }

      // optional string SuspendTime = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuspendTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suspendtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suspendtime().data(), this->suspendtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_UpdateTime;
        break;
      }

      // optional string UpdateTime = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_CancelTime;
        break;
      }

      // optional string CancelTime = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CancelTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canceltime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->canceltime().data(), this->canceltime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_ActiveTraderID;
        break;
      }

      // optional string ActiveTraderID = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveTraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetraderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activetraderid().data(), this->activetraderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_ClearingPartID;
        break;
      }

      // optional string ClearingPartID = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClearingPartID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearingpartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clearingpartid().data(), this->clearingpartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_SequenceNo;
        break;
      }

      // optional int32 SequenceNo = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SequenceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
          set_has_sequenceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_FrontID;
        break;
      }

      // optional int32 FrontID = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_SessionID;
        break;
      }

      // optional int32 SessionID = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_UserProductInfo;
        break;
      }

      // optional string UserProductInfo = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userproductinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userproductinfo().data(), this->userproductinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_StatusMsg;
        break;
      }

      // optional string StatusMsg = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StatusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statusmsg().data(), this->statusmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_UserForceClose;
        break;
      }

      // optional bool UserForceClose = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserForceClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &userforceclose_)));
          set_has_userforceclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_ActiveUserID;
        break;
      }

      // optional string ActiveUserID = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activeuserid().data(), this->activeuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_BrokerOrderSeq;
        break;
      }

      // optional int32 BrokerOrderSeq = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BrokerOrderSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));
          set_has_brokerorderseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_RelativeOrderSysID;
        break;
      }

      // optional string RelativeOrderSysID = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RelativeOrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativeordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relativeordersysid().data(), this->relativeordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_Preferred;
        break;
      }

      // optional bool Preferred = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Preferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preferred_)));
          set_has_preferred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investorid(), output);
  }

  // required string InstrumentID = 3;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrumentid(), output);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orderref(), output);
  }

  // optional string UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required .trade.OrderPriceTypeType OrderPriceType = 6;
  if (has_orderpricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->orderpricetype(), output);
  }

  // required .trade.TradeDirectionType Direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->direction(), output);
  }

  // required string CombOffsetFlag = 8;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->comboffsetflag(), output);
  }

  // required string CombHedgeFlag = 9;
  if (has_combhedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->combhedgeflag(), output);
  }

  // required double LimitPrice = 10;
  if (has_limitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->limitprice(), output);
  }

  // required int32 VolumeTotalOriginal = 11;
  if (has_volumetotaloriginal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->volumetotaloriginal(), output);
  }

  // required .trade.TimeConditionType TimeCondition = 12;
  if (has_timecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->timecondition(), output);
  }

  // optional string GTDDate = 13;
  if (has_gtddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->gtddate(), output);
  }

  // required .trade.VolumeConditionType VolumeCondition = 14;
  if (has_volumecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->volumecondition(), output);
  }

  // required int32 MinVolume = 15;
  if (has_minvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->minvolume(), output);
  }

  // required .trade.ContingentConditionType ContingentCondition = 16;
  if (has_contingentcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->contingentcondition(), output);
  }

  // optional double StopPrice = 17;
  if (has_stopprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->stopprice(), output);
  }

  // required .trade.ForceCloseReasonType ForceCloseReason = 18;
  if (has_forceclosereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->forceclosereason(), output);
  }

  // required bool IsAutoSuspend = 19;
  if (has_isautosuspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isautosuspend(), output);
  }

  // optional string BusinessUnit = 20;
  if (has_businessunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->businessunit(), output);
  }

  // optional int32 RequestID = 21;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->requestid(), output);
  }

  // optional string OrderLocalID = 22;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->orderlocalid(), output);
  }

  // optional string ExchangeID = 23;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->exchangeid(), output);
  }

  // optional string ParticipantID = 24;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->participantid(), output);
  }

  // optional string ClientID = 25;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->clientid(), output);
  }

  // optional string ExchangeInstID = 26;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->exchangeinstid(), output);
  }

  // optional string TraderID = 27;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->traderid(), output);
  }

  // optional int32 InstallID = 28;
  if (has_installid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->installid(), output);
  }

  // required .trade.OrderSubmitStatusType OrderSubmitStatus = 29;
  if (has_ordersubmitstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->ordersubmitstatus(), output);
  }

  // optional int32 NotifySequence = 30;
  if (has_notifysequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->notifysequence(), output);
  }

  // optional string TradingDay = 31;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->tradingday(), output);
  }

  // optional int32 SettlementID = 32;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->settlementid(), output);
  }

  // optional string OrderSysID = 33;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->ordersysid(), output);
  }

  // optional .trade.OrderSourceType OrderSource = 34;
  if (has_ordersource()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->ordersource(), output);
  }

  // required .trade.OrderStatusType OrderStatus = 35;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->orderstatus(), output);
  }

  // optional .trade.OrderTypeType OrderType = 36;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->ordertype(), output);
  }

  // optional int32 VolumeTraded = 37;
  if (has_volumetraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->volumetraded(), output);
  }

  // optional int32 VolumeTotal = 38;
  if (has_volumetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->volumetotal(), output);
  }

  // optional string InsertDate = 39;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insertdate().data(), this->insertdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->insertdate(), output);
  }

  // optional string InsertTime = 40;
  if (has_inserttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->inserttime(), output);
  }

  // optional string ActiveTime = 41;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetime().data(), this->activetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->activetime(), output);
  }

  // optional string SuspendTime = 42;
  if (has_suspendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suspendtime().data(), this->suspendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->suspendtime(), output);
  }

  // optional string UpdateTime = 43;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->updatetime(), output);
  }

  // optional string CancelTime = 44;
  if (has_canceltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->canceltime(), output);
  }

  // optional string ActiveTraderID = 45;
  if (has_activetraderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetraderid().data(), this->activetraderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->activetraderid(), output);
  }

  // optional string ClearingPartID = 46;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->clearingpartid(), output);
  }

  // optional int32 SequenceNo = 47;
  if (has_sequenceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->sequenceno(), output);
  }

  // optional int32 FrontID = 48;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->frontid(), output);
  }

  // optional int32 SessionID = 49;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->sessionid(), output);
  }

  // optional string UserProductInfo = 50;
  if (has_userproductinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->userproductinfo(), output);
  }

  // optional string StatusMsg = 51;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->statusmsg(), output);
  }

  // optional bool UserForceClose = 52;
  if (has_userforceclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->userforceclose(), output);
  }

  // optional string ActiveUserID = 53;
  if (has_activeuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeuserid().data(), this->activeuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->activeuserid(), output);
  }

  // optional int32 BrokerOrderSeq = 54;
  if (has_brokerorderseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->brokerorderseq(), output);
  }

  // optional string RelativeOrderSysID = 55;
  if (has_relativeordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativeordersysid().data(), this->relativeordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->relativeordersysid(), output);
  }

  // optional bool Preferred = 56;
  if (has_preferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->preferred(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }

  // required string InstrumentID = 3;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrumentid(), target);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderref(), target);
  }

  // optional string UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required .trade.OrderPriceTypeType OrderPriceType = 6;
  if (has_orderpricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->orderpricetype(), target);
  }

  // required .trade.TradeDirectionType Direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->direction(), target);
  }

  // required string CombOffsetFlag = 8;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->comboffsetflag(), target);
  }

  // required string CombHedgeFlag = 9;
  if (has_combhedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->combhedgeflag(), target);
  }

  // required double LimitPrice = 10;
  if (has_limitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->limitprice(), target);
  }

  // required int32 VolumeTotalOriginal = 11;
  if (has_volumetotaloriginal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->volumetotaloriginal(), target);
  }

  // required .trade.TimeConditionType TimeCondition = 12;
  if (has_timecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->timecondition(), target);
  }

  // optional string GTDDate = 13;
  if (has_gtddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->gtddate(), target);
  }

  // required .trade.VolumeConditionType VolumeCondition = 14;
  if (has_volumecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->volumecondition(), target);
  }

  // required int32 MinVolume = 15;
  if (has_minvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->minvolume(), target);
  }

  // required .trade.ContingentConditionType ContingentCondition = 16;
  if (has_contingentcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->contingentcondition(), target);
  }

  // optional double StopPrice = 17;
  if (has_stopprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->stopprice(), target);
  }

  // required .trade.ForceCloseReasonType ForceCloseReason = 18;
  if (has_forceclosereason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->forceclosereason(), target);
  }

  // required bool IsAutoSuspend = 19;
  if (has_isautosuspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isautosuspend(), target);
  }

  // optional string BusinessUnit = 20;
  if (has_businessunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->businessunit(), target);
  }

  // optional int32 RequestID = 21;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->requestid(), target);
  }

  // optional string OrderLocalID = 22;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->orderlocalid(), target);
  }

  // optional string ExchangeID = 23;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->exchangeid(), target);
  }

  // optional string ParticipantID = 24;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->participantid(), target);
  }

  // optional string ClientID = 25;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->clientid(), target);
  }

  // optional string ExchangeInstID = 26;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->exchangeinstid(), target);
  }

  // optional string TraderID = 27;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->traderid(), target);
  }

  // optional int32 InstallID = 28;
  if (has_installid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->installid(), target);
  }

  // required .trade.OrderSubmitStatusType OrderSubmitStatus = 29;
  if (has_ordersubmitstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->ordersubmitstatus(), target);
  }

  // optional int32 NotifySequence = 30;
  if (has_notifysequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->notifysequence(), target);
  }

  // optional string TradingDay = 31;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->tradingday(), target);
  }

  // optional int32 SettlementID = 32;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->settlementid(), target);
  }

  // optional string OrderSysID = 33;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->ordersysid(), target);
  }

  // optional .trade.OrderSourceType OrderSource = 34;
  if (has_ordersource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->ordersource(), target);
  }

  // required .trade.OrderStatusType OrderStatus = 35;
  if (has_orderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->orderstatus(), target);
  }

  // optional .trade.OrderTypeType OrderType = 36;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->ordertype(), target);
  }

  // optional int32 VolumeTraded = 37;
  if (has_volumetraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->volumetraded(), target);
  }

  // optional int32 VolumeTotal = 38;
  if (has_volumetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->volumetotal(), target);
  }

  // optional string InsertDate = 39;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insertdate().data(), this->insertdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->insertdate(), target);
  }

  // optional string InsertTime = 40;
  if (has_inserttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->inserttime(), target);
  }

  // optional string ActiveTime = 41;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetime().data(), this->activetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->activetime(), target);
  }

  // optional string SuspendTime = 42;
  if (has_suspendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suspendtime().data(), this->suspendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->suspendtime(), target);
  }

  // optional string UpdateTime = 43;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->updatetime(), target);
  }

  // optional string CancelTime = 44;
  if (has_canceltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->canceltime(), target);
  }

  // optional string ActiveTraderID = 45;
  if (has_activetraderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetraderid().data(), this->activetraderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->activetraderid(), target);
  }

  // optional string ClearingPartID = 46;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->clearingpartid(), target);
  }

  // optional int32 SequenceNo = 47;
  if (has_sequenceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->sequenceno(), target);
  }

  // optional int32 FrontID = 48;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->frontid(), target);
  }

  // optional int32 SessionID = 49;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->sessionid(), target);
  }

  // optional string UserProductInfo = 50;
  if (has_userproductinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->userproductinfo(), target);
  }

  // optional string StatusMsg = 51;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->statusmsg(), target);
  }

  // optional bool UserForceClose = 52;
  if (has_userforceclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->userforceclose(), target);
  }

  // optional string ActiveUserID = 53;
  if (has_activeuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeuserid().data(), this->activeuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->activeuserid(), target);
  }

  // optional int32 BrokerOrderSeq = 54;
  if (has_brokerorderseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->brokerorderseq(), target);
  }

  // optional string RelativeOrderSysID = 55;
  if (has_relativeordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativeordersysid().data(), this->relativeordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->relativeordersysid(), target);
  }

  // optional bool Preferred = 56;
  if (has_preferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->preferred(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string InvestorID = 2;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // required string InstrumentID = 3;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // required string OrderRef = 4;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }

    // optional string UserID = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .trade.OrderPriceTypeType OrderPriceType = 6;
    if (has_orderpricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderpricetype());
    }

    // required .trade.TradeDirectionType Direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required string CombOffsetFlag = 8;
    if (has_comboffsetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comboffsetflag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string CombHedgeFlag = 9;
    if (has_combhedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combhedgeflag());
    }

    // required double LimitPrice = 10;
    if (has_limitprice()) {
      total_size += 1 + 8;
    }

    // required int32 VolumeTotalOriginal = 11;
    if (has_volumetotaloriginal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetotaloriginal());
    }

    // required .trade.TimeConditionType TimeCondition = 12;
    if (has_timecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timecondition());
    }

    // optional string GTDDate = 13;
    if (has_gtddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gtddate());
    }

    // required .trade.VolumeConditionType VolumeCondition = 14;
    if (has_volumecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->volumecondition());
    }

    // required int32 MinVolume = 15;
    if (has_minvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minvolume());
    }

    // required .trade.ContingentConditionType ContingentCondition = 16;
    if (has_contingentcondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contingentcondition());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double StopPrice = 17;
    if (has_stopprice()) {
      total_size += 2 + 8;
    }

    // required .trade.ForceCloseReasonType ForceCloseReason = 18;
    if (has_forceclosereason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forceclosereason());
    }

    // required bool IsAutoSuspend = 19;
    if (has_isautosuspend()) {
      total_size += 2 + 1;
    }

    // optional string BusinessUnit = 20;
    if (has_businessunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businessunit());
    }

    // optional int32 RequestID = 21;
    if (has_requestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string OrderLocalID = 22;
    if (has_orderlocalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderlocalid());
    }

    // optional string ExchangeID = 23;
    if (has_exchangeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string ParticipantID = 24;
    if (has_participantid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->participantid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string ClientID = 25;
    if (has_clientid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string ExchangeInstID = 26;
    if (has_exchangeinstid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }

    // optional string TraderID = 27;
    if (has_traderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traderid());
    }

    // optional int32 InstallID = 28;
    if (has_installid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installid());
    }

    // required .trade.OrderSubmitStatusType OrderSubmitStatus = 29;
    if (has_ordersubmitstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordersubmitstatus());
    }

    // optional int32 NotifySequence = 30;
    if (has_notifysequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notifysequence());
    }

    // optional string TradingDay = 31;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // optional int32 SettlementID = 32;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string OrderSysID = 33;
    if (has_ordersysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersysid());
    }

    // optional .trade.OrderSourceType OrderSource = 34;
    if (has_ordersource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordersource());
    }

    // required .trade.OrderStatusType OrderStatus = 35;
    if (has_orderstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderstatus());
    }

    // optional .trade.OrderTypeType OrderType = 36;
    if (has_ordertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional int32 VolumeTraded = 37;
    if (has_volumetraded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetraded());
    }

    // optional int32 VolumeTotal = 38;
    if (has_volumetotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetotal());
    }

    // optional string InsertDate = 39;
    if (has_insertdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insertdate());
    }

    // optional string InsertTime = 40;
    if (has_inserttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inserttime());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string ActiveTime = 41;
    if (has_activetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activetime());
    }

    // optional string SuspendTime = 42;
    if (has_suspendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suspendtime());
    }

    // optional string UpdateTime = 43;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

    // optional string CancelTime = 44;
    if (has_canceltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canceltime());
    }

    // optional string ActiveTraderID = 45;
    if (has_activetraderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activetraderid());
    }

    // optional string ClearingPartID = 46;
    if (has_clearingpartid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clearingpartid());
    }

    // optional int32 SequenceNo = 47;
    if (has_sequenceno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequenceno());
    }

    // optional int32 FrontID = 48;
    if (has_frontid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 SessionID = 49;
    if (has_sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string UserProductInfo = 50;
    if (has_userproductinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userproductinfo());
    }

    // optional string StatusMsg = 51;
    if (has_statusmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statusmsg());
    }

    // optional bool UserForceClose = 52;
    if (has_userforceclose()) {
      total_size += 2 + 1;
    }

    // optional string ActiveUserID = 53;
    if (has_activeuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activeuserid());
    }

    // optional int32 BrokerOrderSeq = 54;
    if (has_brokerorderseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brokerorderseq());
    }

    // optional string RelativeOrderSysID = 55;
    if (has_relativeordersysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativeordersysid());
    }

    // optional bool Preferred = 56;
    if (has_preferred()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_orderpricetype()) {
      set_orderpricetype(from.orderpricetype());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_comboffsetflag()) {
      set_comboffsetflag(from.comboffsetflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combhedgeflag()) {
      set_combhedgeflag(from.combhedgeflag());
    }
    if (from.has_limitprice()) {
      set_limitprice(from.limitprice());
    }
    if (from.has_volumetotaloriginal()) {
      set_volumetotaloriginal(from.volumetotaloriginal());
    }
    if (from.has_timecondition()) {
      set_timecondition(from.timecondition());
    }
    if (from.has_gtddate()) {
      set_gtddate(from.gtddate());
    }
    if (from.has_volumecondition()) {
      set_volumecondition(from.volumecondition());
    }
    if (from.has_minvolume()) {
      set_minvolume(from.minvolume());
    }
    if (from.has_contingentcondition()) {
      set_contingentcondition(from.contingentcondition());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stopprice()) {
      set_stopprice(from.stopprice());
    }
    if (from.has_forceclosereason()) {
      set_forceclosereason(from.forceclosereason());
    }
    if (from.has_isautosuspend()) {
      set_isautosuspend(from.isautosuspend());
    }
    if (from.has_businessunit()) {
      set_businessunit(from.businessunit());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_orderlocalid()) {
      set_orderlocalid(from.orderlocalid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_participantid()) {
      set_participantid(from.participantid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_traderid()) {
      set_traderid(from.traderid());
    }
    if (from.has_installid()) {
      set_installid(from.installid());
    }
    if (from.has_ordersubmitstatus()) {
      set_ordersubmitstatus(from.ordersubmitstatus());
    }
    if (from.has_notifysequence()) {
      set_notifysequence(from.notifysequence());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_ordersource()) {
      set_ordersource(from.ordersource());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_volumetraded()) {
      set_volumetraded(from.volumetraded());
    }
    if (from.has_volumetotal()) {
      set_volumetotal(from.volumetotal());
    }
    if (from.has_insertdate()) {
      set_insertdate(from.insertdate());
    }
    if (from.has_inserttime()) {
      set_inserttime(from.inserttime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
    if (from.has_suspendtime()) {
      set_suspendtime(from.suspendtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_canceltime()) {
      set_canceltime(from.canceltime());
    }
    if (from.has_activetraderid()) {
      set_activetraderid(from.activetraderid());
    }
    if (from.has_clearingpartid()) {
      set_clearingpartid(from.clearingpartid());
    }
    if (from.has_sequenceno()) {
      set_sequenceno(from.sequenceno());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userproductinfo()) {
      set_userproductinfo(from.userproductinfo());
    }
    if (from.has_statusmsg()) {
      set_statusmsg(from.statusmsg());
    }
    if (from.has_userforceclose()) {
      set_userforceclose(from.userforceclose());
    }
    if (from.has_activeuserid()) {
      set_activeuserid(from.activeuserid());
    }
    if (from.has_brokerorderseq()) {
      set_brokerorderseq(from.brokerorderseq());
    }
    if (from.has_relativeordersysid()) {
      set_relativeordersysid(from.relativeordersysid());
    }
    if (from.has_preferred()) {
      set_preferred(from.preferred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x1006efef) != 0x1006efef) return false;
  if ((_has_bits_[1] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(orderref_, other->orderref_);
    std::swap(userid_, other->userid_);
    std::swap(orderpricetype_, other->orderpricetype_);
    std::swap(direction_, other->direction_);
    std::swap(comboffsetflag_, other->comboffsetflag_);
    std::swap(combhedgeflag_, other->combhedgeflag_);
    std::swap(limitprice_, other->limitprice_);
    std::swap(volumetotaloriginal_, other->volumetotaloriginal_);
    std::swap(timecondition_, other->timecondition_);
    std::swap(gtddate_, other->gtddate_);
    std::swap(volumecondition_, other->volumecondition_);
    std::swap(minvolume_, other->minvolume_);
    std::swap(contingentcondition_, other->contingentcondition_);
    std::swap(stopprice_, other->stopprice_);
    std::swap(forceclosereason_, other->forceclosereason_);
    std::swap(isautosuspend_, other->isautosuspend_);
    std::swap(businessunit_, other->businessunit_);
    std::swap(requestid_, other->requestid_);
    std::swap(orderlocalid_, other->orderlocalid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(participantid_, other->participantid_);
    std::swap(clientid_, other->clientid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(traderid_, other->traderid_);
    std::swap(installid_, other->installid_);
    std::swap(ordersubmitstatus_, other->ordersubmitstatus_);
    std::swap(notifysequence_, other->notifysequence_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(ordersysid_, other->ordersysid_);
    std::swap(ordersource_, other->ordersource_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(volumetraded_, other->volumetraded_);
    std::swap(volumetotal_, other->volumetotal_);
    std::swap(insertdate_, other->insertdate_);
    std::swap(inserttime_, other->inserttime_);
    std::swap(activetime_, other->activetime_);
    std::swap(suspendtime_, other->suspendtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(canceltime_, other->canceltime_);
    std::swap(activetraderid_, other->activetraderid_);
    std::swap(clearingpartid_, other->clearingpartid_);
    std::swap(sequenceno_, other->sequenceno_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(userproductinfo_, other->userproductinfo_);
    std::swap(statusmsg_, other->statusmsg_);
    std::swap(userforceclose_, other->userforceclose_);
    std::swap(activeuserid_, other->activeuserid_);
    std::swap(brokerorderseq_, other->brokerorderseq_);
    std::swap(relativeordersysid_, other->relativeordersysid_);
    std::swap(preferred_, other->preferred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trade::kBrokerIDFieldNumber;
const int Trade::kInvestorIDFieldNumber;
const int Trade::kInstrumentIDFieldNumber;
const int Trade::kOrderRefFieldNumber;
const int Trade::kUserIDFieldNumber;
const int Trade::kExchangeIDFieldNumber;
const int Trade::kTradeIDFieldNumber;
const int Trade::kDirectionFieldNumber;
const int Trade::kOrderSysIDFieldNumber;
const int Trade::kParticipantIDFieldNumber;
const int Trade::kClientIDFieldNumber;
const int Trade::kTradingRoleFieldNumber;
const int Trade::kExchangeInstIDFieldNumber;
const int Trade::kOffsetFlagFieldNumber;
const int Trade::kHedgeFlagFieldNumber;
const int Trade::kPriceFieldNumber;
const int Trade::kVolumeFieldNumber;
const int Trade::kTradeDateFieldNumber;
const int Trade::kTradeTimeFieldNumber;
const int Trade::kTradeTypeFieldNumber;
const int Trade::kPriceSourceFieldNumber;
const int Trade::kTraderIDFieldNumber;
const int Trade::kOrderLocalIDFieldNumber;
const int Trade::kClearingPartIDFieldNumber;
const int Trade::kBusinessUnitFieldNumber;
const int Trade::kSequenceNoFieldNumber;
const int Trade::kTradingDayFieldNumber;
const int Trade::kSettlementIDFieldNumber;
const int Trade::kBrokerOrderSeqFieldNumber;
#endif  // !_MSC_VER

Trade::Trade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trade::InitAsDefaultInstance() {
}

Trade::Trade(const Trade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trade::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = 48;
  ordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  participantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradingrole_ = 49;
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offsetflag_ = 48;
  hedgeflag_ = 49;
  price_ = 0;
  volume_ = 0;
  tradedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradetype_ = 48;
  pricesource_ = 48;
  traderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderlocalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clearingpartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  businessunit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequenceno_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  brokerorderseq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trade::~Trade() {
  SharedDtor();
}

void Trade::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (tradeid_ != &::google::protobuf::internal::kEmptyString) {
    delete tradeid_;
  }
  if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersysid_;
  }
  if (participantid_ != &::google::protobuf::internal::kEmptyString) {
    delete participantid_;
  }
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (tradedate_ != &::google::protobuf::internal::kEmptyString) {
    delete tradedate_;
  }
  if (tradetime_ != &::google::protobuf::internal::kEmptyString) {
    delete tradetime_;
  }
  if (traderid_ != &::google::protobuf::internal::kEmptyString) {
    delete traderid_;
  }
  if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderlocalid_;
  }
  if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
    delete clearingpartid_;
  }
  if (businessunit_ != &::google::protobuf::internal::kEmptyString) {
    delete businessunit_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void Trade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trade_descriptor_;
}

const Trade& Trade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

Trade* Trade::default_instance_ = NULL;

Trade* Trade::New() const {
  return new Trade;
}

void Trade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_tradeid()) {
      if (tradeid_ != &::google::protobuf::internal::kEmptyString) {
        tradeid_->clear();
      }
    }
    direction_ = 48;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ordersysid()) {
      if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
        ordersysid_->clear();
      }
    }
    if (has_participantid()) {
      if (participantid_ != &::google::protobuf::internal::kEmptyString) {
        participantid_->clear();
      }
    }
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    tradingrole_ = 49;
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    offsetflag_ = 48;
    hedgeflag_ = 49;
    price_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    volume_ = 0;
    if (has_tradedate()) {
      if (tradedate_ != &::google::protobuf::internal::kEmptyString) {
        tradedate_->clear();
      }
    }
    if (has_tradetime()) {
      if (tradetime_ != &::google::protobuf::internal::kEmptyString) {
        tradetime_->clear();
      }
    }
    tradetype_ = 48;
    pricesource_ = 48;
    if (has_traderid()) {
      if (traderid_ != &::google::protobuf::internal::kEmptyString) {
        traderid_->clear();
      }
    }
    if (has_orderlocalid()) {
      if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
        orderlocalid_->clear();
      }
    }
    if (has_clearingpartid()) {
      if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
        clearingpartid_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_businessunit()) {
      if (businessunit_ != &::google::protobuf::internal::kEmptyString) {
        businessunit_->clear();
      }
    }
    sequenceno_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    brokerorderseq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InvestorID;
        break;
      }

      // required string InvestorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InstrumentID;
        break;
      }

      // required string InstrumentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OrderRef;
        break;
      }

      // required string OrderRef = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UserID;
        break;
      }

      // required string UserID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ExchangeID;
        break;
      }

      // required string ExchangeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_TradeID;
        break;
      }

      // required string TradeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradeid().data(), this->tradeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Direction;
        break;
      }

      // required .trade.TradeDirectionType Direction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradeDirectionType_IsValid(value)) {
            set_direction(static_cast< ::trade::TradeDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_OrderSysID;
        break;
      }

      // required string OrderSysID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ParticipantID;
        break;
      }

      // required string ParticipantID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParticipantID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->participantid().data(), this->participantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ClientID;
        break;
      }

      // required string ClientID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_TradingRole;
        break;
      }

      // required .trade.TradingRoleType TradingRole = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradingRole:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradingRoleType_IsValid(value)) {
            set_tradingrole(static_cast< ::trade::TradingRoleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ExchangeInstID;
        break;
      }

      // required string ExchangeInstID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_OffsetFlag;
        break;
      }

      // required .trade.OffsetFlagType OffsetFlag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OffsetFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::OffsetFlagType_IsValid(value)) {
            set_offsetflag(static_cast< ::trade::OffsetFlagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_HedgeFlag;
        break;
      }

      // required .trade.HedgeFlagType HedgeFlag = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HedgeFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::HedgeFlagType_IsValid(value)) {
            set_hedgeflag(static_cast< ::trade::HedgeFlagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_Price;
        break;
      }

      // required double Price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Volume;
        break;
      }

      // required int32 Volume = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_TradeDate;
        break;
      }

      // required string TradeDate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradedate().data(), this->tradedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_TradeTime;
        break;
      }

      // required string TradeTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradetime().data(), this->tradetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_TradeType;
        break;
      }

      // required .trade.TradeTypeType TradeType = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::TradeTypeType_IsValid(value)) {
            set_tradetype(static_cast< ::trade::TradeTypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_PriceSource;
        break;
      }

      // required .trade.PriceSourceType PriceSource = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PriceSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::PriceSourceType_IsValid(value)) {
            set_pricesource(static_cast< ::trade::PriceSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_TraderID;
        break;
      }

      // required string TraderID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->traderid().data(), this->traderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_OrderLocalID;
        break;
      }

      // required string OrderLocalID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_ClearingPartID;
        break;
      }

      // required string ClearingPartID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClearingPartID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearingpartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clearingpartid().data(), this->clearingpartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_BusinessUnit;
        break;
      }

      // required string BusinessUnit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_SequenceNo;
        break;
      }

      // required int32 SequenceNo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SequenceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
          set_has_sequenceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_TradingDay;
        break;
      }

      // required string TradingDay = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_SettlementID;
        break;
      }

      // required int32 SettlementID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_BrokerOrderSeq;
        break;
      }

      // required int32 BrokerOrderSeq = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BrokerOrderSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));
          set_has_brokerorderseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investorid(), output);
  }

  // required string InstrumentID = 3;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrumentid(), output);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orderref(), output);
  }

  // required string UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required string ExchangeID = 6;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->exchangeid(), output);
  }

  // required string TradeID = 7;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tradeid(), output);
  }

  // required .trade.TradeDirectionType Direction = 8;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->direction(), output);
  }

  // required string OrderSysID = 9;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ordersysid(), output);
  }

  // required string ParticipantID = 10;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->participantid(), output);
  }

  // required string ClientID = 11;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->clientid(), output);
  }

  // required .trade.TradingRoleType TradingRole = 12;
  if (has_tradingrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->tradingrole(), output);
  }

  // required string ExchangeInstID = 13;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->exchangeinstid(), output);
  }

  // required .trade.OffsetFlagType OffsetFlag = 14;
  if (has_offsetflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->offsetflag(), output);
  }

  // required .trade.HedgeFlagType HedgeFlag = 15;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->hedgeflag(), output);
  }

  // required double Price = 16;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->price(), output);
  }

  // required int32 Volume = 17;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->volume(), output);
  }

  // required string TradeDate = 18;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->tradedate(), output);
  }

  // required string TradeTime = 19;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->tradetime(), output);
  }

  // required .trade.TradeTypeType TradeType = 20;
  if (has_tradetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->tradetype(), output);
  }

  // required .trade.PriceSourceType PriceSource = 21;
  if (has_pricesource()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->pricesource(), output);
  }

  // required string TraderID = 22;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->traderid(), output);
  }

  // required string OrderLocalID = 23;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->orderlocalid(), output);
  }

  // required string ClearingPartID = 24;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->clearingpartid(), output);
  }

  // required string BusinessUnit = 25;
  if (has_businessunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->businessunit(), output);
  }

  // required int32 SequenceNo = 26;
  if (has_sequenceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->sequenceno(), output);
  }

  // required string TradingDay = 27;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->tradingday(), output);
  }

  // required int32 SettlementID = 28;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->settlementid(), output);
  }

  // required int32 BrokerOrderSeq = 29;
  if (has_brokerorderseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->brokerorderseq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }

  // required string InstrumentID = 3;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrumentid(), target);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderref(), target);
  }

  // required string UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required string ExchangeID = 6;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->exchangeid(), target);
  }

  // required string TradeID = 7;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tradeid(), target);
  }

  // required .trade.TradeDirectionType Direction = 8;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->direction(), target);
  }

  // required string OrderSysID = 9;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ordersysid(), target);
  }

  // required string ParticipantID = 10;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->participantid(), target);
  }

  // required string ClientID = 11;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientid(), target);
  }

  // required .trade.TradingRoleType TradingRole = 12;
  if (has_tradingrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->tradingrole(), target);
  }

  // required string ExchangeInstID = 13;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->exchangeinstid(), target);
  }

  // required .trade.OffsetFlagType OffsetFlag = 14;
  if (has_offsetflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->offsetflag(), target);
  }

  // required .trade.HedgeFlagType HedgeFlag = 15;
  if (has_hedgeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->hedgeflag(), target);
  }

  // required double Price = 16;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->price(), target);
  }

  // required int32 Volume = 17;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->volume(), target);
  }

  // required string TradeDate = 18;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->tradedate(), target);
  }

  // required string TradeTime = 19;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->tradetime(), target);
  }

  // required .trade.TradeTypeType TradeType = 20;
  if (has_tradetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->tradetype(), target);
  }

  // required .trade.PriceSourceType PriceSource = 21;
  if (has_pricesource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->pricesource(), target);
  }

  // required string TraderID = 22;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->traderid(), target);
  }

  // required string OrderLocalID = 23;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->orderlocalid(), target);
  }

  // required string ClearingPartID = 24;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->clearingpartid(), target);
  }

  // required string BusinessUnit = 25;
  if (has_businessunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->businessunit(), target);
  }

  // required int32 SequenceNo = 26;
  if (has_sequenceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->sequenceno(), target);
  }

  // required string TradingDay = 27;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->tradingday(), target);
  }

  // required int32 SettlementID = 28;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->settlementid(), target);
  }

  // required int32 BrokerOrderSeq = 29;
  if (has_brokerorderseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->brokerorderseq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string InvestorID = 2;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // required string InstrumentID = 3;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // required string OrderRef = 4;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }

    // required string UserID = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string ExchangeID = 6;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required string TradeID = 7;
    if (has_tradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeid());
    }

    // required .trade.TradeDirectionType Direction = 8;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string OrderSysID = 9;
    if (has_ordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersysid());
    }

    // required string ParticipantID = 10;
    if (has_participantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->participantid());
    }

    // required string ClientID = 11;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // required .trade.TradingRoleType TradingRole = 12;
    if (has_tradingrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradingrole());
    }

    // required string ExchangeInstID = 13;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }

    // required .trade.OffsetFlagType OffsetFlag = 14;
    if (has_offsetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->offsetflag());
    }

    // required .trade.HedgeFlagType HedgeFlag = 15;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hedgeflag());
    }

    // required double Price = 16;
    if (has_price()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 Volume = 17;
    if (has_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // required string TradeDate = 18;
    if (has_tradedate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradedate());
    }

    // required string TradeTime = 19;
    if (has_tradetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradetime());
    }

    // required .trade.TradeTypeType TradeType = 20;
    if (has_tradetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradetype());
    }

    // required .trade.PriceSourceType PriceSource = 21;
    if (has_pricesource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricesource());
    }

    // required string TraderID = 22;
    if (has_traderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traderid());
    }

    // required string OrderLocalID = 23;
    if (has_orderlocalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderlocalid());
    }

    // required string ClearingPartID = 24;
    if (has_clearingpartid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clearingpartid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string BusinessUnit = 25;
    if (has_businessunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businessunit());
    }

    // required int32 SequenceNo = 26;
    if (has_sequenceno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequenceno());
    }

    // required string TradingDay = 27;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required int32 SettlementID = 28;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // required int32 BrokerOrderSeq = 29;
    if (has_brokerorderseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brokerorderseq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_participantid()) {
      set_participantid(from.participantid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_tradingrole()) {
      set_tradingrole(from.tradingrole());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_offsetflag()) {
      set_offsetflag(from.offsetflag());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_tradedate()) {
      set_tradedate(from.tradedate());
    }
    if (from.has_tradetime()) {
      set_tradetime(from.tradetime());
    }
    if (from.has_tradetype()) {
      set_tradetype(from.tradetype());
    }
    if (from.has_pricesource()) {
      set_pricesource(from.pricesource());
    }
    if (from.has_traderid()) {
      set_traderid(from.traderid());
    }
    if (from.has_orderlocalid()) {
      set_orderlocalid(from.orderlocalid());
    }
    if (from.has_clearingpartid()) {
      set_clearingpartid(from.clearingpartid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_businessunit()) {
      set_businessunit(from.businessunit());
    }
    if (from.has_sequenceno()) {
      set_sequenceno(from.sequenceno());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_brokerorderseq()) {
      set_brokerorderseq(from.brokerorderseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;

  return true;
}

void Trade::Swap(Trade* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(orderref_, other->orderref_);
    std::swap(userid_, other->userid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(tradeid_, other->tradeid_);
    std::swap(direction_, other->direction_);
    std::swap(ordersysid_, other->ordersysid_);
    std::swap(participantid_, other->participantid_);
    std::swap(clientid_, other->clientid_);
    std::swap(tradingrole_, other->tradingrole_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(offsetflag_, other->offsetflag_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(tradedate_, other->tradedate_);
    std::swap(tradetime_, other->tradetime_);
    std::swap(tradetype_, other->tradetype_);
    std::swap(pricesource_, other->pricesource_);
    std::swap(traderid_, other->traderid_);
    std::swap(orderlocalid_, other->orderlocalid_);
    std::swap(clearingpartid_, other->clearingpartid_);
    std::swap(businessunit_, other->businessunit_);
    std::swap(sequenceno_, other->sequenceno_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(brokerorderseq_, other->brokerorderseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trade_descriptor_;
  metadata.reflection = Trade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputOrderAction::kBrokerIDFieldNumber;
const int InputOrderAction::kInvestorIDFieldNumber;
const int InputOrderAction::kOrderActionRefFieldNumber;
const int InputOrderAction::kOrderRefFieldNumber;
const int InputOrderAction::kRequestIDFieldNumber;
const int InputOrderAction::kFrontIDFieldNumber;
const int InputOrderAction::kSessionIDFieldNumber;
const int InputOrderAction::kExchangeIDFieldNumber;
const int InputOrderAction::kOrderSysIDFieldNumber;
const int InputOrderAction::kActionFlagFieldNumber;
const int InputOrderAction::kLimitPriceFieldNumber;
const int InputOrderAction::kVolumeChangeFieldNumber;
const int InputOrderAction::kUserIDFieldNumber;
const int InputOrderAction::kInstrumentIDFieldNumber;
#endif  // !_MSC_VER

InputOrderAction::InputOrderAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InputOrderAction::InitAsDefaultInstance() {
}

InputOrderAction::InputOrderAction(const InputOrderAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InputOrderAction::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderactionref_ = 0;
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestid_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actionflag_ = 48;
  limitprice_ = 0;
  volumechange_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputOrderAction::~InputOrderAction() {
  SharedDtor();
}

void InputOrderAction::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersysid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (this != default_instance_) {
  }
}

void InputOrderAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputOrderAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputOrderAction_descriptor_;
}

const InputOrderAction& InputOrderAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

InputOrderAction* InputOrderAction::default_instance_ = NULL;

InputOrderAction* InputOrderAction::New() const {
  return new InputOrderAction;
}

void InputOrderAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    orderactionref_ = 0;
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    requestid_ = 0;
    frontid_ = 0;
    sessionid_ = 0;
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ordersysid()) {
      if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
        ordersysid_->clear();
      }
    }
    actionflag_ = 48;
    limitprice_ = 0;
    volumechange_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputOrderAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InvestorID;
        break;
      }

      // required string InvestorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderActionRef;
        break;
      }

      // required int32 OrderActionRef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderActionRef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderactionref_)));
          set_has_orderactionref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OrderRef;
        break;
      }

      // required string OrderRef = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RequestID;
        break;
      }

      // required int32 RequestID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FrontID;
        break;
      }

      // required int32 FrontID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SessionID;
        break;
      }

      // required int32 SessionID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ExchangeID;
        break;
      }

      // required string ExchangeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_OrderSysID;
        break;
      }

      // required string OrderSysID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ActionFlag;
        break;
      }

      // required .trade.ActionFlagType ActionFlag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::ActionFlagType_IsValid(value)) {
            set_actionflag(static_cast< ::trade::ActionFlagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_LimitPrice;
        break;
      }

      // required double LimitPrice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
          set_has_limitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_VolumeChange;
        break;
      }

      // required int32 VolumeChange = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumechange_)));
          set_has_volumechange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_UserID;
        break;
      }

      // required string UserID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_InstrumentID;
        break;
      }

      // required string InstrumentID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InputOrderAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investorid(), output);
  }

  // required int32 OrderActionRef = 3;
  if (has_orderactionref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderactionref(), output);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orderref(), output);
  }

  // required int32 RequestID = 5;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->requestid(), output);
  }

  // required int32 FrontID = 6;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->frontid(), output);
  }

  // required int32 SessionID = 7;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sessionid(), output);
  }

  // required string ExchangeID = 8;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->exchangeid(), output);
  }

  // required string OrderSysID = 9;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ordersysid(), output);
  }

  // required .trade.ActionFlagType ActionFlag = 10;
  if (has_actionflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->actionflag(), output);
  }

  // required double LimitPrice = 11;
  if (has_limitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->limitprice(), output);
  }

  // required int32 VolumeChange = 12;
  if (has_volumechange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volumechange(), output);
  }

  // required string UserID = 13;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->userid(), output);
  }

  // required string InstrumentID = 14;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->instrumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InputOrderAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }

  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }

  // required int32 OrderActionRef = 3;
  if (has_orderactionref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderactionref(), target);
  }

  // required string OrderRef = 4;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderref(), target);
  }

  // required int32 RequestID = 5;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->requestid(), target);
  }

  // required int32 FrontID = 6;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->frontid(), target);
  }

  // required int32 SessionID = 7;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sessionid(), target);
  }

  // required string ExchangeID = 8;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->exchangeid(), target);
  }

  // required string OrderSysID = 9;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ordersysid(), target);
  }

  // required .trade.ActionFlagType ActionFlag = 10;
  if (has_actionflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->actionflag(), target);
  }

  // required double LimitPrice = 11;
  if (has_limitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->limitprice(), target);
  }

  // required int32 VolumeChange = 12;
  if (has_volumechange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volumechange(), target);
  }

  // required string UserID = 13;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->userid(), target);
  }

  // required string InstrumentID = 14;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->instrumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InputOrderAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string InvestorID = 2;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // required int32 OrderActionRef = 3;
    if (has_orderactionref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderactionref());
    }

    // required string OrderRef = 4;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }

    // required int32 RequestID = 5;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 FrontID = 6;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }

    // required int32 SessionID = 7;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // required string ExchangeID = 8;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string OrderSysID = 9;
    if (has_ordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersysid());
    }

    // required .trade.ActionFlagType ActionFlag = 10;
    if (has_actionflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actionflag());
    }

    // required double LimitPrice = 11;
    if (has_limitprice()) {
      total_size += 1 + 8;
    }

    // required int32 VolumeChange = 12;
    if (has_volumechange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumechange());
    }

    // required string UserID = 13;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string InstrumentID = 14;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputOrderAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputOrderAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputOrderAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputOrderAction::MergeFrom(const InputOrderAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_orderactionref()) {
      set_orderactionref(from.orderactionref());
    }
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_actionflag()) {
      set_actionflag(from.actionflag());
    }
    if (from.has_limitprice()) {
      set_limitprice(from.limitprice());
    }
    if (from.has_volumechange()) {
      set_volumechange(from.volumechange());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputOrderAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOrderAction::CopyFrom(const InputOrderAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOrderAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void InputOrderAction::Swap(InputOrderAction* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(orderactionref_, other->orderactionref_);
    std::swap(orderref_, other->orderref_);
    std::swap(requestid_, other->requestid_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(ordersysid_, other->ordersysid_);
    std::swap(actionflag_, other->actionflag_);
    std::swap(limitprice_, other->limitprice_);
    std::swap(volumechange_, other->volumechange_);
    std::swap(userid_, other->userid_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputOrderAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputOrderAction_descriptor_;
  metadata.reflection = InputOrderAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiLegOrder::kOrderIdFieldNumber;
const int MultiLegOrder::kPortfolioIdFieldNumber;
const int MultiLegOrder::kQuantityFieldNumber;
const int MultiLegOrder::kLegsFieldNumber;
const int MultiLegOrder::kOpenOrderIdFieldNumber;
const int MultiLegOrder::kOpenDateFieldNumber;
const int MultiLegOrder::kReasonFieldNumber;
const int MultiLegOrder::kHasWarnFieldNumber;
const int MultiLegOrder::kStatusMsgFieldNumber;
const int MultiLegOrder::kOffsetFieldNumber;
#endif  // !_MSC_VER

MultiLegOrder::MultiLegOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiLegOrder::InitAsDefaultInstance() {
}

MultiLegOrder::MultiLegOrder(const MultiLegOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiLegOrder::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portfolioid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  openorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = 0;
  haswarn_ = false;
  statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiLegOrder::~MultiLegOrder() {
  SharedDtor();
}

void MultiLegOrder::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (portfolioid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfolioid_;
  }
  if (openorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete openorderid_;
  }
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (statusmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete statusmsg_;
  }
  if (this != default_instance_) {
  }
}

void MultiLegOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLegOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLegOrder_descriptor_;
}

const MultiLegOrder& MultiLegOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

MultiLegOrder* MultiLegOrder::default_instance_ = NULL;

MultiLegOrder* MultiLegOrder::New() const {
  return new MultiLegOrder;
}

void MultiLegOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    if (has_portfolioid()) {
      if (portfolioid_ != &::google::protobuf::internal::kEmptyString) {
        portfolioid_->clear();
      }
    }
    quantity_ = 0;
    if (has_openorderid()) {
      if (openorderid_ != &::google::protobuf::internal::kEmptyString) {
        openorderid_->clear();
      }
    }
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
    reason_ = 0;
    haswarn_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_statusmsg()) {
      if (statusmsg_ != &::google::protobuf::internal::kEmptyString) {
        statusmsg_->clear();
      }
    }
    offset_ = 0;
  }
  legs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiLegOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string OrderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PortfolioId;
        break;
      }

      // required string PortfolioId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PortfolioId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfolioid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfolioid().data(), this->portfolioid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Quantity;
        break;
      }

      // required int32 Quantity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Legs;
        break;
      }

      // repeated .trade.Order Legs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Legs;
        if (input->ExpectTag(42)) goto parse_OpenOrderId;
        break;
      }

      // required string OpenOrderId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenOrderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openorderid().data(), this->openorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_OpenDate;
        break;
      }

      // required string OpenDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Reason;
        break;
      }

      // required .trade.SubmitReason Reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::SubmitReason_IsValid(value)) {
            set_reason(static_cast< ::trade::SubmitReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_HasWarn;
        break;
      }

      // required bool HasWarn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasWarn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haswarn_)));
          set_has_haswarn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_StatusMsg;
        break;
      }

      // required string StatusMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StatusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statusmsg().data(), this->statusmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Offset;
        break;
      }

      // required .trade.MlOrderOffset Offset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Offset:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trade::MlOrderOffset_IsValid(value)) {
            set_offset(static_cast< ::trade::MlOrderOffset >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiLegOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string OrderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // required string PortfolioId = 2;
  if (has_portfolioid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfolioid().data(), this->portfolioid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->portfolioid(), output);
  }

  // required int32 Quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quantity(), output);
  }

  // repeated .trade.Order Legs = 4;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->legs(i), output);
  }

  // required string OpenOrderId = 5;
  if (has_openorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openorderid().data(), this->openorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->openorderid(), output);
  }

  // required string OpenDate = 6;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opendate(), output);
  }

  // required .trade.SubmitReason Reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  // required bool HasWarn = 8;
  if (has_haswarn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->haswarn(), output);
  }

  // required string StatusMsg = 9;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->statusmsg(), output);
  }

  // required .trade.MlOrderOffset Offset = 10;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiLegOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string OrderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // required string PortfolioId = 2;
  if (has_portfolioid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfolioid().data(), this->portfolioid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->portfolioid(), target);
  }

  // required int32 Quantity = 3;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quantity(), target);
  }

  // repeated .trade.Order Legs = 4;
  for (int i = 0; i < this->legs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->legs(i), target);
  }

  // required string OpenOrderId = 5;
  if (has_openorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openorderid().data(), this->openorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->openorderid(), target);
  }

  // required string OpenDate = 6;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->opendate(), target);
  }

  // required .trade.SubmitReason Reason = 7;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  // required bool HasWarn = 8;
  if (has_haswarn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->haswarn(), target);
  }

  // required string StatusMsg = 9;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->statusmsg(), target);
  }

  // required .trade.MlOrderOffset Offset = 10;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiLegOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string OrderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required string PortfolioId = 2;
    if (has_portfolioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfolioid());
    }

    // required int32 Quantity = 3;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // required string OpenOrderId = 5;
    if (has_openorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openorderid());
    }

    // required string OpenDate = 6;
    if (has_opendate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }

    // required .trade.SubmitReason Reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

    // required bool HasWarn = 8;
    if (has_haswarn()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string StatusMsg = 9;
    if (has_statusmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statusmsg());
    }

    // required .trade.MlOrderOffset Offset = 10;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());
    }

  }
  // repeated .trade.Order Legs = 4;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiLegOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiLegOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiLegOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiLegOrder::MergeFrom(const MultiLegOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  legs_.MergeFrom(from.legs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_portfolioid()) {
      set_portfolioid(from.portfolioid());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_openorderid()) {
      set_openorderid(from.openorderid());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_haswarn()) {
      set_haswarn(from.haswarn());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_statusmsg()) {
      set_statusmsg(from.statusmsg());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiLegOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiLegOrder::CopyFrom(const MultiLegOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLegOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003f7) != 0x000003f7) return false;

  for (int i = 0; i < legs_size(); i++) {
    if (!this->legs(i).IsInitialized()) return false;
  }
  return true;
}

void MultiLegOrder::Swap(MultiLegOrder* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(portfolioid_, other->portfolioid_);
    std::swap(quantity_, other->quantity_);
    legs_.Swap(&other->legs_);
    std::swap(openorderid_, other->openorderid_);
    std::swap(opendate_, other->opendate_);
    std::swap(reason_, other->reason_);
    std::swap(haswarn_, other->haswarn_);
    std::swap(statusmsg_, other->statusmsg_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiLegOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLegOrder_descriptor_;
  metadata.reflection = MultiLegOrder_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace trade

// @@protoc_insertion_point(global_scope)
