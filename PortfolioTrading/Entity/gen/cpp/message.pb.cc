// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace entity {

namespace {

const ::google::protobuf::Descriptor* StringParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortfolioItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortfolioItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegQuoteParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegQuoteParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PorfOpenPosiParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PorfOpenPosiParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClosePositionParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClosePositionParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegOrderUpdateParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegOrderUpdateParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArbitrageStrategySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArbitrageStrategySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePosiStrategySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePosiStrategySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyStrategyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyStrategyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioSwitchParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioSwitchParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioPreferredLegParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioPreferredLegParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  StringParam_descriptor_ = file->message_type(0);
  static const int StringParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, data_),
  };
  StringParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringParam_descriptor_,
      StringParam::default_instance_,
      StringParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringParam));
  IntParam_descriptor_ = file->message_type(1);
  static const int IntParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, data_),
  };
  IntParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntParam_descriptor_,
      IntParam::default_instance_,
      IntParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntParam));
  LegItem_descriptor_ = file->message_type(2);
  static const int LegItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ispreferred_),
  };
  LegItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegItem_descriptor_,
      LegItem::default_instance_,
      LegItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegItem));
  PortfolioItem_descriptor_ = file->message_type(3);
  static const int PortfolioItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, autoopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, autoclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, legs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, strategyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, strategydata_),
  };
  PortfolioItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortfolioItem_descriptor_,
      PortfolioItem::default_instance_,
      PortfolioItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortfolioItem));
  ConnectParam_descriptor_ = file->message_type(4);
  static const int ConnectParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, quoteaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, streamfolder_),
  };
  ConnectParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectParam_descriptor_,
      ConnectParam::default_instance_,
      ConnectParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectParam));
  OperationReturn_descriptor_ = file->message_type(5);
  static const int OperationReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, errormessage_),
  };
  OperationReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationReturn_descriptor_,
      OperationReturn::default_instance_,
      OperationReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationReturn));
  LoginParam_descriptor_ = file->message_type(6);
  static const int LoginParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, password_),
  };
  LoginParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginParam_descriptor_,
      LoginParam::default_instance_,
      LoginParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginParam));
  RegQuoteParam_descriptor_ = file->message_type(7);
  static const int RegQuoteParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, symbols_),
  };
  RegQuoteParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegQuoteParam_descriptor_,
      RegQuoteParam::default_instance_,
      RegQuoteParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegQuoteParam));
  PorfOpenPosiParam_descriptor_ = file->message_type(8);
  static const int PorfOpenPosiParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, quantity_),
  };
  PorfOpenPosiParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PorfOpenPosiParam_descriptor_,
      PorfOpenPosiParam::default_instance_,
      PorfOpenPosiParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PorfOpenPosiParam));
  ClosePositionParam_descriptor_ = file->message_type(9);
  static const int ClosePositionParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, multilegorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, legordref_),
  };
  ClosePositionParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClosePositionParam_descriptor_,
      ClosePositionParam::default_instance_,
      ClosePositionParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClosePositionParam));
  LegOrderUpdateParam_descriptor_ = file->message_type(10);
  static const int LegOrderUpdateParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, multilegorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, legorderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, legorder_),
  };
  LegOrderUpdateParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegOrderUpdateParam_descriptor_,
      LegOrderUpdateParam::default_instance_,
      LegOrderUpdateParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegOrderUpdateParam));
  ArbitrageStrategySettings_descriptor_ = file->message_type(11);
  static const int ArbitrageStrategySettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, openposithreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stopgainthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stoplossthreshold_),
  };
  ArbitrageStrategySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArbitrageStrategySettings_descriptor_,
      ArbitrageStrategySettings::default_instance_,
      ArbitrageStrategySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArbitrageStrategySettings));
  ChangePosiStrategySettings_descriptor_ = file->message_type(12);
  static const int ChangePosiStrategySettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, closeleg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, threshold_),
  };
  ChangePosiStrategySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePosiStrategySettings_descriptor_,
      ChangePosiStrategySettings::default_instance_,
      ChangePosiStrategySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePosiStrategySettings));
  ModifyStrategyParam_descriptor_ = file->message_type(13);
  static const int ModifyStrategyParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, strategyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, strategydata_),
  };
  ModifyStrategyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyStrategyParam_descriptor_,
      ModifyStrategyParam::default_instance_,
      ModifyStrategyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyStrategyParam));
  ModifyPortfolioSwitchParam_descriptor_ = file->message_type(14);
  static const int ModifyPortfolioSwitchParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autoopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autostopgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autostoploss_),
  };
  ModifyPortfolioSwitchParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioSwitchParam_descriptor_,
      ModifyPortfolioSwitchParam::default_instance_,
      ModifyPortfolioSwitchParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioSwitchParam));
  ModifyPortfolioPreferredLegParam_descriptor_ = file->message_type(15);
  static const int ModifyPortfolioPreferredLegParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, legsymbol_),
  };
  ModifyPortfolioPreferredLegParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioPreferredLegParam_descriptor_,
      ModifyPortfolioPreferredLegParam::default_instance_,
      ModifyPortfolioPreferredLegParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioPreferredLegParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringParam_descriptor_, &StringParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntParam_descriptor_, &IntParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegItem_descriptor_, &LegItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortfolioItem_descriptor_, &PortfolioItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectParam_descriptor_, &ConnectParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationReturn_descriptor_, &OperationReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginParam_descriptor_, &LoginParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegQuoteParam_descriptor_, &RegQuoteParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PorfOpenPosiParam_descriptor_, &PorfOpenPosiParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClosePositionParam_descriptor_, &ClosePositionParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegOrderUpdateParam_descriptor_, &LegOrderUpdateParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArbitrageStrategySettings_descriptor_, &ArbitrageStrategySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePosiStrategySettings_descriptor_, &ChangePosiStrategySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyStrategyParam_descriptor_, &ModifyStrategyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioSwitchParam_descriptor_, &ModifyPortfolioSwitchParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioPreferredLegParam_descriptor_, &ModifyPortfolioPreferredLegParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete StringParam::default_instance_;
  delete StringParam_reflection_;
  delete IntParam::default_instance_;
  delete IntParam_reflection_;
  delete LegItem::default_instance_;
  delete LegItem_reflection_;
  delete PortfolioItem::default_instance_;
  delete PortfolioItem_reflection_;
  delete ConnectParam::default_instance_;
  delete ConnectParam_reflection_;
  delete OperationReturn::default_instance_;
  delete OperationReturn_reflection_;
  delete LoginParam::default_instance_;
  delete LoginParam_reflection_;
  delete RegQuoteParam::default_instance_;
  delete RegQuoteParam_reflection_;
  delete PorfOpenPosiParam::default_instance_;
  delete PorfOpenPosiParam_reflection_;
  delete ClosePositionParam::default_instance_;
  delete ClosePositionParam_reflection_;
  delete LegOrderUpdateParam::default_instance_;
  delete LegOrderUpdateParam_reflection_;
  delete ArbitrageStrategySettings::default_instance_;
  delete ArbitrageStrategySettings_reflection_;
  delete ChangePosiStrategySettings::default_instance_;
  delete ChangePosiStrategySettings_reflection_;
  delete ModifyStrategyParam::default_instance_;
  delete ModifyStrategyParam_reflection_;
  delete ModifyPortfolioSwitchParam::default_instance_;
  delete ModifyPortfolioSwitchParam_reflection_;
  delete ModifyPortfolioPreferredLegParam::default_instance_;
  delete ModifyPortfolioPreferredLegParam_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::entity::protobuf_AddDesc_enum_2eproto();
  ::trade::protobuf_AddDesc_trade_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\006entity\032\nenum.proto\032\013tra"
    "de.proto\"\033\n\013StringParam\022\014\n\004Data\030\001 \002(\t\"\030\n"
    "\010IntParam\022\014\n\004Data\030\002 \002(\005\"\261\001\n\007LegItem\022\016\n\006S"
    "ymbol\030\001 \002(\t\022\r\n\005Ratio\030\002 \002(\005\022\'\n\004Side\030\003 \002(\016"
    "2\031.entity.PosiDirectionType\022!\n\006Status\030\004 "
    "\002(\0162\021.entity.LegStatus\022\014\n\004Last\030\005 \002(\001\022\013\n\003"
    "Ask\030\006 \002(\001\022\013\n\003Bid\030\007 \002(\001\022\023\n\013IsPreferred\030\010 "
    "\002(\010\"\253\001\n\rPortfolioItem\022\n\n\002ID\030\001 \002(\t\022\020\n\010Qua"
    "ntity\030\002 \002(\005\022\014\n\004Diff\030\003 \002(\001\022\020\n\010AutoOpen\030\004 "
    "\002(\010\022\021\n\tAutoClose\030\005 \002(\010\022\035\n\004Legs\030\006 \003(\0132\017.e"
    "ntity.LegItem\022\024\n\014StrategyName\030\007 \002(\t\022\024\n\014S"
    "trategyData\030\010 \002(\014\":\n\014ConnectParam\022\024\n\014Quo"
    "teAddress\030\001 \002(\t\022\024\n\014StreamFolder\030\002 \002(\t\"8\n"
    "\017OperationReturn\022\017\n\007Success\030\001 \002(\010\022\024\n\014Err"
    "orMessage\030\002 \002(\t\"@\n\nLoginParam\022\020\n\010BrokerI"
    "d\030\001 \002(\t\022\016\n\006UserId\030\002 \002(\t\022\020\n\010Password\030\003 \002("
    "\t\" \n\rRegQuoteParam\022\017\n\007Symbols\030\001 \003(\t\"6\n\021P"
    "orfOpenPosiParam\022\017\n\007PortfId\030\001 \002(\t\022\020\n\010Qua"
    "ntity\030\002 \002(\005\"T\n\022ClosePositionParam\022+\n\rMul"
    "tiLegOrder\030\001 \002(\0132\024.trade.MultiLegOrder\022\021"
    "\n\tLegOrdRef\030\002 \001(\t\"t\n\023LegOrderUpdateParam"
    "\022\017\n\007PortfId\030\001 \002(\t\022\027\n\017MultiLegOrderId\030\002 \002"
    "(\t\022\023\n\013LegOrderRef\030\003 \002(\t\022\036\n\010LegOrder\030\004 \002("
    "\0132\014.trade.Order\"\225\001\n\031ArbitrageStrategySet"
    "tings\022\'\n\004Side\030\001 \002(\0162\031.entity.PosiDirecti"
    "onType\022\031\n\021OpenPosiThreshold\030\002 \001(\001\022\031\n\021Sto"
    "pGainThreshold\030\003 \001(\001\022\031\n\021StopLossThreshol"
    "d\030\004 \001(\001\"A\n\032ChangePosiStrategySettings\022\020\n"
    "\010CloseLeg\030\001 \002(\t\022\021\n\tThreshold\030\002 \002(\001\"R\n\023Mo"
    "difyStrategyParam\022\017\n\007PortfId\030\001 \002(\t\022\024\n\014St"
    "rategyName\030\002 \002(\t\022\024\n\014StrategyData\030\003 \002(\014\"|"
    "\n\032ModifyPortfolioSwitchParam\022\017\n\007PortfId\030"
    "\001 \002(\t\022\017\n\007Enabled\030\002 \002(\010\022\020\n\010AutoOpen\030\003 \002(\010"
    "\022\024\n\014AutoStopGain\030\004 \002(\010\022\024\n\014AutoStopLoss\030\005"
    " \002(\010\"F\n ModifyPortfolioPreferredLegParam"
    "\022\017\n\007PortfId\030\001 \002(\t\022\021\n\tLegSymbol\030\002 \002(\t", 1436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  StringParam::default_instance_ = new StringParam();
  IntParam::default_instance_ = new IntParam();
  LegItem::default_instance_ = new LegItem();
  PortfolioItem::default_instance_ = new PortfolioItem();
  ConnectParam::default_instance_ = new ConnectParam();
  OperationReturn::default_instance_ = new OperationReturn();
  LoginParam::default_instance_ = new LoginParam();
  RegQuoteParam::default_instance_ = new RegQuoteParam();
  PorfOpenPosiParam::default_instance_ = new PorfOpenPosiParam();
  ClosePositionParam::default_instance_ = new ClosePositionParam();
  LegOrderUpdateParam::default_instance_ = new LegOrderUpdateParam();
  ArbitrageStrategySettings::default_instance_ = new ArbitrageStrategySettings();
  ChangePosiStrategySettings::default_instance_ = new ChangePosiStrategySettings();
  ModifyStrategyParam::default_instance_ = new ModifyStrategyParam();
  ModifyPortfolioSwitchParam::default_instance_ = new ModifyPortfolioSwitchParam();
  ModifyPortfolioPreferredLegParam::default_instance_ = new ModifyPortfolioPreferredLegParam();
  StringParam::default_instance_->InitAsDefaultInstance();
  IntParam::default_instance_->InitAsDefaultInstance();
  LegItem::default_instance_->InitAsDefaultInstance();
  PortfolioItem::default_instance_->InitAsDefaultInstance();
  ConnectParam::default_instance_->InitAsDefaultInstance();
  OperationReturn::default_instance_->InitAsDefaultInstance();
  LoginParam::default_instance_->InitAsDefaultInstance();
  RegQuoteParam::default_instance_->InitAsDefaultInstance();
  PorfOpenPosiParam::default_instance_->InitAsDefaultInstance();
  ClosePositionParam::default_instance_->InitAsDefaultInstance();
  LegOrderUpdateParam::default_instance_->InitAsDefaultInstance();
  ArbitrageStrategySettings::default_instance_->InitAsDefaultInstance();
  ChangePosiStrategySettings::default_instance_->InitAsDefaultInstance();
  ModifyStrategyParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioSwitchParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioPreferredLegParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StringParam::kDataFieldNumber;
#endif  // !_MSC_VER

StringParam::StringParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringParam::InitAsDefaultInstance() {
}

StringParam::StringParam(const StringParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringParam::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringParam::~StringParam() {
  SharedDtor();
}

void StringParam::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void StringParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringParam_descriptor_;
}

const StringParam& StringParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

StringParam* StringParam::default_instance_ = NULL;

StringParam* StringParam::New() const {
  return new StringParam;
}

void StringParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringParam::MergeFrom(const StringParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringParam::CopyFrom(const StringParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StringParam::Swap(StringParam* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringParam_descriptor_;
  metadata.reflection = StringParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntParam::kDataFieldNumber;
#endif  // !_MSC_VER

IntParam::IntParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntParam::InitAsDefaultInstance() {
}

IntParam::IntParam(const IntParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntParam::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntParam::~IntParam() {
  SharedDtor();
}

void IntParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntParam_descriptor_;
}

const IntParam& IntParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

IntParam* IntParam::default_instance_ = NULL;

IntParam* IntParam::New() const {
  return new IntParam;
}

void IntParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntParam::MergeFrom(const IntParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntParam::CopyFrom(const IntParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IntParam::Swap(IntParam* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntParam_descriptor_;
  metadata.reflection = IntParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegItem::kSymbolFieldNumber;
const int LegItem::kRatioFieldNumber;
const int LegItem::kSideFieldNumber;
const int LegItem::kStatusFieldNumber;
const int LegItem::kLastFieldNumber;
const int LegItem::kAskFieldNumber;
const int LegItem::kBidFieldNumber;
const int LegItem::kIsPreferredFieldNumber;
#endif  // !_MSC_VER

LegItem::LegItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegItem::InitAsDefaultInstance() {
}

LegItem::LegItem(const LegItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegItem::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ratio_ = 0;
  side_ = 49;
  status_ = 0;
  last_ = 0;
  ask_ = 0;
  bid_ = 0;
  ispreferred_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegItem::~LegItem() {
  SharedDtor();
}

void LegItem::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void LegItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegItem_descriptor_;
}

const LegItem& LegItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegItem* LegItem::default_instance_ = NULL;

LegItem* LegItem::New() const {
  return new LegItem;
}

void LegItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    ratio_ = 0;
    side_ = 49;
    status_ = 0;
    last_ = 0;
    ask_ = 0;
    bid_ = 0;
    ispreferred_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ratio;
        break;
      }
      
      // required int32 Ratio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Side;
        break;
      }
      
      // required .entity.PosiDirectionType Side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }
      
      // required .entity.LegStatus Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::LegStatus_IsValid(value)) {
            set_status(static_cast< entity::LegStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Last;
        break;
      }
      
      // required double Last = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Ask;
        break;
      }
      
      // required double Ask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_Bid;
        break;
      }
      
      // required double Bid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsPreferred;
        break;
      }
      
      // required bool IsPreferred = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPreferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispreferred_)));
          set_has_ispreferred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }
  
  // required int32 Ratio = 2;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ratio(), output);
  }
  
  // required .entity.PosiDirectionType Side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->side(), output);
  }
  
  // required .entity.LegStatus Status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }
  
  // required double Last = 5;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->last(), output);
  }
  
  // required double Ask = 6;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask(), output);
  }
  
  // required double Bid = 7;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->bid(), output);
  }
  
  // required bool IsPreferred = 8;
  if (has_ispreferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ispreferred(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }
  
  // required int32 Ratio = 2;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ratio(), target);
  }
  
  // required .entity.PosiDirectionType Side = 3;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->side(), target);
  }
  
  // required .entity.LegStatus Status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }
  
  // required double Last = 5;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->last(), target);
  }
  
  // required double Ask = 6;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask(), target);
  }
  
  // required double Bid = 7;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->bid(), target);
  }
  
  // required bool IsPreferred = 8;
  if (has_ispreferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ispreferred(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required int32 Ratio = 2;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }
    
    // required .entity.PosiDirectionType Side = 3;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // required .entity.LegStatus Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required double Last = 5;
    if (has_last()) {
      total_size += 1 + 8;
    }
    
    // required double Ask = 6;
    if (has_ask()) {
      total_size += 1 + 8;
    }
    
    // required double Bid = 7;
    if (has_bid()) {
      total_size += 1 + 8;
    }
    
    // required bool IsPreferred = 8;
    if (has_ispreferred()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegItem::MergeFrom(const LegItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_ispreferred()) {
      set_ispreferred(from.ispreferred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegItem::CopyFrom(const LegItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LegItem::Swap(LegItem* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(ratio_, other->ratio_);
    std::swap(side_, other->side_);
    std::swap(status_, other->status_);
    std::swap(last_, other->last_);
    std::swap(ask_, other->ask_);
    std::swap(bid_, other->bid_);
    std::swap(ispreferred_, other->ispreferred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegItem_descriptor_;
  metadata.reflection = LegItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortfolioItem::kIDFieldNumber;
const int PortfolioItem::kQuantityFieldNumber;
const int PortfolioItem::kDiffFieldNumber;
const int PortfolioItem::kAutoOpenFieldNumber;
const int PortfolioItem::kAutoCloseFieldNumber;
const int PortfolioItem::kLegsFieldNumber;
const int PortfolioItem::kStrategyNameFieldNumber;
const int PortfolioItem::kStrategyDataFieldNumber;
#endif  // !_MSC_VER

PortfolioItem::PortfolioItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PortfolioItem::InitAsDefaultInstance() {
}

PortfolioItem::PortfolioItem(const PortfolioItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PortfolioItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  diff_ = 0;
  autoopen_ = false;
  autoclose_ = false;
  strategyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortfolioItem::~PortfolioItem() {
  SharedDtor();
}

void PortfolioItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
    delete strategyname_;
  }
  if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
    delete strategydata_;
  }
  if (this != default_instance_) {
  }
}

void PortfolioItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortfolioItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortfolioItem_descriptor_;
}

const PortfolioItem& PortfolioItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PortfolioItem* PortfolioItem::default_instance_ = NULL;

PortfolioItem* PortfolioItem::New() const {
  return new PortfolioItem;
}

void PortfolioItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    quantity_ = 0;
    diff_ = 0;
    autoopen_ = false;
    autoclose_ = false;
    if (has_strategyname()) {
      if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
        strategyname_->clear();
      }
    }
    if (has_strategydata()) {
      if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
        strategydata_->clear();
      }
    }
  }
  legs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortfolioItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Diff;
        break;
      }
      
      // required double Diff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AutoOpen;
        break;
      }
      
      // required bool AutoOpen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoopen_)));
          set_has_autoopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AutoClose;
        break;
      }
      
      // required bool AutoClose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoclose_)));
          set_has_autoclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Legs;
        break;
      }
      
      // repeated .entity.LegItem Legs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Legs;
        if (input->ExpectTag(58)) goto parse_StrategyName;
        break;
      }
      
      // required string StrategyName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategyname().data(), this->strategyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_StrategyData;
        break;
      }
      
      // required bytes StrategyData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PortfolioItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // required double Diff = 3;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->diff(), output);
  }
  
  // required bool AutoOpen = 4;
  if (has_autoopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autoopen(), output);
  }
  
  // required bool AutoClose = 5;
  if (has_autoclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autoclose(), output);
  }
  
  // repeated .entity.LegItem Legs = 6;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->legs(i), output);
  }
  
  // required string StrategyName = 7;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strategyname(), output);
  }
  
  // required bytes StrategyData = 8;
  if (has_strategydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->strategydata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PortfolioItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  // required double Diff = 3;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->diff(), target);
  }
  
  // required bool AutoOpen = 4;
  if (has_autoopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autoopen(), target);
  }
  
  // required bool AutoClose = 5;
  if (has_autoclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autoclose(), target);
  }
  
  // repeated .entity.LegItem Legs = 6;
  for (int i = 0; i < this->legs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->legs(i), target);
  }
  
  // required string StrategyName = 7;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strategyname(), target);
  }
  
  // required bytes StrategyData = 8;
  if (has_strategydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->strategydata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PortfolioItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required double Diff = 3;
    if (has_diff()) {
      total_size += 1 + 8;
    }
    
    // required bool AutoOpen = 4;
    if (has_autoopen()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoClose = 5;
    if (has_autoclose()) {
      total_size += 1 + 1;
    }
    
    // required string StrategyName = 7;
    if (has_strategyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategyname());
    }
    
    // required bytes StrategyData = 8;
    if (has_strategydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategydata());
    }
    
  }
  // repeated .entity.LegItem Legs = 6;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortfolioItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortfolioItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortfolioItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortfolioItem::MergeFrom(const PortfolioItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  legs_.MergeFrom(from.legs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_diff()) {
      set_diff(from.diff());
    }
    if (from.has_autoopen()) {
      set_autoopen(from.autoopen());
    }
    if (from.has_autoclose()) {
      set_autoclose(from.autoclose());
    }
    if (from.has_strategyname()) {
      set_strategyname(from.strategyname());
    }
    if (from.has_strategydata()) {
      set_strategydata(from.strategydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortfolioItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortfolioItem::CopyFrom(const PortfolioItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;
  
  for (int i = 0; i < legs_size(); i++) {
    if (!this->legs(i).IsInitialized()) return false;
  }
  return true;
}

void PortfolioItem::Swap(PortfolioItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quantity_, other->quantity_);
    std::swap(diff_, other->diff_);
    std::swap(autoopen_, other->autoopen_);
    std::swap(autoclose_, other->autoclose_);
    legs_.Swap(&other->legs_);
    std::swap(strategyname_, other->strategyname_);
    std::swap(strategydata_, other->strategydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortfolioItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortfolioItem_descriptor_;
  metadata.reflection = PortfolioItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectParam::kQuoteAddressFieldNumber;
const int ConnectParam::kStreamFolderFieldNumber;
#endif  // !_MSC_VER

ConnectParam::ConnectParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectParam::InitAsDefaultInstance() {
}

ConnectParam::ConnectParam(const ConnectParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectParam::SharedCtor() {
  _cached_size_ = 0;
  quoteaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  streamfolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectParam::~ConnectParam() {
  SharedDtor();
}

void ConnectParam::SharedDtor() {
  if (quoteaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete quoteaddress_;
  }
  if (streamfolder_ != &::google::protobuf::internal::kEmptyString) {
    delete streamfolder_;
  }
  if (this != default_instance_) {
  }
}

void ConnectParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectParam_descriptor_;
}

const ConnectParam& ConnectParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ConnectParam* ConnectParam::default_instance_ = NULL;

ConnectParam* ConnectParam::New() const {
  return new ConnectParam;
}

void ConnectParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quoteaddress()) {
      if (quoteaddress_ != &::google::protobuf::internal::kEmptyString) {
        quoteaddress_->clear();
      }
    }
    if (has_streamfolder()) {
      if (streamfolder_ != &::google::protobuf::internal::kEmptyString) {
        streamfolder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string QuoteAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quoteaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quoteaddress().data(), this->quoteaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StreamFolder;
        break;
      }
      
      // required string StreamFolder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StreamFolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamfolder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streamfolder().data(), this->streamfolder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string QuoteAddress = 1;
  if (has_quoteaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaddress().data(), this->quoteaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->quoteaddress(), output);
  }
  
  // required string StreamFolder = 2;
  if (has_streamfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamfolder().data(), this->streamfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->streamfolder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string QuoteAddress = 1;
  if (has_quoteaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaddress().data(), this->quoteaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quoteaddress(), target);
  }
  
  // required string StreamFolder = 2;
  if (has_streamfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamfolder().data(), this->streamfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->streamfolder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string QuoteAddress = 1;
    if (has_quoteaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quoteaddress());
    }
    
    // required string StreamFolder = 2;
    if (has_streamfolder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamfolder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectParam::MergeFrom(const ConnectParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quoteaddress()) {
      set_quoteaddress(from.quoteaddress());
    }
    if (from.has_streamfolder()) {
      set_streamfolder(from.streamfolder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectParam::CopyFrom(const ConnectParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ConnectParam::Swap(ConnectParam* other) {
  if (other != this) {
    std::swap(quoteaddress_, other->quoteaddress_);
    std::swap(streamfolder_, other->streamfolder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectParam_descriptor_;
  metadata.reflection = ConnectParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationReturn::kSuccessFieldNumber;
const int OperationReturn::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

OperationReturn::OperationReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationReturn::InitAsDefaultInstance() {
}

OperationReturn::OperationReturn(const OperationReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationReturn::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationReturn::~OperationReturn() {
  SharedDtor();
}

void OperationReturn::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void OperationReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationReturn_descriptor_;
}

const OperationReturn& OperationReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OperationReturn* OperationReturn::default_instance_ = NULL;

OperationReturn* OperationReturn::New() const {
  return new OperationReturn;
}

void OperationReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorMessage;
        break;
      }
      
      // required string ErrorMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool Success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string ErrorMessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationReturn::MergeFrom(const OperationReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationReturn::CopyFrom(const OperationReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OperationReturn::Swap(OperationReturn* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationReturn_descriptor_;
  metadata.reflection = OperationReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginParam::kBrokerIdFieldNumber;
const int LoginParam::kUserIdFieldNumber;
const int LoginParam::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginParam::LoginParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginParam::InitAsDefaultInstance() {
}

LoginParam::LoginParam(const LoginParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginParam::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginParam::~LoginParam() {
  SharedDtor();
}

void LoginParam::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginParam_descriptor_;
}

const LoginParam& LoginParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LoginParam* LoginParam::default_instance_ = NULL;

LoginParam* LoginParam::New() const {
  return new LoginParam;
}

void LoginParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }
      
      // required string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerId = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }
  
  // required string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }
  
  // required string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerId = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }
  
  // required string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }
  
  // required string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerId = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string UserId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginParam::MergeFrom(const LoginParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginParam::CopyFrom(const LoginParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LoginParam::Swap(LoginParam* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginParam_descriptor_;
  metadata.reflection = LoginParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegQuoteParam::kSymbolsFieldNumber;
#endif  // !_MSC_VER

RegQuoteParam::RegQuoteParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegQuoteParam::InitAsDefaultInstance() {
}

RegQuoteParam::RegQuoteParam(const RegQuoteParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegQuoteParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegQuoteParam::~RegQuoteParam() {
  SharedDtor();
}

void RegQuoteParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegQuoteParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegQuoteParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegQuoteParam_descriptor_;
}

const RegQuoteParam& RegQuoteParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RegQuoteParam* RegQuoteParam::default_instance_ = NULL;

RegQuoteParam* RegQuoteParam::New() const {
  return new RegQuoteParam;
}

void RegQuoteParam::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegQuoteParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Symbols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbols(0).data(), this->symbols(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegQuoteParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->symbols(i).data(), this->symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbols(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegQuoteParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbols(i).data(), this->symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->symbols(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegQuoteParam::ByteSize() const {
  int total_size = 0;
  
  // repeated string Symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegQuoteParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegQuoteParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegQuoteParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegQuoteParam::MergeFrom(const RegQuoteParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegQuoteParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegQuoteParam::CopyFrom(const RegQuoteParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegQuoteParam::IsInitialized() const {
  
  return true;
}

void RegQuoteParam::Swap(RegQuoteParam* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegQuoteParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegQuoteParam_descriptor_;
  metadata.reflection = RegQuoteParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PorfOpenPosiParam::kPortfIdFieldNumber;
const int PorfOpenPosiParam::kQuantityFieldNumber;
#endif  // !_MSC_VER

PorfOpenPosiParam::PorfOpenPosiParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PorfOpenPosiParam::InitAsDefaultInstance() {
}

PorfOpenPosiParam::PorfOpenPosiParam(const PorfOpenPosiParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PorfOpenPosiParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PorfOpenPosiParam::~PorfOpenPosiParam() {
  SharedDtor();
}

void PorfOpenPosiParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void PorfOpenPosiParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PorfOpenPosiParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PorfOpenPosiParam_descriptor_;
}

const PorfOpenPosiParam& PorfOpenPosiParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PorfOpenPosiParam* PorfOpenPosiParam::default_instance_ = NULL;

PorfOpenPosiParam* PorfOpenPosiParam::New() const {
  return new PorfOpenPosiParam;
}

void PorfOpenPosiParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PorfOpenPosiParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PorfOpenPosiParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PorfOpenPosiParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PorfOpenPosiParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required int32 Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PorfOpenPosiParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PorfOpenPosiParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PorfOpenPosiParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PorfOpenPosiParam::MergeFrom(const PorfOpenPosiParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PorfOpenPosiParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PorfOpenPosiParam::CopyFrom(const PorfOpenPosiParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PorfOpenPosiParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PorfOpenPosiParam::Swap(PorfOpenPosiParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PorfOpenPosiParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PorfOpenPosiParam_descriptor_;
  metadata.reflection = PorfOpenPosiParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClosePositionParam::kMultiLegOrderFieldNumber;
const int ClosePositionParam::kLegOrdRefFieldNumber;
#endif  // !_MSC_VER

ClosePositionParam::ClosePositionParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClosePositionParam::InitAsDefaultInstance() {
  multilegorder_ = const_cast< ::trade::MultiLegOrder*>(&::trade::MultiLegOrder::default_instance());
}

ClosePositionParam::ClosePositionParam(const ClosePositionParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClosePositionParam::SharedCtor() {
  _cached_size_ = 0;
  multilegorder_ = NULL;
  legordref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClosePositionParam::~ClosePositionParam() {
  SharedDtor();
}

void ClosePositionParam::SharedDtor() {
  if (legordref_ != &::google::protobuf::internal::kEmptyString) {
    delete legordref_;
  }
  if (this != default_instance_) {
    delete multilegorder_;
  }
}

void ClosePositionParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClosePositionParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClosePositionParam_descriptor_;
}

const ClosePositionParam& ClosePositionParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ClosePositionParam* ClosePositionParam::default_instance_ = NULL;

ClosePositionParam* ClosePositionParam::New() const {
  return new ClosePositionParam;
}

void ClosePositionParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_multilegorder()) {
      if (multilegorder_ != NULL) multilegorder_->::trade::MultiLegOrder::Clear();
    }
    if (has_legordref()) {
      if (legordref_ != &::google::protobuf::internal::kEmptyString) {
        legordref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClosePositionParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trade.MultiLegOrder MultiLegOrder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multilegorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LegOrdRef;
        break;
      }
      
      // optional string LegOrdRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrdRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legordref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legordref().data(), this->legordref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClosePositionParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trade.MultiLegOrder MultiLegOrder = 1;
  if (has_multilegorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multilegorder(), output);
  }
  
  // optional string LegOrdRef = 2;
  if (has_legordref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legordref().data(), this->legordref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legordref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClosePositionParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trade.MultiLegOrder MultiLegOrder = 1;
  if (has_multilegorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->multilegorder(), target);
  }
  
  // optional string LegOrdRef = 2;
  if (has_legordref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legordref().data(), this->legordref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legordref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClosePositionParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trade.MultiLegOrder MultiLegOrder = 1;
    if (has_multilegorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multilegorder());
    }
    
    // optional string LegOrdRef = 2;
    if (has_legordref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legordref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClosePositionParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClosePositionParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClosePositionParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClosePositionParam::MergeFrom(const ClosePositionParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multilegorder()) {
      mutable_multilegorder()->::trade::MultiLegOrder::MergeFrom(from.multilegorder());
    }
    if (from.has_legordref()) {
      set_legordref(from.legordref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClosePositionParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosePositionParam::CopyFrom(const ClosePositionParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosePositionParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_multilegorder()) {
    if (!this->multilegorder().IsInitialized()) return false;
  }
  return true;
}

void ClosePositionParam::Swap(ClosePositionParam* other) {
  if (other != this) {
    std::swap(multilegorder_, other->multilegorder_);
    std::swap(legordref_, other->legordref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClosePositionParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClosePositionParam_descriptor_;
  metadata.reflection = ClosePositionParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegOrderUpdateParam::kPortfIdFieldNumber;
const int LegOrderUpdateParam::kMultiLegOrderIdFieldNumber;
const int LegOrderUpdateParam::kLegOrderRefFieldNumber;
const int LegOrderUpdateParam::kLegOrderFieldNumber;
#endif  // !_MSC_VER

LegOrderUpdateParam::LegOrderUpdateParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegOrderUpdateParam::InitAsDefaultInstance() {
  legorder_ = const_cast< ::trade::Order*>(&::trade::Order::default_instance());
}

LegOrderUpdateParam::LegOrderUpdateParam(const LegOrderUpdateParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegOrderUpdateParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multilegorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legorderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legorder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegOrderUpdateParam::~LegOrderUpdateParam() {
  SharedDtor();
}

void LegOrderUpdateParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (multilegorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete multilegorderid_;
  }
  if (legorderref_ != &::google::protobuf::internal::kEmptyString) {
    delete legorderref_;
  }
  if (this != default_instance_) {
    delete legorder_;
  }
}

void LegOrderUpdateParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegOrderUpdateParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegOrderUpdateParam_descriptor_;
}

const LegOrderUpdateParam& LegOrderUpdateParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegOrderUpdateParam* LegOrderUpdateParam::default_instance_ = NULL;

LegOrderUpdateParam* LegOrderUpdateParam::New() const {
  return new LegOrderUpdateParam;
}

void LegOrderUpdateParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_multilegorderid()) {
      if (multilegorderid_ != &::google::protobuf::internal::kEmptyString) {
        multilegorderid_->clear();
      }
    }
    if (has_legorderref()) {
      if (legorderref_ != &::google::protobuf::internal::kEmptyString) {
        legorderref_->clear();
      }
    }
    if (has_legorder()) {
      if (legorder_ != NULL) legorder_->::trade::Order::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegOrderUpdateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MultiLegOrderId;
        break;
      }
      
      // required string MultiLegOrderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MultiLegOrderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multilegorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multilegorderid().data(), this->multilegorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LegOrderRef;
        break;
      }
      
      // required string LegOrderRef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legorderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legorderref().data(), this->legorderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LegOrder;
        break;
      }
      
      // required .trade.Order LegOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegOrderUpdateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string MultiLegOrderId = 2;
  if (has_multilegorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegorderid().data(), this->multilegorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->multilegorderid(), output);
  }
  
  // required string LegOrderRef = 3;
  if (has_legorderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legorderref().data(), this->legorderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->legorderref(), output);
  }
  
  // required .trade.Order LegOrder = 4;
  if (has_legorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->legorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegOrderUpdateParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string MultiLegOrderId = 2;
  if (has_multilegorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegorderid().data(), this->multilegorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->multilegorderid(), target);
  }
  
  // required string LegOrderRef = 3;
  if (has_legorderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legorderref().data(), this->legorderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->legorderref(), target);
  }
  
  // required .trade.Order LegOrder = 4;
  if (has_legorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->legorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegOrderUpdateParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string MultiLegOrderId = 2;
    if (has_multilegorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multilegorderid());
    }
    
    // required string LegOrderRef = 3;
    if (has_legorderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legorderref());
    }
    
    // required .trade.Order LegOrder = 4;
    if (has_legorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegOrderUpdateParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegOrderUpdateParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegOrderUpdateParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegOrderUpdateParam::MergeFrom(const LegOrderUpdateParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_multilegorderid()) {
      set_multilegorderid(from.multilegorderid());
    }
    if (from.has_legorderref()) {
      set_legorderref(from.legorderref());
    }
    if (from.has_legorder()) {
      mutable_legorder()->::trade::Order::MergeFrom(from.legorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegOrderUpdateParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegOrderUpdateParam::CopyFrom(const LegOrderUpdateParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegOrderUpdateParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_legorder()) {
    if (!this->legorder().IsInitialized()) return false;
  }
  return true;
}

void LegOrderUpdateParam::Swap(LegOrderUpdateParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(multilegorderid_, other->multilegorderid_);
    std::swap(legorderref_, other->legorderref_);
    std::swap(legorder_, other->legorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegOrderUpdateParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegOrderUpdateParam_descriptor_;
  metadata.reflection = LegOrderUpdateParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArbitrageStrategySettings::kSideFieldNumber;
const int ArbitrageStrategySettings::kOpenPosiThresholdFieldNumber;
const int ArbitrageStrategySettings::kStopGainThresholdFieldNumber;
const int ArbitrageStrategySettings::kStopLossThresholdFieldNumber;
#endif  // !_MSC_VER

ArbitrageStrategySettings::ArbitrageStrategySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArbitrageStrategySettings::InitAsDefaultInstance() {
}

ArbitrageStrategySettings::ArbitrageStrategySettings(const ArbitrageStrategySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArbitrageStrategySettings::SharedCtor() {
  _cached_size_ = 0;
  side_ = 49;
  openposithreshold_ = 0;
  stopgainthreshold_ = 0;
  stoplossthreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArbitrageStrategySettings::~ArbitrageStrategySettings() {
  SharedDtor();
}

void ArbitrageStrategySettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArbitrageStrategySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArbitrageStrategySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArbitrageStrategySettings_descriptor_;
}

const ArbitrageStrategySettings& ArbitrageStrategySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ArbitrageStrategySettings* ArbitrageStrategySettings::default_instance_ = NULL;

ArbitrageStrategySettings* ArbitrageStrategySettings::New() const {
  return new ArbitrageStrategySettings;
}

void ArbitrageStrategySettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    side_ = 49;
    openposithreshold_ = 0;
    stopgainthreshold_ = 0;
    stoplossthreshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArbitrageStrategySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.PosiDirectionType Side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_OpenPosiThreshold;
        break;
      }
      
      // optional double OpenPosiThreshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenPosiThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openposithreshold_)));
          set_has_openposithreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_StopGainThreshold;
        break;
      }
      
      // optional double StopGainThreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopGainThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopgainthreshold_)));
          set_has_stopgainthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_StopLossThreshold;
        break;
      }
      
      // optional double StopLossThreshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopLossThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoplossthreshold_)));
          set_has_stoplossthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArbitrageStrategySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.PosiDirectionType Side = 1;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->side(), output);
  }
  
  // optional double OpenPosiThreshold = 2;
  if (has_openposithreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->openposithreshold(), output);
  }
  
  // optional double StopGainThreshold = 3;
  if (has_stopgainthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stopgainthreshold(), output);
  }
  
  // optional double StopLossThreshold = 4;
  if (has_stoplossthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stoplossthreshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArbitrageStrategySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.PosiDirectionType Side = 1;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->side(), target);
  }
  
  // optional double OpenPosiThreshold = 2;
  if (has_openposithreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->openposithreshold(), target);
  }
  
  // optional double StopGainThreshold = 3;
  if (has_stopgainthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stopgainthreshold(), target);
  }
  
  // optional double StopLossThreshold = 4;
  if (has_stoplossthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stoplossthreshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArbitrageStrategySettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.PosiDirectionType Side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // optional double OpenPosiThreshold = 2;
    if (has_openposithreshold()) {
      total_size += 1 + 8;
    }
    
    // optional double StopGainThreshold = 3;
    if (has_stopgainthreshold()) {
      total_size += 1 + 8;
    }
    
    // optional double StopLossThreshold = 4;
    if (has_stoplossthreshold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArbitrageStrategySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArbitrageStrategySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArbitrageStrategySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArbitrageStrategySettings::MergeFrom(const ArbitrageStrategySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_openposithreshold()) {
      set_openposithreshold(from.openposithreshold());
    }
    if (from.has_stopgainthreshold()) {
      set_stopgainthreshold(from.stopgainthreshold());
    }
    if (from.has_stoplossthreshold()) {
      set_stoplossthreshold(from.stoplossthreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArbitrageStrategySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArbitrageStrategySettings::CopyFrom(const ArbitrageStrategySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArbitrageStrategySettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ArbitrageStrategySettings::Swap(ArbitrageStrategySettings* other) {
  if (other != this) {
    std::swap(side_, other->side_);
    std::swap(openposithreshold_, other->openposithreshold_);
    std::swap(stopgainthreshold_, other->stopgainthreshold_);
    std::swap(stoplossthreshold_, other->stoplossthreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArbitrageStrategySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArbitrageStrategySettings_descriptor_;
  metadata.reflection = ArbitrageStrategySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePosiStrategySettings::kCloseLegFieldNumber;
const int ChangePosiStrategySettings::kThresholdFieldNumber;
#endif  // !_MSC_VER

ChangePosiStrategySettings::ChangePosiStrategySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePosiStrategySettings::InitAsDefaultInstance() {
}

ChangePosiStrategySettings::ChangePosiStrategySettings(const ChangePosiStrategySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePosiStrategySettings::SharedCtor() {
  _cached_size_ = 0;
  closeleg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePosiStrategySettings::~ChangePosiStrategySettings() {
  SharedDtor();
}

void ChangePosiStrategySettings::SharedDtor() {
  if (closeleg_ != &::google::protobuf::internal::kEmptyString) {
    delete closeleg_;
  }
  if (this != default_instance_) {
  }
}

void ChangePosiStrategySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePosiStrategySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePosiStrategySettings_descriptor_;
}

const ChangePosiStrategySettings& ChangePosiStrategySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ChangePosiStrategySettings* ChangePosiStrategySettings::default_instance_ = NULL;

ChangePosiStrategySettings* ChangePosiStrategySettings::New() const {
  return new ChangePosiStrategySettings;
}

void ChangePosiStrategySettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_closeleg()) {
      if (closeleg_ != &::google::protobuf::internal::kEmptyString) {
        closeleg_->clear();
      }
    }
    threshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePosiStrategySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CloseLeg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closeleg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closeleg().data(), this->closeleg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Threshold;
        break;
      }
      
      // required double Threshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePosiStrategySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string CloseLeg = 1;
  if (has_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeleg().data(), this->closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->closeleg(), output);
  }
  
  // required double Threshold = 2;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->threshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePosiStrategySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string CloseLeg = 1;
  if (has_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeleg().data(), this->closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->closeleg(), target);
  }
  
  // required double Threshold = 2;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->threshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePosiStrategySettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string CloseLeg = 1;
    if (has_closeleg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closeleg());
    }
    
    // required double Threshold = 2;
    if (has_threshold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePosiStrategySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePosiStrategySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePosiStrategySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePosiStrategySettings::MergeFrom(const ChangePosiStrategySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_closeleg()) {
      set_closeleg(from.closeleg());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePosiStrategySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePosiStrategySettings::CopyFrom(const ChangePosiStrategySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePosiStrategySettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ChangePosiStrategySettings::Swap(ChangePosiStrategySettings* other) {
  if (other != this) {
    std::swap(closeleg_, other->closeleg_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePosiStrategySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePosiStrategySettings_descriptor_;
  metadata.reflection = ChangePosiStrategySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyStrategyParam::kPortfIdFieldNumber;
const int ModifyStrategyParam::kStrategyNameFieldNumber;
const int ModifyStrategyParam::kStrategyDataFieldNumber;
#endif  // !_MSC_VER

ModifyStrategyParam::ModifyStrategyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyStrategyParam::InitAsDefaultInstance() {
}

ModifyStrategyParam::ModifyStrategyParam(const ModifyStrategyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyStrategyParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyStrategyParam::~ModifyStrategyParam() {
  SharedDtor();
}

void ModifyStrategyParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
    delete strategyname_;
  }
  if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
    delete strategydata_;
  }
  if (this != default_instance_) {
  }
}

void ModifyStrategyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyStrategyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyStrategyParam_descriptor_;
}

const ModifyStrategyParam& ModifyStrategyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyStrategyParam* ModifyStrategyParam::default_instance_ = NULL;

ModifyStrategyParam* ModifyStrategyParam::New() const {
  return new ModifyStrategyParam;
}

void ModifyStrategyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_strategyname()) {
      if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
        strategyname_->clear();
      }
    }
    if (has_strategydata()) {
      if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
        strategydata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyStrategyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StrategyName;
        break;
      }
      
      // required string StrategyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategyname().data(), this->strategyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StrategyData;
        break;
      }
      
      // required bytes StrategyData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyStrategyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string StrategyName = 2;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strategyname(), output);
  }
  
  // required bytes StrategyData = 3;
  if (has_strategydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strategydata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyStrategyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string StrategyName = 2;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strategyname(), target);
  }
  
  // required bytes StrategyData = 3;
  if (has_strategydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strategydata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyStrategyParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string StrategyName = 2;
    if (has_strategyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategyname());
    }
    
    // required bytes StrategyData = 3;
    if (has_strategydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategydata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyStrategyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyStrategyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyStrategyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyStrategyParam::MergeFrom(const ModifyStrategyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_strategyname()) {
      set_strategyname(from.strategyname());
    }
    if (from.has_strategydata()) {
      set_strategydata(from.strategydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyStrategyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyStrategyParam::CopyFrom(const ModifyStrategyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyStrategyParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ModifyStrategyParam::Swap(ModifyStrategyParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(strategyname_, other->strategyname_);
    std::swap(strategydata_, other->strategydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyStrategyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyStrategyParam_descriptor_;
  metadata.reflection = ModifyStrategyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioSwitchParam::kPortfIdFieldNumber;
const int ModifyPortfolioSwitchParam::kEnabledFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoOpenFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoStopGainFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoStopLossFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioSwitchParam::ModifyPortfolioSwitchParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioSwitchParam::InitAsDefaultInstance() {
}

ModifyPortfolioSwitchParam::ModifyPortfolioSwitchParam(const ModifyPortfolioSwitchParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioSwitchParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  autoopen_ = false;
  autostopgain_ = false;
  autostoploss_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioSwitchParam::~ModifyPortfolioSwitchParam() {
  SharedDtor();
}

void ModifyPortfolioSwitchParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioSwitchParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioSwitchParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioSwitchParam_descriptor_;
}

const ModifyPortfolioSwitchParam& ModifyPortfolioSwitchParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioSwitchParam* ModifyPortfolioSwitchParam::default_instance_ = NULL;

ModifyPortfolioSwitchParam* ModifyPortfolioSwitchParam::New() const {
  return new ModifyPortfolioSwitchParam;
}

void ModifyPortfolioSwitchParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    enabled_ = false;
    autoopen_ = false;
    autostopgain_ = false;
    autostoploss_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioSwitchParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Enabled;
        break;
      }
      
      // required bool Enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AutoOpen;
        break;
      }
      
      // required bool AutoOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoopen_)));
          set_has_autoopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AutoStopGain;
        break;
      }
      
      // required bool AutoStopGain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostopgain_)));
          set_has_autostopgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AutoStopLoss;
        break;
      }
      
      // required bool AutoStopLoss = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostoploss_)));
          set_has_autostoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioSwitchParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required bool Enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }
  
  // required bool AutoOpen = 3;
  if (has_autoopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoopen(), output);
  }
  
  // required bool AutoStopGain = 4;
  if (has_autostopgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autostopgain(), output);
  }
  
  // required bool AutoStopLoss = 5;
  if (has_autostoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autostoploss(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioSwitchParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required bool Enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }
  
  // required bool AutoOpen = 3;
  if (has_autoopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autoopen(), target);
  }
  
  // required bool AutoStopGain = 4;
  if (has_autostopgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autostopgain(), target);
  }
  
  // required bool AutoStopLoss = 5;
  if (has_autostoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autostoploss(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioSwitchParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required bool Enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoOpen = 3;
    if (has_autoopen()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopGain = 4;
    if (has_autostopgain()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopLoss = 5;
    if (has_autostoploss()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioSwitchParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioSwitchParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioSwitchParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioSwitchParam::MergeFrom(const ModifyPortfolioSwitchParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_autoopen()) {
      set_autoopen(from.autoopen());
    }
    if (from.has_autostopgain()) {
      set_autostopgain(from.autostopgain());
    }
    if (from.has_autostoploss()) {
      set_autostoploss(from.autostoploss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioSwitchParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioSwitchParam::CopyFrom(const ModifyPortfolioSwitchParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioSwitchParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ModifyPortfolioSwitchParam::Swap(ModifyPortfolioSwitchParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(enabled_, other->enabled_);
    std::swap(autoopen_, other->autoopen_);
    std::swap(autostopgain_, other->autostopgain_);
    std::swap(autostoploss_, other->autostoploss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioSwitchParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioSwitchParam_descriptor_;
  metadata.reflection = ModifyPortfolioSwitchParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioPreferredLegParam::kPortfIdFieldNumber;
const int ModifyPortfolioPreferredLegParam::kLegSymbolFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioPreferredLegParam::ModifyPortfolioPreferredLegParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioPreferredLegParam::InitAsDefaultInstance() {
}

ModifyPortfolioPreferredLegParam::ModifyPortfolioPreferredLegParam(const ModifyPortfolioPreferredLegParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioPreferredLegParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioPreferredLegParam::~ModifyPortfolioPreferredLegParam() {
  SharedDtor();
}

void ModifyPortfolioPreferredLegParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (legsymbol_ != &::google::protobuf::internal::kEmptyString) {
    delete legsymbol_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioPreferredLegParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioPreferredLegParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioPreferredLegParam_descriptor_;
}

const ModifyPortfolioPreferredLegParam& ModifyPortfolioPreferredLegParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioPreferredLegParam* ModifyPortfolioPreferredLegParam::default_instance_ = NULL;

ModifyPortfolioPreferredLegParam* ModifyPortfolioPreferredLegParam::New() const {
  return new ModifyPortfolioPreferredLegParam;
}

void ModifyPortfolioPreferredLegParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_legsymbol()) {
      if (legsymbol_ != &::google::protobuf::internal::kEmptyString) {
        legsymbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioPreferredLegParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LegSymbol;
        break;
      }
      
      // required string LegSymbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legsymbol().data(), this->legsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioPreferredLegParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string LegSymbol = 2;
  if (has_legsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legsymbol().data(), this->legsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legsymbol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioPreferredLegParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string LegSymbol = 2;
  if (has_legsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legsymbol().data(), this->legsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legsymbol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioPreferredLegParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string LegSymbol = 2;
    if (has_legsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legsymbol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioPreferredLegParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioPreferredLegParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioPreferredLegParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioPreferredLegParam::MergeFrom(const ModifyPortfolioPreferredLegParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_legsymbol()) {
      set_legsymbol(from.legsymbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioPreferredLegParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioPreferredLegParam::CopyFrom(const ModifyPortfolioPreferredLegParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioPreferredLegParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ModifyPortfolioPreferredLegParam::Swap(ModifyPortfolioPreferredLegParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(legsymbol_, other->legsymbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioPreferredLegParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioPreferredLegParam_descriptor_;
  metadata.reflection = ModifyPortfolioPreferredLegParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity

// @@protoc_insertion_point(global_scope)
