// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace entity {

namespace {

const ::google::protobuf::Descriptor* StringParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortfolioItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortfolioItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegQuoteParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegQuoteParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPortfolioParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPortfolioParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PorfOpenPosiParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PorfOpenPosiParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClosePositionParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClosePositionParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegOrderUpdateParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegOrderUpdateParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArbitrageStrategySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArbitrageStrategySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePosiStrategySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePosiStrategySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalperSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalperSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyStrategyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyStrategyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioSwitchParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioSwitchParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioQtyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioQtyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyRunningStatusParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyRunningStatusParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPortfolioPreferredLegParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPortfolioPreferredLegParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelOrderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelOrderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualCloseOrderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualCloseOrderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DirectionDepends_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StopLossCloseMethods_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  StringParam_descriptor_ = file->message_type(0);
  static const int StringParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, data_),
  };
  StringParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringParam_descriptor_,
      StringParam::default_instance_,
      StringParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringParam));
  IntParam_descriptor_ = file->message_type(1);
  static const int IntParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, data_),
  };
  IntParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntParam_descriptor_,
      IntParam::default_instance_,
      IntParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntParam));
  LegItem_descriptor_ = file->message_type(2);
  static const int LegItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, ispreferred_),
  };
  LegItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegItem_descriptor_,
      LegItem::default_instance_,
      LegItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegItem));
  PortfolioItem_descriptor_ = file->message_type(3);
  static const int PortfolioItem_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, longdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, shortdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, longsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, shortsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, autoopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, autostopgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, autostoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, autotrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, enableprefer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, legs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, strategyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, strategydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, strategyrunning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, opentimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, closetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, maxposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, currentposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, avgcost_),
  };
  PortfolioItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortfolioItem_descriptor_,
      PortfolioItem::default_instance_,
      PortfolioItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortfolioItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortfolioItem));
  ConnectParam_descriptor_ = file->message_type(4);
  static const int ConnectParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, quoteaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, streamfolder_),
  };
  ConnectParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectParam_descriptor_,
      ConnectParam::default_instance_,
      ConnectParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectParam));
  OperationReturn_descriptor_ = file->message_type(5);
  static const int OperationReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, errormessage_),
  };
  OperationReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationReturn_descriptor_,
      OperationReturn::default_instance_,
      OperationReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationReturn));
  AccountSettings_descriptor_ = file->message_type(6);
  static const int AccountSettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, maxsubmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, maxcancel_),
  };
  AccountSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountSettings_descriptor_,
      AccountSettings::default_instance_,
      AccountSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountSettings));
  LoginParam_descriptor_ = file->message_type(7);
  static const int LoginParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, acctsettings_),
  };
  LoginParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginParam_descriptor_,
      LoginParam::default_instance_,
      LoginParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginParam));
  RegQuoteParam_descriptor_ = file->message_type(8);
  static const int RegQuoteParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, symbols_),
  };
  RegQuoteParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegQuoteParam_descriptor_,
      RegQuoteParam::default_instance_,
      RegQuoteParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegQuoteParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegQuoteParam));
  AddPortfolioParam_descriptor_ = file->message_type(9);
  static const int AddPortfolioParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioParam, portfolioitems_),
  };
  AddPortfolioParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPortfolioParam_descriptor_,
      AddPortfolioParam::default_instance_,
      AddPortfolioParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPortfolioParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPortfolioParam));
  PorfOpenPosiParam_descriptor_ = file->message_type(10);
  static const int PorfOpenPosiParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, isvirtual_),
  };
  PorfOpenPosiParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PorfOpenPosiParam_descriptor_,
      PorfOpenPosiParam::default_instance_,
      PorfOpenPosiParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PorfOpenPosiParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PorfOpenPosiParam));
  ClosePositionParam_descriptor_ = file->message_type(11);
  static const int ClosePositionParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, multilegorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, legordref_),
  };
  ClosePositionParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClosePositionParam_descriptor_,
      ClosePositionParam::default_instance_,
      ClosePositionParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosePositionParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClosePositionParam));
  LegOrderUpdateParam_descriptor_ = file->message_type(12);
  static const int LegOrderUpdateParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, multilegorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, legorderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, legorder_),
  };
  LegOrderUpdateParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegOrderUpdateParam_descriptor_,
      LegOrderUpdateParam::default_instance_,
      LegOrderUpdateParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegOrderUpdateParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegOrderUpdateParam));
  ArbitrageStrategySettings_descriptor_ = file->message_type(13);
  static const int ArbitrageStrategySettings_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, opencondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, openposithreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stopgaincondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stopgainthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stoplosscondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, stoplossthreshold_),
  };
  ArbitrageStrategySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArbitrageStrategySettings_descriptor_,
      ArbitrageStrategySettings::default_instance_,
      ArbitrageStrategySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArbitrageStrategySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArbitrageStrategySettings));
  ChangePosiStrategySettings_descriptor_ = file->message_type(14);
  static const int ChangePosiStrategySettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, closeleg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, closelegside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, triggercondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, threshold_),
  };
  ChangePosiStrategySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePosiStrategySettings_descriptor_,
      ChangePosiStrategySettings::default_instance_,
      ChangePosiStrategySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePosiStrategySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePosiStrategySettings));
  ScalperSettings_descriptor_ = file->message_type(15);
  static const int ScalperSettings_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casele2tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casele3tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casege4tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, casenochange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, stoplossstrategy_),
  };
  ScalperSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalperSettings_descriptor_,
      ScalperSettings::default_instance_,
      ScalperSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalperSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalperSettings));
  ModifyStrategyParam_descriptor_ = file->message_type(16);
  static const int ModifyStrategyParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, strategyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, strategydata_),
  };
  ModifyStrategyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyStrategyParam_descriptor_,
      ModifyStrategyParam::default_instance_,
      ModifyStrategyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyStrategyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyStrategyParam));
  ModifyPortfolioSwitchParam_descriptor_ = file->message_type(17);
  static const int ModifyPortfolioSwitchParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autoopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autostopgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autostoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, autotracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, enableprefer_),
  };
  ModifyPortfolioSwitchParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioSwitchParam_descriptor_,
      ModifyPortfolioSwitchParam::default_instance_,
      ModifyPortfolioSwitchParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioSwitchParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioSwitchParam));
  ModifyPortfolioQtyParam_descriptor_ = file->message_type(18);
  static const int ModifyPortfolioQtyParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, onceqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, maxqty_),
  };
  ModifyPortfolioQtyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioQtyParam_descriptor_,
      ModifyPortfolioQtyParam::default_instance_,
      ModifyPortfolioQtyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioQtyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioQtyParam));
  ModifyRunningStatusParam_descriptor_ = file->message_type(19);
  static const int ModifyRunningStatusParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, enabled_),
  };
  ModifyRunningStatusParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyRunningStatusParam_descriptor_,
      ModifyRunningStatusParam::default_instance_,
      ModifyRunningStatusParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRunningStatusParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyRunningStatusParam));
  ModifyPortfolioPreferredLegParam_descriptor_ = file->message_type(20);
  static const int ModifyPortfolioPreferredLegParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, portfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, legsymbol_),
  };
  ModifyPortfolioPreferredLegParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyPortfolioPreferredLegParam_descriptor_,
      ModifyPortfolioPreferredLegParam::default_instance_,
      ModifyPortfolioPreferredLegParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPortfolioPreferredLegParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyPortfolioPreferredLegParam));
  CancelOrderParam_descriptor_ = file->message_type(21);
  static const int CancelOrderParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, ordsysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, symbol_),
  };
  CancelOrderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelOrderParam_descriptor_,
      CancelOrderParam::default_instance_,
      CancelOrderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelOrderParam));
  ManualCloseOrderParam_descriptor_ = file->message_type(22);
  static const int ManualCloseOrderParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, quantity_),
  };
  ManualCloseOrderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualCloseOrderParam_descriptor_,
      ManualCloseOrderParam::default_instance_,
      ManualCloseOrderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualCloseOrderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualCloseOrderParam));
  SymbolInfo_descriptor_ = file->message_type(23);
  static const int SymbolInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, volumemultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, pricetick_),
  };
  SymbolInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolInfo_descriptor_,
      SymbolInfo::default_instance_,
      SymbolInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolInfo));
  DirectionDepends_descriptor_ = file->enum_type(0);
  StopLossCloseMethods_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringParam_descriptor_, &StringParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntParam_descriptor_, &IntParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegItem_descriptor_, &LegItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortfolioItem_descriptor_, &PortfolioItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectParam_descriptor_, &ConnectParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationReturn_descriptor_, &OperationReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountSettings_descriptor_, &AccountSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginParam_descriptor_, &LoginParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegQuoteParam_descriptor_, &RegQuoteParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPortfolioParam_descriptor_, &AddPortfolioParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PorfOpenPosiParam_descriptor_, &PorfOpenPosiParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClosePositionParam_descriptor_, &ClosePositionParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegOrderUpdateParam_descriptor_, &LegOrderUpdateParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArbitrageStrategySettings_descriptor_, &ArbitrageStrategySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePosiStrategySettings_descriptor_, &ChangePosiStrategySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalperSettings_descriptor_, &ScalperSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyStrategyParam_descriptor_, &ModifyStrategyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioSwitchParam_descriptor_, &ModifyPortfolioSwitchParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioQtyParam_descriptor_, &ModifyPortfolioQtyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyRunningStatusParam_descriptor_, &ModifyRunningStatusParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyPortfolioPreferredLegParam_descriptor_, &ModifyPortfolioPreferredLegParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelOrderParam_descriptor_, &CancelOrderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualCloseOrderParam_descriptor_, &ManualCloseOrderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolInfo_descriptor_, &SymbolInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete StringParam::default_instance_;
  delete StringParam_reflection_;
  delete IntParam::default_instance_;
  delete IntParam_reflection_;
  delete LegItem::default_instance_;
  delete LegItem_reflection_;
  delete PortfolioItem::default_instance_;
  delete PortfolioItem_reflection_;
  delete ConnectParam::default_instance_;
  delete ConnectParam_reflection_;
  delete OperationReturn::default_instance_;
  delete OperationReturn_reflection_;
  delete AccountSettings::default_instance_;
  delete AccountSettings_reflection_;
  delete LoginParam::default_instance_;
  delete LoginParam_reflection_;
  delete RegQuoteParam::default_instance_;
  delete RegQuoteParam_reflection_;
  delete AddPortfolioParam::default_instance_;
  delete AddPortfolioParam_reflection_;
  delete PorfOpenPosiParam::default_instance_;
  delete PorfOpenPosiParam_reflection_;
  delete ClosePositionParam::default_instance_;
  delete ClosePositionParam_reflection_;
  delete LegOrderUpdateParam::default_instance_;
  delete LegOrderUpdateParam_reflection_;
  delete ArbitrageStrategySettings::default_instance_;
  delete ArbitrageStrategySettings_reflection_;
  delete ChangePosiStrategySettings::default_instance_;
  delete ChangePosiStrategySettings_reflection_;
  delete ScalperSettings::default_instance_;
  delete ScalperSettings_reflection_;
  delete ModifyStrategyParam::default_instance_;
  delete ModifyStrategyParam_reflection_;
  delete ModifyPortfolioSwitchParam::default_instance_;
  delete ModifyPortfolioSwitchParam_reflection_;
  delete ModifyPortfolioQtyParam::default_instance_;
  delete ModifyPortfolioQtyParam_reflection_;
  delete ModifyRunningStatusParam::default_instance_;
  delete ModifyRunningStatusParam_reflection_;
  delete ModifyPortfolioPreferredLegParam::default_instance_;
  delete ModifyPortfolioPreferredLegParam_reflection_;
  delete CancelOrderParam::default_instance_;
  delete CancelOrderParam_reflection_;
  delete ManualCloseOrderParam::default_instance_;
  delete ManualCloseOrderParam_reflection_;
  delete SymbolInfo::default_instance_;
  delete SymbolInfo_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::entity::protobuf_AddDesc_enum_2eproto();
  ::trade::protobuf_AddDesc_trade_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\006entity\032\nenum.proto\032\013tra"
    "de.proto\"\033\n\013StringParam\022\014\n\004Data\030\001 \002(\t\"\030\n"
    "\010IntParam\022\014\n\004Data\030\002 \002(\005\"\323\001\n\007LegItem\022\016\n\006S"
    "ymbol\030\001 \002(\t\022\r\n\005Ratio\030\002 \002(\005\022\'\n\004Side\030\003 \002(\016"
    "2\031.entity.PosiDirectionType\022!\n\006Status\030\004 "
    "\002(\0162\021.entity.LegStatus\022\014\n\004Last\030\005 \002(\001\022\013\n\003"
    "Ask\030\006 \002(\001\022\017\n\007AskSize\030\007 \002(\005\022\013\n\003Bid\030\010 \002(\001\022"
    "\017\n\007BidSize\030\t \002(\005\022\023\n\013IsPreferred\030\n \002(\010\"\306\003"
    "\n\rPortfolioItem\022\n\n\002ID\030\001 \002(\t\022\020\n\010Quantity\030"
    "\002 \002(\005\022\014\n\004Diff\030\003 \002(\001\022\020\n\010LongDiff\030\004 \002(\001\022\021\n"
    "\tShortDiff\030\005 \002(\001\022\020\n\010LongSize\030\006 \002(\005\022\021\n\tSh"
    "ortSize\030\007 \002(\005\022\020\n\010AutoOpen\030\010 \002(\010\022\024\n\014AutoS"
    "topGain\030\t \002(\010\022\024\n\014AutoStopLoss\030\n \002(\010\022\021\n\tA"
    "utoTrack\030\013 \002(\010\022\024\n\014EnablePrefer\030\014 \002(\010\022\035\n\004"
    "Legs\030\r \003(\0132\017.entity.LegItem\022\024\n\014StrategyN"
    "ame\030\016 \002(\t\022\024\n\014StrategyData\030\017 \002(\014\022\027\n\017Strat"
    "egyRunning\030\020 \002(\010\022\021\n\tOpenTimes\030\021 \002(\005\022\022\n\nC"
    "loseTimes\030\022 \002(\005\022\016\n\006Profit\030\023 \002(\001\022\023\n\013MaxPo"
    "sition\030\024 \002(\005\022\027\n\017CurrentPosition\030\025 \002(\005\022\017\n"
    "\007AvgCost\030\026 \002(\001\":\n\014ConnectParam\022\024\n\014QuoteA"
    "ddress\030\001 \002(\t\022\024\n\014StreamFolder\030\002 \002(\t\"8\n\017Op"
    "erationReturn\022\017\n\007Success\030\001 \002(\010\022\024\n\014ErrorM"
    "essage\030\002 \002(\t\"7\n\017AccountSettings\022\021\n\tMaxSu"
    "bmit\030\001 \002(\005\022\021\n\tMaxCancel\030\002 \002(\005\"o\n\nLoginPa"
    "ram\022\020\n\010BrokerId\030\001 \002(\t\022\016\n\006UserId\030\002 \002(\t\022\020\n"
    "\010Password\030\003 \002(\t\022-\n\014AcctSettings\030\004 \001(\0132\027."
    "entity.AccountSettings\" \n\rRegQuoteParam\022"
    "\017\n\007Symbols\030\001 \003(\t\"B\n\021AddPortfolioParam\022-\n"
    "\016PortfolioItems\030\001 \003(\0132\025.entity.Portfolio"
    "Item\"I\n\021PorfOpenPosiParam\022\017\n\007PortfId\030\001 \002"
    "(\t\022\020\n\010Quantity\030\002 \002(\005\022\021\n\tIsVirtual\030\003 \002(\010\""
    "T\n\022ClosePositionParam\022+\n\rMultiLegOrder\030\001"
    " \002(\0132\024.trade.MultiLegOrder\022\021\n\tLegOrdRef\030"
    "\002 \001(\t\"t\n\023LegOrderUpdateParam\022\017\n\007PortfId\030"
    "\001 \002(\t\022\027\n\017MultiLegOrderId\030\002 \002(\t\022\023\n\013LegOrd"
    "erRef\030\003 \002(\t\022\036\n\010LegOrder\030\004 \002(\0132\014.trade.Or"
    "der\"\260\002\n\031ArbitrageStrategySettings\022\'\n\004Sid"
    "e\030\001 \002(\0162\031.entity.PosiDirectionType\022/\n\rOp"
    "enCondition\030\002 \002(\0162\030.entity.CompareCondit"
    "ion\022\031\n\021OpenPosiThreshold\030\003 \002(\001\0223\n\021StopGa"
    "inCondition\030\004 \002(\0162\030.entity.CompareCondit"
    "ion\022\031\n\021StopGainThreshold\030\005 \002(\001\0223\n\021StopLo"
    "ssCondition\030\006 \002(\0162\030.entity.CompareCondit"
    "ion\022\031\n\021StopLossThreshold\030\007 \002(\001\"\246\001\n\032Chang"
    "ePosiStrategySettings\022\020\n\010CloseLeg\030\001 \002(\t\022"
    "/\n\014CloseLegSide\030\002 \002(\0162\031.entity.PosiDirec"
    "tionType\0222\n\020TriggerCondition\030\003 \002(\0162\030.ent"
    "ity.CompareCondition\022\021\n\tThreshold\030\004 \002(\001\""
    "\254\002\n\017ScalperSettings\022\021\n\tThreshold\030\001 \002(\001\022\021"
    "\n\tPriceTick\030\002 \002(\001\022-\n\013CaseLE2Tick\030\003 \002(\0162\030"
    ".entity.DirectionDepends\022-\n\013CaseLE3Tick\030"
    "\004 \002(\0162\030.entity.DirectionDepends\022-\n\013CaseG"
    "E4Tick\030\005 \002(\0162\030.entity.DirectionDepends\022."
    "\n\014CaseNoChange\030\006 \002(\0162\030.entity.DirectionD"
    "epends\0226\n\020StopLossStrategy\030\007 \002(\0162\034.entit"
    "y.StopLossCloseMethods\"R\n\023ModifyStrategy"
    "Param\022\017\n\007PortfId\030\001 \002(\t\022\024\n\014StrategyName\030\002"
    " \002(\t\022\024\n\014StrategyData\030\003 \002(\014\"\227\001\n\032ModifyPor"
    "tfolioSwitchParam\022\017\n\007PortfId\030\001 \002(\t\022\020\n\010Au"
    "toOpen\030\002 \002(\010\022\024\n\014AutoStopGain\030\003 \002(\010\022\024\n\014Au"
    "toStopLoss\030\004 \002(\010\022\024\n\014AutoTracking\030\005 \002(\010\022\024"
    "\n\014EnablePrefer\030\006 \002(\010\"K\n\027ModifyPortfolioQ"
    "tyParam\022\017\n\007PortfId\030\001 \002(\t\022\017\n\007OnceQty\030\002 \002("
    "\005\022\016\n\006MaxQty\030\003 \002(\005\"<\n\030ModifyRunningStatus"
    "Param\022\017\n\007PortfId\030\001 \002(\t\022\017\n\007Enabled\030\002 \002(\010\""
    "F\n ModifyPortfolioPreferredLegParam\022\017\n\007P"
    "ortfId\030\001 \002(\t\022\021\n\tLegSymbol\030\002 \002(\t\"j\n\020Cance"
    "lOrderParam\022\020\n\010OrderRef\030\001 \002(\t\022\022\n\nExchang"
    "eId\030\002 \002(\t\022\020\n\010OrdSysId\030\003 \002(\t\022\016\n\006UserId\030\004 "
    "\002(\t\022\016\n\006Symbol\030\005 \002(\t\"y\n\025ManualCloseOrderP"
    "aram\022\016\n\006Symbol\030\001 \002(\t\022,\n\tDirection\030\002 \002(\0162"
    "\031.trade.TradeDirectionType\022\020\n\010OpenDate\030\003"
    " \002(\t\022\020\n\010Quantity\030\004 \002(\005\"\212\001\n\nSymbolInfo\022\022\n"
    "\nInstrument\030\001 \002(\t\022\022\n\nExchangeID\030\002 \002(\t\022\026\n"
    "\016ExchangeInstID\030\003 \002(\t\022\021\n\tProductID\030\004 \002(\t"
    "\022\026\n\016VolumeMultiple\030\005 \002(\005\022\021\n\tPriceTick\030\006 "
    "\002(\001*o\n\020DirectionDepends\022\017\n\013IGNORE_THIS\020\000"
    "\022\021\n\rON_SMALL_SIZE\020\001\022\017\n\013ON_BIG_SIZE\020\002\022\023\n\017"
    "ON_SMALL_CHANGE\020\003\022\021\n\rON_BIG_CHANGE\020\004*I\n\024"
    "StopLossCloseMethods\022\027\n\023BASED_ON_NEXT_QU"
    "OTE\020\000\022\030\n\024BASED_ON_INPUT_LIMIT\020\001", 3231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  StringParam::default_instance_ = new StringParam();
  IntParam::default_instance_ = new IntParam();
  LegItem::default_instance_ = new LegItem();
  PortfolioItem::default_instance_ = new PortfolioItem();
  ConnectParam::default_instance_ = new ConnectParam();
  OperationReturn::default_instance_ = new OperationReturn();
  AccountSettings::default_instance_ = new AccountSettings();
  LoginParam::default_instance_ = new LoginParam();
  RegQuoteParam::default_instance_ = new RegQuoteParam();
  AddPortfolioParam::default_instance_ = new AddPortfolioParam();
  PorfOpenPosiParam::default_instance_ = new PorfOpenPosiParam();
  ClosePositionParam::default_instance_ = new ClosePositionParam();
  LegOrderUpdateParam::default_instance_ = new LegOrderUpdateParam();
  ArbitrageStrategySettings::default_instance_ = new ArbitrageStrategySettings();
  ChangePosiStrategySettings::default_instance_ = new ChangePosiStrategySettings();
  ScalperSettings::default_instance_ = new ScalperSettings();
  ModifyStrategyParam::default_instance_ = new ModifyStrategyParam();
  ModifyPortfolioSwitchParam::default_instance_ = new ModifyPortfolioSwitchParam();
  ModifyPortfolioQtyParam::default_instance_ = new ModifyPortfolioQtyParam();
  ModifyRunningStatusParam::default_instance_ = new ModifyRunningStatusParam();
  ModifyPortfolioPreferredLegParam::default_instance_ = new ModifyPortfolioPreferredLegParam();
  CancelOrderParam::default_instance_ = new CancelOrderParam();
  ManualCloseOrderParam::default_instance_ = new ManualCloseOrderParam();
  SymbolInfo::default_instance_ = new SymbolInfo();
  StringParam::default_instance_->InitAsDefaultInstance();
  IntParam::default_instance_->InitAsDefaultInstance();
  LegItem::default_instance_->InitAsDefaultInstance();
  PortfolioItem::default_instance_->InitAsDefaultInstance();
  ConnectParam::default_instance_->InitAsDefaultInstance();
  OperationReturn::default_instance_->InitAsDefaultInstance();
  AccountSettings::default_instance_->InitAsDefaultInstance();
  LoginParam::default_instance_->InitAsDefaultInstance();
  RegQuoteParam::default_instance_->InitAsDefaultInstance();
  AddPortfolioParam::default_instance_->InitAsDefaultInstance();
  PorfOpenPosiParam::default_instance_->InitAsDefaultInstance();
  ClosePositionParam::default_instance_->InitAsDefaultInstance();
  LegOrderUpdateParam::default_instance_->InitAsDefaultInstance();
  ArbitrageStrategySettings::default_instance_->InitAsDefaultInstance();
  ChangePosiStrategySettings::default_instance_->InitAsDefaultInstance();
  ScalperSettings::default_instance_->InitAsDefaultInstance();
  ModifyStrategyParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioSwitchParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioQtyParam::default_instance_->InitAsDefaultInstance();
  ModifyRunningStatusParam::default_instance_->InitAsDefaultInstance();
  ModifyPortfolioPreferredLegParam::default_instance_->InitAsDefaultInstance();
  CancelOrderParam::default_instance_->InitAsDefaultInstance();
  ManualCloseOrderParam::default_instance_->InitAsDefaultInstance();
  SymbolInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

const ::google::protobuf::EnumDescriptor* DirectionDepends_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionDepends_descriptor_;
}
bool DirectionDepends_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StopLossCloseMethods_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopLossCloseMethods_descriptor_;
}
bool StopLossCloseMethods_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StringParam::kDataFieldNumber;
#endif  // !_MSC_VER

StringParam::StringParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringParam::InitAsDefaultInstance() {
}

StringParam::StringParam(const StringParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringParam::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringParam::~StringParam() {
  SharedDtor();
}

void StringParam::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void StringParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringParam_descriptor_;
}

const StringParam& StringParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

StringParam* StringParam::default_instance_ = NULL;

StringParam* StringParam::New() const {
  return new StringParam;
}

void StringParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringParam::MergeFrom(const StringParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringParam::CopyFrom(const StringParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StringParam::Swap(StringParam* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringParam_descriptor_;
  metadata.reflection = StringParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntParam::kDataFieldNumber;
#endif  // !_MSC_VER

IntParam::IntParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntParam::InitAsDefaultInstance() {
}

IntParam::IntParam(const IntParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntParam::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntParam::~IntParam() {
  SharedDtor();
}

void IntParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntParam_descriptor_;
}

const IntParam& IntParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

IntParam* IntParam::default_instance_ = NULL;

IntParam* IntParam::New() const {
  return new IntParam;
}

void IntParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntParam::MergeFrom(const IntParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntParam::CopyFrom(const IntParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IntParam::Swap(IntParam* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntParam_descriptor_;
  metadata.reflection = IntParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegItem::kSymbolFieldNumber;
const int LegItem::kRatioFieldNumber;
const int LegItem::kSideFieldNumber;
const int LegItem::kStatusFieldNumber;
const int LegItem::kLastFieldNumber;
const int LegItem::kAskFieldNumber;
const int LegItem::kAskSizeFieldNumber;
const int LegItem::kBidFieldNumber;
const int LegItem::kBidSizeFieldNumber;
const int LegItem::kIsPreferredFieldNumber;
#endif  // !_MSC_VER

LegItem::LegItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegItem::InitAsDefaultInstance() {
}

LegItem::LegItem(const LegItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegItem::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ratio_ = 0;
  side_ = 49;
  status_ = 0;
  last_ = 0;
  ask_ = 0;
  asksize_ = 0;
  bid_ = 0;
  bidsize_ = 0;
  ispreferred_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegItem::~LegItem() {
  SharedDtor();
}

void LegItem::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void LegItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegItem_descriptor_;
}

const LegItem& LegItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegItem* LegItem::default_instance_ = NULL;

LegItem* LegItem::New() const {
  return new LegItem;
}

void LegItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    ratio_ = 0;
    side_ = 49;
    status_ = 0;
    last_ = 0;
    ask_ = 0;
    asksize_ = 0;
    bid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bidsize_ = 0;
    ispreferred_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ratio;
        break;
      }
      
      // required int32 Ratio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Side;
        break;
      }
      
      // required .entity.PosiDirectionType Side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }
      
      // required .entity.LegStatus Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::LegStatus_IsValid(value)) {
            set_status(static_cast< entity::LegStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Last;
        break;
      }
      
      // required double Last = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Ask;
        break;
      }
      
      // required double Ask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AskSize;
        break;
      }
      
      // required int32 AskSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Bid;
        break;
      }
      
      // required double Bid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BidSize;
        break;
      }
      
      // required int32 BidSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsPreferred;
        break;
      }
      
      // required bool IsPreferred = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPreferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispreferred_)));
          set_has_ispreferred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }
  
  // required int32 Ratio = 2;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ratio(), output);
  }
  
  // required .entity.PosiDirectionType Side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->side(), output);
  }
  
  // required .entity.LegStatus Status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }
  
  // required double Last = 5;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->last(), output);
  }
  
  // required double Ask = 6;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask(), output);
  }
  
  // required int32 AskSize = 7;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->asksize(), output);
  }
  
  // required double Bid = 8;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->bid(), output);
  }
  
  // required int32 BidSize = 9;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidsize(), output);
  }
  
  // required bool IsPreferred = 10;
  if (has_ispreferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ispreferred(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }
  
  // required int32 Ratio = 2;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ratio(), target);
  }
  
  // required .entity.PosiDirectionType Side = 3;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->side(), target);
  }
  
  // required .entity.LegStatus Status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }
  
  // required double Last = 5;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->last(), target);
  }
  
  // required double Ask = 6;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask(), target);
  }
  
  // required int32 AskSize = 7;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->asksize(), target);
  }
  
  // required double Bid = 8;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->bid(), target);
  }
  
  // required int32 BidSize = 9;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidsize(), target);
  }
  
  // required bool IsPreferred = 10;
  if (has_ispreferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ispreferred(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required int32 Ratio = 2;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }
    
    // required .entity.PosiDirectionType Side = 3;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // required .entity.LegStatus Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required double Last = 5;
    if (has_last()) {
      total_size += 1 + 8;
    }
    
    // required double Ask = 6;
    if (has_ask()) {
      total_size += 1 + 8;
    }
    
    // required int32 AskSize = 7;
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }
    
    // required double Bid = 8;
    if (has_bid()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 BidSize = 9;
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }
    
    // required bool IsPreferred = 10;
    if (has_ispreferred()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegItem::MergeFrom(const LegItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_ispreferred()) {
      set_ispreferred(from.ispreferred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegItem::CopyFrom(const LegItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void LegItem::Swap(LegItem* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(ratio_, other->ratio_);
    std::swap(side_, other->side_);
    std::swap(status_, other->status_);
    std::swap(last_, other->last_);
    std::swap(ask_, other->ask_);
    std::swap(asksize_, other->asksize_);
    std::swap(bid_, other->bid_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(ispreferred_, other->ispreferred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegItem_descriptor_;
  metadata.reflection = LegItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortfolioItem::kIDFieldNumber;
const int PortfolioItem::kQuantityFieldNumber;
const int PortfolioItem::kDiffFieldNumber;
const int PortfolioItem::kLongDiffFieldNumber;
const int PortfolioItem::kShortDiffFieldNumber;
const int PortfolioItem::kLongSizeFieldNumber;
const int PortfolioItem::kShortSizeFieldNumber;
const int PortfolioItem::kAutoOpenFieldNumber;
const int PortfolioItem::kAutoStopGainFieldNumber;
const int PortfolioItem::kAutoStopLossFieldNumber;
const int PortfolioItem::kAutoTrackFieldNumber;
const int PortfolioItem::kEnablePreferFieldNumber;
const int PortfolioItem::kLegsFieldNumber;
const int PortfolioItem::kStrategyNameFieldNumber;
const int PortfolioItem::kStrategyDataFieldNumber;
const int PortfolioItem::kStrategyRunningFieldNumber;
const int PortfolioItem::kOpenTimesFieldNumber;
const int PortfolioItem::kCloseTimesFieldNumber;
const int PortfolioItem::kProfitFieldNumber;
const int PortfolioItem::kMaxPositionFieldNumber;
const int PortfolioItem::kCurrentPositionFieldNumber;
const int PortfolioItem::kAvgCostFieldNumber;
#endif  // !_MSC_VER

PortfolioItem::PortfolioItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PortfolioItem::InitAsDefaultInstance() {
}

PortfolioItem::PortfolioItem(const PortfolioItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PortfolioItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  diff_ = 0;
  longdiff_ = 0;
  shortdiff_ = 0;
  longsize_ = 0;
  shortsize_ = 0;
  autoopen_ = false;
  autostopgain_ = false;
  autostoploss_ = false;
  autotrack_ = false;
  enableprefer_ = false;
  strategyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategyrunning_ = false;
  opentimes_ = 0;
  closetimes_ = 0;
  profit_ = 0;
  maxposition_ = 0;
  currentposition_ = 0;
  avgcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortfolioItem::~PortfolioItem() {
  SharedDtor();
}

void PortfolioItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
    delete strategyname_;
  }
  if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
    delete strategydata_;
  }
  if (this != default_instance_) {
  }
}

void PortfolioItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortfolioItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortfolioItem_descriptor_;
}

const PortfolioItem& PortfolioItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PortfolioItem* PortfolioItem::default_instance_ = NULL;

PortfolioItem* PortfolioItem::New() const {
  return new PortfolioItem;
}

void PortfolioItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    quantity_ = 0;
    diff_ = 0;
    longdiff_ = 0;
    shortdiff_ = 0;
    longsize_ = 0;
    shortsize_ = 0;
    autoopen_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    autostopgain_ = false;
    autostoploss_ = false;
    autotrack_ = false;
    enableprefer_ = false;
    if (has_strategyname()) {
      if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
        strategyname_->clear();
      }
    }
    if (has_strategydata()) {
      if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
        strategydata_->clear();
      }
    }
    strategyrunning_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    opentimes_ = 0;
    closetimes_ = 0;
    profit_ = 0;
    maxposition_ = 0;
    currentposition_ = 0;
    avgcost_ = 0;
  }
  legs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortfolioItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Diff;
        break;
      }
      
      // required double Diff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_LongDiff;
        break;
      }
      
      // required double LongDiff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LongDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longdiff_)));
          set_has_longdiff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ShortDiff;
        break;
      }
      
      // required double ShortDiff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShortDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortdiff_)));
          set_has_shortdiff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LongSize;
        break;
      }
      
      // required int32 LongSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LongSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longsize_)));
          set_has_longsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ShortSize;
        break;
      }
      
      // required int32 ShortSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShortSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortsize_)));
          set_has_shortsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AutoOpen;
        break;
      }
      
      // required bool AutoOpen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoopen_)));
          set_has_autoopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_AutoStopGain;
        break;
      }
      
      // required bool AutoStopGain = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostopgain_)));
          set_has_autostopgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_AutoStopLoss;
        break;
      }
      
      // required bool AutoStopLoss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostoploss_)));
          set_has_autostoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_AutoTrack;
        break;
      }
      
      // required bool AutoTrack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoTrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autotrack_)));
          set_has_autotrack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_EnablePrefer;
        break;
      }
      
      // required bool EnablePrefer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnablePrefer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableprefer_)));
          set_has_enableprefer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Legs;
        break;
      }
      
      // repeated .entity.LegItem Legs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Legs;
        if (input->ExpectTag(114)) goto parse_StrategyName;
        break;
      }
      
      // required string StrategyName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategyname().data(), this->strategyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_StrategyData;
        break;
      }
      
      // required bytes StrategyData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_StrategyRunning;
        break;
      }
      
      // required bool StrategyRunning = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StrategyRunning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strategyrunning_)));
          set_has_strategyrunning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_OpenTimes;
        break;
      }
      
      // required int32 OpenTimes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentimes_)));
          set_has_opentimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_CloseTimes;
        break;
      }
      
      // required int32 CloseTimes = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetimes_)));
          set_has_closetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_Profit;
        break;
      }
      
      // required double Profit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_MaxPosition;
        break;
      }
      
      // required int32 MaxPosition = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxposition_)));
          set_has_maxposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CurrentPosition;
        break;
      }
      
      // required int32 CurrentPosition = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentposition_)));
          set_has_currentposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_AvgCost;
        break;
      }
      
      // required double AvgCost = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AvgCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgcost_)));
          set_has_avgcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PortfolioItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // required double Diff = 3;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->diff(), output);
  }
  
  // required double LongDiff = 4;
  if (has_longdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longdiff(), output);
  }
  
  // required double ShortDiff = 5;
  if (has_shortdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->shortdiff(), output);
  }
  
  // required int32 LongSize = 6;
  if (has_longsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->longsize(), output);
  }
  
  // required int32 ShortSize = 7;
  if (has_shortsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->shortsize(), output);
  }
  
  // required bool AutoOpen = 8;
  if (has_autoopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->autoopen(), output);
  }
  
  // required bool AutoStopGain = 9;
  if (has_autostopgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->autostopgain(), output);
  }
  
  // required bool AutoStopLoss = 10;
  if (has_autostoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->autostoploss(), output);
  }
  
  // required bool AutoTrack = 11;
  if (has_autotrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->autotrack(), output);
  }
  
  // required bool EnablePrefer = 12;
  if (has_enableprefer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enableprefer(), output);
  }
  
  // repeated .entity.LegItem Legs = 13;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->legs(i), output);
  }
  
  // required string StrategyName = 14;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->strategyname(), output);
  }
  
  // required bytes StrategyData = 15;
  if (has_strategydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->strategydata(), output);
  }
  
  // required bool StrategyRunning = 16;
  if (has_strategyrunning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->strategyrunning(), output);
  }
  
  // required int32 OpenTimes = 17;
  if (has_opentimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->opentimes(), output);
  }
  
  // required int32 CloseTimes = 18;
  if (has_closetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->closetimes(), output);
  }
  
  // required double Profit = 19;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->profit(), output);
  }
  
  // required int32 MaxPosition = 20;
  if (has_maxposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->maxposition(), output);
  }
  
  // required int32 CurrentPosition = 21;
  if (has_currentposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->currentposition(), output);
  }
  
  // required double AvgCost = 22;
  if (has_avgcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->avgcost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PortfolioItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  // required double Diff = 3;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->diff(), target);
  }
  
  // required double LongDiff = 4;
  if (has_longdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longdiff(), target);
  }
  
  // required double ShortDiff = 5;
  if (has_shortdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->shortdiff(), target);
  }
  
  // required int32 LongSize = 6;
  if (has_longsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->longsize(), target);
  }
  
  // required int32 ShortSize = 7;
  if (has_shortsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->shortsize(), target);
  }
  
  // required bool AutoOpen = 8;
  if (has_autoopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->autoopen(), target);
  }
  
  // required bool AutoStopGain = 9;
  if (has_autostopgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->autostopgain(), target);
  }
  
  // required bool AutoStopLoss = 10;
  if (has_autostoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->autostoploss(), target);
  }
  
  // required bool AutoTrack = 11;
  if (has_autotrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->autotrack(), target);
  }
  
  // required bool EnablePrefer = 12;
  if (has_enableprefer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enableprefer(), target);
  }
  
  // repeated .entity.LegItem Legs = 13;
  for (int i = 0; i < this->legs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->legs(i), target);
  }
  
  // required string StrategyName = 14;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->strategyname(), target);
  }
  
  // required bytes StrategyData = 15;
  if (has_strategydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->strategydata(), target);
  }
  
  // required bool StrategyRunning = 16;
  if (has_strategyrunning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->strategyrunning(), target);
  }
  
  // required int32 OpenTimes = 17;
  if (has_opentimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->opentimes(), target);
  }
  
  // required int32 CloseTimes = 18;
  if (has_closetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->closetimes(), target);
  }
  
  // required double Profit = 19;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->profit(), target);
  }
  
  // required int32 MaxPosition = 20;
  if (has_maxposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->maxposition(), target);
  }
  
  // required int32 CurrentPosition = 21;
  if (has_currentposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->currentposition(), target);
  }
  
  // required double AvgCost = 22;
  if (has_avgcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->avgcost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PortfolioItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required double Diff = 3;
    if (has_diff()) {
      total_size += 1 + 8;
    }
    
    // required double LongDiff = 4;
    if (has_longdiff()) {
      total_size += 1 + 8;
    }
    
    // required double ShortDiff = 5;
    if (has_shortdiff()) {
      total_size += 1 + 8;
    }
    
    // required int32 LongSize = 6;
    if (has_longsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longsize());
    }
    
    // required int32 ShortSize = 7;
    if (has_shortsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortsize());
    }
    
    // required bool AutoOpen = 8;
    if (has_autoopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool AutoStopGain = 9;
    if (has_autostopgain()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopLoss = 10;
    if (has_autostoploss()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoTrack = 11;
    if (has_autotrack()) {
      total_size += 1 + 1;
    }
    
    // required bool EnablePrefer = 12;
    if (has_enableprefer()) {
      total_size += 1 + 1;
    }
    
    // required string StrategyName = 14;
    if (has_strategyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategyname());
    }
    
    // required bytes StrategyData = 15;
    if (has_strategydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategydata());
    }
    
    // required bool StrategyRunning = 16;
    if (has_strategyrunning()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 OpenTimes = 17;
    if (has_opentimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentimes());
    }
    
    // required int32 CloseTimes = 18;
    if (has_closetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetimes());
    }
    
    // required double Profit = 19;
    if (has_profit()) {
      total_size += 2 + 8;
    }
    
    // required int32 MaxPosition = 20;
    if (has_maxposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxposition());
    }
    
    // required int32 CurrentPosition = 21;
    if (has_currentposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentposition());
    }
    
    // required double AvgCost = 22;
    if (has_avgcost()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .entity.LegItem Legs = 13;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortfolioItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortfolioItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortfolioItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortfolioItem::MergeFrom(const PortfolioItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  legs_.MergeFrom(from.legs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_diff()) {
      set_diff(from.diff());
    }
    if (from.has_longdiff()) {
      set_longdiff(from.longdiff());
    }
    if (from.has_shortdiff()) {
      set_shortdiff(from.shortdiff());
    }
    if (from.has_longsize()) {
      set_longsize(from.longsize());
    }
    if (from.has_shortsize()) {
      set_shortsize(from.shortsize());
    }
    if (from.has_autoopen()) {
      set_autoopen(from.autoopen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_autostopgain()) {
      set_autostopgain(from.autostopgain());
    }
    if (from.has_autostoploss()) {
      set_autostoploss(from.autostoploss());
    }
    if (from.has_autotrack()) {
      set_autotrack(from.autotrack());
    }
    if (from.has_enableprefer()) {
      set_enableprefer(from.enableprefer());
    }
    if (from.has_strategyname()) {
      set_strategyname(from.strategyname());
    }
    if (from.has_strategydata()) {
      set_strategydata(from.strategydata());
    }
    if (from.has_strategyrunning()) {
      set_strategyrunning(from.strategyrunning());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_opentimes()) {
      set_opentimes(from.opentimes());
    }
    if (from.has_closetimes()) {
      set_closetimes(from.closetimes());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_maxposition()) {
      set_maxposition(from.maxposition());
    }
    if (from.has_currentposition()) {
      set_currentposition(from.currentposition());
    }
    if (from.has_avgcost()) {
      set_avgcost(from.avgcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortfolioItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortfolioItem::CopyFrom(const PortfolioItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fefff) != 0x003fefff) return false;
  
  for (int i = 0; i < legs_size(); i++) {
    if (!this->legs(i).IsInitialized()) return false;
  }
  return true;
}

void PortfolioItem::Swap(PortfolioItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quantity_, other->quantity_);
    std::swap(diff_, other->diff_);
    std::swap(longdiff_, other->longdiff_);
    std::swap(shortdiff_, other->shortdiff_);
    std::swap(longsize_, other->longsize_);
    std::swap(shortsize_, other->shortsize_);
    std::swap(autoopen_, other->autoopen_);
    std::swap(autostopgain_, other->autostopgain_);
    std::swap(autostoploss_, other->autostoploss_);
    std::swap(autotrack_, other->autotrack_);
    std::swap(enableprefer_, other->enableprefer_);
    legs_.Swap(&other->legs_);
    std::swap(strategyname_, other->strategyname_);
    std::swap(strategydata_, other->strategydata_);
    std::swap(strategyrunning_, other->strategyrunning_);
    std::swap(opentimes_, other->opentimes_);
    std::swap(closetimes_, other->closetimes_);
    std::swap(profit_, other->profit_);
    std::swap(maxposition_, other->maxposition_);
    std::swap(currentposition_, other->currentposition_);
    std::swap(avgcost_, other->avgcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortfolioItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortfolioItem_descriptor_;
  metadata.reflection = PortfolioItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectParam::kQuoteAddressFieldNumber;
const int ConnectParam::kStreamFolderFieldNumber;
#endif  // !_MSC_VER

ConnectParam::ConnectParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectParam::InitAsDefaultInstance() {
}

ConnectParam::ConnectParam(const ConnectParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectParam::SharedCtor() {
  _cached_size_ = 0;
  quoteaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  streamfolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectParam::~ConnectParam() {
  SharedDtor();
}

void ConnectParam::SharedDtor() {
  if (quoteaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete quoteaddress_;
  }
  if (streamfolder_ != &::google::protobuf::internal::kEmptyString) {
    delete streamfolder_;
  }
  if (this != default_instance_) {
  }
}

void ConnectParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectParam_descriptor_;
}

const ConnectParam& ConnectParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ConnectParam* ConnectParam::default_instance_ = NULL;

ConnectParam* ConnectParam::New() const {
  return new ConnectParam;
}

void ConnectParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quoteaddress()) {
      if (quoteaddress_ != &::google::protobuf::internal::kEmptyString) {
        quoteaddress_->clear();
      }
    }
    if (has_streamfolder()) {
      if (streamfolder_ != &::google::protobuf::internal::kEmptyString) {
        streamfolder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string QuoteAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quoteaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quoteaddress().data(), this->quoteaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StreamFolder;
        break;
      }
      
      // required string StreamFolder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StreamFolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamfolder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streamfolder().data(), this->streamfolder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string QuoteAddress = 1;
  if (has_quoteaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaddress().data(), this->quoteaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->quoteaddress(), output);
  }
  
  // required string StreamFolder = 2;
  if (has_streamfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamfolder().data(), this->streamfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->streamfolder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string QuoteAddress = 1;
  if (has_quoteaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaddress().data(), this->quoteaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quoteaddress(), target);
  }
  
  // required string StreamFolder = 2;
  if (has_streamfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamfolder().data(), this->streamfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->streamfolder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string QuoteAddress = 1;
    if (has_quoteaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quoteaddress());
    }
    
    // required string StreamFolder = 2;
    if (has_streamfolder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamfolder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectParam::MergeFrom(const ConnectParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quoteaddress()) {
      set_quoteaddress(from.quoteaddress());
    }
    if (from.has_streamfolder()) {
      set_streamfolder(from.streamfolder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectParam::CopyFrom(const ConnectParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ConnectParam::Swap(ConnectParam* other) {
  if (other != this) {
    std::swap(quoteaddress_, other->quoteaddress_);
    std::swap(streamfolder_, other->streamfolder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectParam_descriptor_;
  metadata.reflection = ConnectParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationReturn::kSuccessFieldNumber;
const int OperationReturn::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

OperationReturn::OperationReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationReturn::InitAsDefaultInstance() {
}

OperationReturn::OperationReturn(const OperationReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationReturn::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationReturn::~OperationReturn() {
  SharedDtor();
}

void OperationReturn::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void OperationReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationReturn_descriptor_;
}

const OperationReturn& OperationReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OperationReturn* OperationReturn::default_instance_ = NULL;

OperationReturn* OperationReturn::New() const {
  return new OperationReturn;
}

void OperationReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorMessage;
        break;
      }
      
      // required string ErrorMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool Success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string ErrorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string ErrorMessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationReturn::MergeFrom(const OperationReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationReturn::CopyFrom(const OperationReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OperationReturn::Swap(OperationReturn* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationReturn_descriptor_;
  metadata.reflection = OperationReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountSettings::kMaxSubmitFieldNumber;
const int AccountSettings::kMaxCancelFieldNumber;
#endif  // !_MSC_VER

AccountSettings::AccountSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountSettings::InitAsDefaultInstance() {
}

AccountSettings::AccountSettings(const AccountSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountSettings::SharedCtor() {
  _cached_size_ = 0;
  maxsubmit_ = 0;
  maxcancel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountSettings::~AccountSettings() {
  SharedDtor();
}

void AccountSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountSettings_descriptor_;
}

const AccountSettings& AccountSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AccountSettings* AccountSettings::default_instance_ = NULL;

AccountSettings* AccountSettings::New() const {
  return new AccountSettings;
}

void AccountSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxsubmit_ = 0;
    maxcancel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MaxSubmit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsubmit_)));
          set_has_maxsubmit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxCancel;
        break;
      }
      
      // required int32 MaxCancel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxCancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcancel_)));
          set_has_maxcancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MaxSubmit = 1;
  if (has_maxsubmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxsubmit(), output);
  }
  
  // required int32 MaxCancel = 2;
  if (has_maxcancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcancel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MaxSubmit = 1;
  if (has_maxsubmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxsubmit(), target);
  }
  
  // required int32 MaxCancel = 2;
  if (has_maxcancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcancel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MaxSubmit = 1;
    if (has_maxsubmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsubmit());
    }
    
    // required int32 MaxCancel = 2;
    if (has_maxcancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcancel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountSettings::MergeFrom(const AccountSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxsubmit()) {
      set_maxsubmit(from.maxsubmit());
    }
    if (from.has_maxcancel()) {
      set_maxcancel(from.maxcancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSettings::CopyFrom(const AccountSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AccountSettings::Swap(AccountSettings* other) {
  if (other != this) {
    std::swap(maxsubmit_, other->maxsubmit_);
    std::swap(maxcancel_, other->maxcancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountSettings_descriptor_;
  metadata.reflection = AccountSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginParam::kBrokerIdFieldNumber;
const int LoginParam::kUserIdFieldNumber;
const int LoginParam::kPasswordFieldNumber;
const int LoginParam::kAcctSettingsFieldNumber;
#endif  // !_MSC_VER

LoginParam::LoginParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginParam::InitAsDefaultInstance() {
  acctsettings_ = const_cast< ::entity::AccountSettings*>(&::entity::AccountSettings::default_instance());
}

LoginParam::LoginParam(const LoginParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginParam::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acctsettings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginParam::~LoginParam() {
  SharedDtor();
}

void LoginParam::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete acctsettings_;
  }
}

void LoginParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginParam_descriptor_;
}

const LoginParam& LoginParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LoginParam* LoginParam::default_instance_ = NULL;

LoginParam* LoginParam::New() const {
  return new LoginParam;
}

void LoginParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_acctsettings()) {
      if (acctsettings_ != NULL) acctsettings_->::entity::AccountSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }
      
      // required string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AcctSettings;
        break;
      }
      
      // optional .entity.AccountSettings AcctSettings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcctSettings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acctsettings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerId = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }
  
  // required string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }
  
  // required string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional .entity.AccountSettings AcctSettings = 4;
  if (has_acctsettings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acctsettings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerId = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }
  
  // required string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }
  
  // required string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional .entity.AccountSettings AcctSettings = 4;
  if (has_acctsettings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acctsettings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerId = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string UserId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .entity.AccountSettings AcctSettings = 4;
    if (has_acctsettings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acctsettings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginParam::MergeFrom(const LoginParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_acctsettings()) {
      mutable_acctsettings()->::entity::AccountSettings::MergeFrom(from.acctsettings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginParam::CopyFrom(const LoginParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_acctsettings()) {
    if (!this->acctsettings().IsInitialized()) return false;
  }
  return true;
}

void LoginParam::Swap(LoginParam* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(acctsettings_, other->acctsettings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginParam_descriptor_;
  metadata.reflection = LoginParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegQuoteParam::kSymbolsFieldNumber;
#endif  // !_MSC_VER

RegQuoteParam::RegQuoteParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegQuoteParam::InitAsDefaultInstance() {
}

RegQuoteParam::RegQuoteParam(const RegQuoteParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegQuoteParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegQuoteParam::~RegQuoteParam() {
  SharedDtor();
}

void RegQuoteParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegQuoteParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegQuoteParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegQuoteParam_descriptor_;
}

const RegQuoteParam& RegQuoteParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RegQuoteParam* RegQuoteParam::default_instance_ = NULL;

RegQuoteParam* RegQuoteParam::New() const {
  return new RegQuoteParam;
}

void RegQuoteParam::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegQuoteParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Symbols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbols(0).data(), this->symbols(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegQuoteParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->symbols(i).data(), this->symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbols(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegQuoteParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbols(i).data(), this->symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->symbols(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegQuoteParam::ByteSize() const {
  int total_size = 0;
  
  // repeated string Symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegQuoteParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegQuoteParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegQuoteParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegQuoteParam::MergeFrom(const RegQuoteParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegQuoteParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegQuoteParam::CopyFrom(const RegQuoteParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegQuoteParam::IsInitialized() const {
  
  return true;
}

void RegQuoteParam::Swap(RegQuoteParam* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegQuoteParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegQuoteParam_descriptor_;
  metadata.reflection = RegQuoteParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPortfolioParam::kPortfolioItemsFieldNumber;
#endif  // !_MSC_VER

AddPortfolioParam::AddPortfolioParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPortfolioParam::InitAsDefaultInstance() {
}

AddPortfolioParam::AddPortfolioParam(const AddPortfolioParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPortfolioParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPortfolioParam::~AddPortfolioParam() {
  SharedDtor();
}

void AddPortfolioParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPortfolioParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPortfolioParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPortfolioParam_descriptor_;
}

const AddPortfolioParam& AddPortfolioParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AddPortfolioParam* AddPortfolioParam::default_instance_ = NULL;

AddPortfolioParam* AddPortfolioParam::New() const {
  return new AddPortfolioParam;
}

void AddPortfolioParam::Clear() {
  portfolioitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPortfolioParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .entity.PortfolioItem PortfolioItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PortfolioItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portfolioitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PortfolioItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPortfolioParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .entity.PortfolioItem PortfolioItems = 1;
  for (int i = 0; i < this->portfolioitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->portfolioitems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPortfolioParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .entity.PortfolioItem PortfolioItems = 1;
  for (int i = 0; i < this->portfolioitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->portfolioitems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPortfolioParam::ByteSize() const {
  int total_size = 0;
  
  // repeated .entity.PortfolioItem PortfolioItems = 1;
  total_size += 1 * this->portfolioitems_size();
  for (int i = 0; i < this->portfolioitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portfolioitems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPortfolioParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPortfolioParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPortfolioParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPortfolioParam::MergeFrom(const AddPortfolioParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  portfolioitems_.MergeFrom(from.portfolioitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPortfolioParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPortfolioParam::CopyFrom(const AddPortfolioParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPortfolioParam::IsInitialized() const {
  
  for (int i = 0; i < portfolioitems_size(); i++) {
    if (!this->portfolioitems(i).IsInitialized()) return false;
  }
  return true;
}

void AddPortfolioParam::Swap(AddPortfolioParam* other) {
  if (other != this) {
    portfolioitems_.Swap(&other->portfolioitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPortfolioParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPortfolioParam_descriptor_;
  metadata.reflection = AddPortfolioParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PorfOpenPosiParam::kPortfIdFieldNumber;
const int PorfOpenPosiParam::kQuantityFieldNumber;
const int PorfOpenPosiParam::kIsVirtualFieldNumber;
#endif  // !_MSC_VER

PorfOpenPosiParam::PorfOpenPosiParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PorfOpenPosiParam::InitAsDefaultInstance() {
}

PorfOpenPosiParam::PorfOpenPosiParam(const PorfOpenPosiParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PorfOpenPosiParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  isvirtual_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PorfOpenPosiParam::~PorfOpenPosiParam() {
  SharedDtor();
}

void PorfOpenPosiParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void PorfOpenPosiParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PorfOpenPosiParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PorfOpenPosiParam_descriptor_;
}

const PorfOpenPosiParam& PorfOpenPosiParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PorfOpenPosiParam* PorfOpenPosiParam::default_instance_ = NULL;

PorfOpenPosiParam* PorfOpenPosiParam::New() const {
  return new PorfOpenPosiParam;
}

void PorfOpenPosiParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    quantity_ = 0;
    isvirtual_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PorfOpenPosiParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsVirtual;
        break;
      }
      
      // required bool IsVirtual = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVirtual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvirtual_)));
          set_has_isvirtual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PorfOpenPosiParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // required bool IsVirtual = 3;
  if (has_isvirtual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isvirtual(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PorfOpenPosiParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required int32 Quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  // required bool IsVirtual = 3;
  if (has_isvirtual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isvirtual(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PorfOpenPosiParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required int32 Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required bool IsVirtual = 3;
    if (has_isvirtual()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PorfOpenPosiParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PorfOpenPosiParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PorfOpenPosiParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PorfOpenPosiParam::MergeFrom(const PorfOpenPosiParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_isvirtual()) {
      set_isvirtual(from.isvirtual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PorfOpenPosiParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PorfOpenPosiParam::CopyFrom(const PorfOpenPosiParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PorfOpenPosiParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PorfOpenPosiParam::Swap(PorfOpenPosiParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(quantity_, other->quantity_);
    std::swap(isvirtual_, other->isvirtual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PorfOpenPosiParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PorfOpenPosiParam_descriptor_;
  metadata.reflection = PorfOpenPosiParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClosePositionParam::kMultiLegOrderFieldNumber;
const int ClosePositionParam::kLegOrdRefFieldNumber;
#endif  // !_MSC_VER

ClosePositionParam::ClosePositionParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClosePositionParam::InitAsDefaultInstance() {
  multilegorder_ = const_cast< ::trade::MultiLegOrder*>(&::trade::MultiLegOrder::default_instance());
}

ClosePositionParam::ClosePositionParam(const ClosePositionParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClosePositionParam::SharedCtor() {
  _cached_size_ = 0;
  multilegorder_ = NULL;
  legordref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClosePositionParam::~ClosePositionParam() {
  SharedDtor();
}

void ClosePositionParam::SharedDtor() {
  if (legordref_ != &::google::protobuf::internal::kEmptyString) {
    delete legordref_;
  }
  if (this != default_instance_) {
    delete multilegorder_;
  }
}

void ClosePositionParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClosePositionParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClosePositionParam_descriptor_;
}

const ClosePositionParam& ClosePositionParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ClosePositionParam* ClosePositionParam::default_instance_ = NULL;

ClosePositionParam* ClosePositionParam::New() const {
  return new ClosePositionParam;
}

void ClosePositionParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_multilegorder()) {
      if (multilegorder_ != NULL) multilegorder_->::trade::MultiLegOrder::Clear();
    }
    if (has_legordref()) {
      if (legordref_ != &::google::protobuf::internal::kEmptyString) {
        legordref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClosePositionParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trade.MultiLegOrder MultiLegOrder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multilegorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LegOrdRef;
        break;
      }
      
      // optional string LegOrdRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrdRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legordref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legordref().data(), this->legordref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClosePositionParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trade.MultiLegOrder MultiLegOrder = 1;
  if (has_multilegorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multilegorder(), output);
  }
  
  // optional string LegOrdRef = 2;
  if (has_legordref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legordref().data(), this->legordref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legordref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClosePositionParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trade.MultiLegOrder MultiLegOrder = 1;
  if (has_multilegorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->multilegorder(), target);
  }
  
  // optional string LegOrdRef = 2;
  if (has_legordref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legordref().data(), this->legordref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legordref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClosePositionParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trade.MultiLegOrder MultiLegOrder = 1;
    if (has_multilegorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multilegorder());
    }
    
    // optional string LegOrdRef = 2;
    if (has_legordref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legordref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClosePositionParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClosePositionParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClosePositionParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClosePositionParam::MergeFrom(const ClosePositionParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multilegorder()) {
      mutable_multilegorder()->::trade::MultiLegOrder::MergeFrom(from.multilegorder());
    }
    if (from.has_legordref()) {
      set_legordref(from.legordref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClosePositionParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosePositionParam::CopyFrom(const ClosePositionParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosePositionParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_multilegorder()) {
    if (!this->multilegorder().IsInitialized()) return false;
  }
  return true;
}

void ClosePositionParam::Swap(ClosePositionParam* other) {
  if (other != this) {
    std::swap(multilegorder_, other->multilegorder_);
    std::swap(legordref_, other->legordref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClosePositionParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClosePositionParam_descriptor_;
  metadata.reflection = ClosePositionParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegOrderUpdateParam::kPortfIdFieldNumber;
const int LegOrderUpdateParam::kMultiLegOrderIdFieldNumber;
const int LegOrderUpdateParam::kLegOrderRefFieldNumber;
const int LegOrderUpdateParam::kLegOrderFieldNumber;
#endif  // !_MSC_VER

LegOrderUpdateParam::LegOrderUpdateParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegOrderUpdateParam::InitAsDefaultInstance() {
  legorder_ = const_cast< ::trade::Order*>(&::trade::Order::default_instance());
}

LegOrderUpdateParam::LegOrderUpdateParam(const LegOrderUpdateParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegOrderUpdateParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multilegorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legorderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legorder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegOrderUpdateParam::~LegOrderUpdateParam() {
  SharedDtor();
}

void LegOrderUpdateParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (multilegorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete multilegorderid_;
  }
  if (legorderref_ != &::google::protobuf::internal::kEmptyString) {
    delete legorderref_;
  }
  if (this != default_instance_) {
    delete legorder_;
  }
}

void LegOrderUpdateParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegOrderUpdateParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegOrderUpdateParam_descriptor_;
}

const LegOrderUpdateParam& LegOrderUpdateParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LegOrderUpdateParam* LegOrderUpdateParam::default_instance_ = NULL;

LegOrderUpdateParam* LegOrderUpdateParam::New() const {
  return new LegOrderUpdateParam;
}

void LegOrderUpdateParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_multilegorderid()) {
      if (multilegorderid_ != &::google::protobuf::internal::kEmptyString) {
        multilegorderid_->clear();
      }
    }
    if (has_legorderref()) {
      if (legorderref_ != &::google::protobuf::internal::kEmptyString) {
        legorderref_->clear();
      }
    }
    if (has_legorder()) {
      if (legorder_ != NULL) legorder_->::trade::Order::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegOrderUpdateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MultiLegOrderId;
        break;
      }
      
      // required string MultiLegOrderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MultiLegOrderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multilegorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multilegorderid().data(), this->multilegorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LegOrderRef;
        break;
      }
      
      // required string LegOrderRef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legorderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legorderref().data(), this->legorderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LegOrder;
        break;
      }
      
      // required .trade.Order LegOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegOrderUpdateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string MultiLegOrderId = 2;
  if (has_multilegorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegorderid().data(), this->multilegorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->multilegorderid(), output);
  }
  
  // required string LegOrderRef = 3;
  if (has_legorderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legorderref().data(), this->legorderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->legorderref(), output);
  }
  
  // required .trade.Order LegOrder = 4;
  if (has_legorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->legorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegOrderUpdateParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string MultiLegOrderId = 2;
  if (has_multilegorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilegorderid().data(), this->multilegorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->multilegorderid(), target);
  }
  
  // required string LegOrderRef = 3;
  if (has_legorderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legorderref().data(), this->legorderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->legorderref(), target);
  }
  
  // required .trade.Order LegOrder = 4;
  if (has_legorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->legorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegOrderUpdateParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string MultiLegOrderId = 2;
    if (has_multilegorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multilegorderid());
    }
    
    // required string LegOrderRef = 3;
    if (has_legorderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legorderref());
    }
    
    // required .trade.Order LegOrder = 4;
    if (has_legorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegOrderUpdateParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegOrderUpdateParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegOrderUpdateParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegOrderUpdateParam::MergeFrom(const LegOrderUpdateParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_multilegorderid()) {
      set_multilegorderid(from.multilegorderid());
    }
    if (from.has_legorderref()) {
      set_legorderref(from.legorderref());
    }
    if (from.has_legorder()) {
      mutable_legorder()->::trade::Order::MergeFrom(from.legorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegOrderUpdateParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegOrderUpdateParam::CopyFrom(const LegOrderUpdateParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegOrderUpdateParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_legorder()) {
    if (!this->legorder().IsInitialized()) return false;
  }
  return true;
}

void LegOrderUpdateParam::Swap(LegOrderUpdateParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(multilegorderid_, other->multilegorderid_);
    std::swap(legorderref_, other->legorderref_);
    std::swap(legorder_, other->legorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegOrderUpdateParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegOrderUpdateParam_descriptor_;
  metadata.reflection = LegOrderUpdateParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArbitrageStrategySettings::kSideFieldNumber;
const int ArbitrageStrategySettings::kOpenConditionFieldNumber;
const int ArbitrageStrategySettings::kOpenPosiThresholdFieldNumber;
const int ArbitrageStrategySettings::kStopGainConditionFieldNumber;
const int ArbitrageStrategySettings::kStopGainThresholdFieldNumber;
const int ArbitrageStrategySettings::kStopLossConditionFieldNumber;
const int ArbitrageStrategySettings::kStopLossThresholdFieldNumber;
#endif  // !_MSC_VER

ArbitrageStrategySettings::ArbitrageStrategySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArbitrageStrategySettings::InitAsDefaultInstance() {
}

ArbitrageStrategySettings::ArbitrageStrategySettings(const ArbitrageStrategySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArbitrageStrategySettings::SharedCtor() {
  _cached_size_ = 0;
  side_ = 49;
  opencondition_ = 0;
  openposithreshold_ = 0;
  stopgaincondition_ = 0;
  stopgainthreshold_ = 0;
  stoplosscondition_ = 0;
  stoplossthreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArbitrageStrategySettings::~ArbitrageStrategySettings() {
  SharedDtor();
}

void ArbitrageStrategySettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArbitrageStrategySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArbitrageStrategySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArbitrageStrategySettings_descriptor_;
}

const ArbitrageStrategySettings& ArbitrageStrategySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ArbitrageStrategySettings* ArbitrageStrategySettings::default_instance_ = NULL;

ArbitrageStrategySettings* ArbitrageStrategySettings::New() const {
  return new ArbitrageStrategySettings;
}

void ArbitrageStrategySettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    side_ = 49;
    opencondition_ = 0;
    openposithreshold_ = 0;
    stopgaincondition_ = 0;
    stopgainthreshold_ = 0;
    stoplosscondition_ = 0;
    stoplossthreshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArbitrageStrategySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.PosiDirectionType Side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_side(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpenCondition;
        break;
      }
      
      // required .entity.CompareCondition OpenCondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_opencondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_OpenPosiThreshold;
        break;
      }
      
      // required double OpenPosiThreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenPosiThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openposithreshold_)));
          set_has_openposithreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_StopGainCondition;
        break;
      }
      
      // required .entity.CompareCondition StopGainCondition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopGainCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_stopgaincondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_StopGainThreshold;
        break;
      }
      
      // required double StopGainThreshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopGainThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopgainthreshold_)));
          set_has_stopgainthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_StopLossCondition;
        break;
      }
      
      // required .entity.CompareCondition StopLossCondition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopLossCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_stoplosscondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_StopLossThreshold;
        break;
      }
      
      // required double StopLossThreshold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopLossThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoplossthreshold_)));
          set_has_stoplossthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArbitrageStrategySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.PosiDirectionType Side = 1;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->side(), output);
  }
  
  // required .entity.CompareCondition OpenCondition = 2;
  if (has_opencondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opencondition(), output);
  }
  
  // required double OpenPosiThreshold = 3;
  if (has_openposithreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openposithreshold(), output);
  }
  
  // required .entity.CompareCondition StopGainCondition = 4;
  if (has_stopgaincondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stopgaincondition(), output);
  }
  
  // required double StopGainThreshold = 5;
  if (has_stopgainthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stopgainthreshold(), output);
  }
  
  // required .entity.CompareCondition StopLossCondition = 6;
  if (has_stoplosscondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->stoplosscondition(), output);
  }
  
  // required double StopLossThreshold = 7;
  if (has_stoplossthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stoplossthreshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArbitrageStrategySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.PosiDirectionType Side = 1;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->side(), target);
  }
  
  // required .entity.CompareCondition OpenCondition = 2;
  if (has_opencondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opencondition(), target);
  }
  
  // required double OpenPosiThreshold = 3;
  if (has_openposithreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openposithreshold(), target);
  }
  
  // required .entity.CompareCondition StopGainCondition = 4;
  if (has_stopgaincondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->stopgaincondition(), target);
  }
  
  // required double StopGainThreshold = 5;
  if (has_stopgainthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stopgainthreshold(), target);
  }
  
  // required .entity.CompareCondition StopLossCondition = 6;
  if (has_stoplosscondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->stoplosscondition(), target);
  }
  
  // required double StopLossThreshold = 7;
  if (has_stoplossthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stoplossthreshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArbitrageStrategySettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.PosiDirectionType Side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // required .entity.CompareCondition OpenCondition = 2;
    if (has_opencondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opencondition());
    }
    
    // required double OpenPosiThreshold = 3;
    if (has_openposithreshold()) {
      total_size += 1 + 8;
    }
    
    // required .entity.CompareCondition StopGainCondition = 4;
    if (has_stopgaincondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stopgaincondition());
    }
    
    // required double StopGainThreshold = 5;
    if (has_stopgainthreshold()) {
      total_size += 1 + 8;
    }
    
    // required .entity.CompareCondition StopLossCondition = 6;
    if (has_stoplosscondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stoplosscondition());
    }
    
    // required double StopLossThreshold = 7;
    if (has_stoplossthreshold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArbitrageStrategySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArbitrageStrategySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArbitrageStrategySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArbitrageStrategySettings::MergeFrom(const ArbitrageStrategySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_opencondition()) {
      set_opencondition(from.opencondition());
    }
    if (from.has_openposithreshold()) {
      set_openposithreshold(from.openposithreshold());
    }
    if (from.has_stopgaincondition()) {
      set_stopgaincondition(from.stopgaincondition());
    }
    if (from.has_stopgainthreshold()) {
      set_stopgainthreshold(from.stopgainthreshold());
    }
    if (from.has_stoplosscondition()) {
      set_stoplosscondition(from.stoplosscondition());
    }
    if (from.has_stoplossthreshold()) {
      set_stoplossthreshold(from.stoplossthreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArbitrageStrategySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArbitrageStrategySettings::CopyFrom(const ArbitrageStrategySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArbitrageStrategySettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ArbitrageStrategySettings::Swap(ArbitrageStrategySettings* other) {
  if (other != this) {
    std::swap(side_, other->side_);
    std::swap(opencondition_, other->opencondition_);
    std::swap(openposithreshold_, other->openposithreshold_);
    std::swap(stopgaincondition_, other->stopgaincondition_);
    std::swap(stopgainthreshold_, other->stopgainthreshold_);
    std::swap(stoplosscondition_, other->stoplosscondition_);
    std::swap(stoplossthreshold_, other->stoplossthreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArbitrageStrategySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArbitrageStrategySettings_descriptor_;
  metadata.reflection = ArbitrageStrategySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePosiStrategySettings::kCloseLegFieldNumber;
const int ChangePosiStrategySettings::kCloseLegSideFieldNumber;
const int ChangePosiStrategySettings::kTriggerConditionFieldNumber;
const int ChangePosiStrategySettings::kThresholdFieldNumber;
#endif  // !_MSC_VER

ChangePosiStrategySettings::ChangePosiStrategySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePosiStrategySettings::InitAsDefaultInstance() {
}

ChangePosiStrategySettings::ChangePosiStrategySettings(const ChangePosiStrategySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePosiStrategySettings::SharedCtor() {
  _cached_size_ = 0;
  closeleg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closelegside_ = 49;
  triggercondition_ = 0;
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePosiStrategySettings::~ChangePosiStrategySettings() {
  SharedDtor();
}

void ChangePosiStrategySettings::SharedDtor() {
  if (closeleg_ != &::google::protobuf::internal::kEmptyString) {
    delete closeleg_;
  }
  if (this != default_instance_) {
  }
}

void ChangePosiStrategySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePosiStrategySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePosiStrategySettings_descriptor_;
}

const ChangePosiStrategySettings& ChangePosiStrategySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ChangePosiStrategySettings* ChangePosiStrategySettings::default_instance_ = NULL;

ChangePosiStrategySettings* ChangePosiStrategySettings::New() const {
  return new ChangePosiStrategySettings;
}

void ChangePosiStrategySettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_closeleg()) {
      if (closeleg_ != &::google::protobuf::internal::kEmptyString) {
        closeleg_->clear();
      }
    }
    closelegside_ = 49;
    triggercondition_ = 0;
    threshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePosiStrategySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CloseLeg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closeleg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closeleg().data(), this->closeleg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CloseLegSide;
        break;
      }
      
      // required .entity.PosiDirectionType CloseLegSide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseLegSide:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::PosiDirectionType_IsValid(value)) {
            set_closelegside(static_cast< entity::PosiDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerCondition;
        break;
      }
      
      // required .entity.CompareCondition TriggerCondition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::CompareCondition_IsValid(value)) {
            set_triggercondition(static_cast< entity::CompareCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Threshold;
        break;
      }
      
      // required double Threshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePosiStrategySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string CloseLeg = 1;
  if (has_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeleg().data(), this->closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->closeleg(), output);
  }
  
  // required .entity.PosiDirectionType CloseLegSide = 2;
  if (has_closelegside()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->closelegside(), output);
  }
  
  // required .entity.CompareCondition TriggerCondition = 3;
  if (has_triggercondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->triggercondition(), output);
  }
  
  // required double Threshold = 4;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->threshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePosiStrategySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string CloseLeg = 1;
  if (has_closeleg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeleg().data(), this->closeleg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->closeleg(), target);
  }
  
  // required .entity.PosiDirectionType CloseLegSide = 2;
  if (has_closelegside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->closelegside(), target);
  }
  
  // required .entity.CompareCondition TriggerCondition = 3;
  if (has_triggercondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->triggercondition(), target);
  }
  
  // required double Threshold = 4;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->threshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePosiStrategySettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string CloseLeg = 1;
    if (has_closeleg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closeleg());
    }
    
    // required .entity.PosiDirectionType CloseLegSide = 2;
    if (has_closelegside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->closelegside());
    }
    
    // required .entity.CompareCondition TriggerCondition = 3;
    if (has_triggercondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->triggercondition());
    }
    
    // required double Threshold = 4;
    if (has_threshold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePosiStrategySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePosiStrategySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePosiStrategySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePosiStrategySettings::MergeFrom(const ChangePosiStrategySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_closeleg()) {
      set_closeleg(from.closeleg());
    }
    if (from.has_closelegside()) {
      set_closelegside(from.closelegside());
    }
    if (from.has_triggercondition()) {
      set_triggercondition(from.triggercondition());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePosiStrategySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePosiStrategySettings::CopyFrom(const ChangePosiStrategySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePosiStrategySettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ChangePosiStrategySettings::Swap(ChangePosiStrategySettings* other) {
  if (other != this) {
    std::swap(closeleg_, other->closeleg_);
    std::swap(closelegside_, other->closelegside_);
    std::swap(triggercondition_, other->triggercondition_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePosiStrategySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePosiStrategySettings_descriptor_;
  metadata.reflection = ChangePosiStrategySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalperSettings::kThresholdFieldNumber;
const int ScalperSettings::kPriceTickFieldNumber;
const int ScalperSettings::kCaseLE2TickFieldNumber;
const int ScalperSettings::kCaseLE3TickFieldNumber;
const int ScalperSettings::kCaseGE4TickFieldNumber;
const int ScalperSettings::kCaseNoChangeFieldNumber;
const int ScalperSettings::kStopLossStrategyFieldNumber;
#endif  // !_MSC_VER

ScalperSettings::ScalperSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalperSettings::InitAsDefaultInstance() {
}

ScalperSettings::ScalperSettings(const ScalperSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalperSettings::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
  pricetick_ = 0;
  casele2tick_ = 0;
  casele3tick_ = 0;
  casege4tick_ = 0;
  casenochange_ = 0;
  stoplossstrategy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalperSettings::~ScalperSettings() {
  SharedDtor();
}

void ScalperSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalperSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalperSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalperSettings_descriptor_;
}

const ScalperSettings& ScalperSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ScalperSettings* ScalperSettings::default_instance_ = NULL;

ScalperSettings* ScalperSettings::New() const {
  return new ScalperSettings;
}

void ScalperSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    threshold_ = 0;
    pricetick_ = 0;
    casele2tick_ = 0;
    casele3tick_ = 0;
    casege4tick_ = 0;
    casenochange_ = 0;
    stoplossstrategy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalperSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Threshold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_PriceTick;
        break;
      }
      
      // required double PriceTick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CaseLE2Tick;
        break;
      }
      
      // required .entity.DirectionDepends CaseLE2Tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseLE2Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casele2tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CaseLE3Tick;
        break;
      }
      
      // required .entity.DirectionDepends CaseLE3Tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseLE3Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casele3tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CaseGE4Tick;
        break;
      }
      
      // required .entity.DirectionDepends CaseGE4Tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseGE4Tick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casege4tick(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CaseNoChange;
        break;
      }
      
      // required .entity.DirectionDepends CaseNoChange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaseNoChange:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::DirectionDepends_IsValid(value)) {
            set_casenochange(static_cast< entity::DirectionDepends >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_StopLossStrategy;
        break;
      }
      
      // required .entity.StopLossCloseMethods StopLossStrategy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopLossStrategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (entity::StopLossCloseMethods_IsValid(value)) {
            set_stoplossstrategy(static_cast< entity::StopLossCloseMethods >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalperSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double Threshold = 1;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->threshold(), output);
  }
  
  // required double PriceTick = 2;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pricetick(), output);
  }
  
  // required .entity.DirectionDepends CaseLE2Tick = 3;
  if (has_casele2tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->casele2tick(), output);
  }
  
  // required .entity.DirectionDepends CaseLE3Tick = 4;
  if (has_casele3tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->casele3tick(), output);
  }
  
  // required .entity.DirectionDepends CaseGE4Tick = 5;
  if (has_casege4tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->casege4tick(), output);
  }
  
  // required .entity.DirectionDepends CaseNoChange = 6;
  if (has_casenochange()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->casenochange(), output);
  }
  
  // required .entity.StopLossCloseMethods StopLossStrategy = 7;
  if (has_stoplossstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->stoplossstrategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalperSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double Threshold = 1;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->threshold(), target);
  }
  
  // required double PriceTick = 2;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pricetick(), target);
  }
  
  // required .entity.DirectionDepends CaseLE2Tick = 3;
  if (has_casele2tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->casele2tick(), target);
  }
  
  // required .entity.DirectionDepends CaseLE3Tick = 4;
  if (has_casele3tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->casele3tick(), target);
  }
  
  // required .entity.DirectionDepends CaseGE4Tick = 5;
  if (has_casege4tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->casege4tick(), target);
  }
  
  // required .entity.DirectionDepends CaseNoChange = 6;
  if (has_casenochange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->casenochange(), target);
  }
  
  // required .entity.StopLossCloseMethods StopLossStrategy = 7;
  if (has_stoplossstrategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->stoplossstrategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalperSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Threshold = 1;
    if (has_threshold()) {
      total_size += 1 + 8;
    }
    
    // required double PriceTick = 2;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }
    
    // required .entity.DirectionDepends CaseLE2Tick = 3;
    if (has_casele2tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casele2tick());
    }
    
    // required .entity.DirectionDepends CaseLE3Tick = 4;
    if (has_casele3tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casele3tick());
    }
    
    // required .entity.DirectionDepends CaseGE4Tick = 5;
    if (has_casege4tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casege4tick());
    }
    
    // required .entity.DirectionDepends CaseNoChange = 6;
    if (has_casenochange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->casenochange());
    }
    
    // required .entity.StopLossCloseMethods StopLossStrategy = 7;
    if (has_stoplossstrategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stoplossstrategy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalperSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalperSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalperSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalperSettings::MergeFrom(const ScalperSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
    if (from.has_casele2tick()) {
      set_casele2tick(from.casele2tick());
    }
    if (from.has_casele3tick()) {
      set_casele3tick(from.casele3tick());
    }
    if (from.has_casege4tick()) {
      set_casege4tick(from.casege4tick());
    }
    if (from.has_casenochange()) {
      set_casenochange(from.casenochange());
    }
    if (from.has_stoplossstrategy()) {
      set_stoplossstrategy(from.stoplossstrategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalperSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalperSettings::CopyFrom(const ScalperSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalperSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ScalperSettings::Swap(ScalperSettings* other) {
  if (other != this) {
    std::swap(threshold_, other->threshold_);
    std::swap(pricetick_, other->pricetick_);
    std::swap(casele2tick_, other->casele2tick_);
    std::swap(casele3tick_, other->casele3tick_);
    std::swap(casege4tick_, other->casege4tick_);
    std::swap(casenochange_, other->casenochange_);
    std::swap(stoplossstrategy_, other->stoplossstrategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalperSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalperSettings_descriptor_;
  metadata.reflection = ScalperSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyStrategyParam::kPortfIdFieldNumber;
const int ModifyStrategyParam::kStrategyNameFieldNumber;
const int ModifyStrategyParam::kStrategyDataFieldNumber;
#endif  // !_MSC_VER

ModifyStrategyParam::ModifyStrategyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyStrategyParam::InitAsDefaultInstance() {
}

ModifyStrategyParam::ModifyStrategyParam(const ModifyStrategyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyStrategyParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyStrategyParam::~ModifyStrategyParam() {
  SharedDtor();
}

void ModifyStrategyParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
    delete strategyname_;
  }
  if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
    delete strategydata_;
  }
  if (this != default_instance_) {
  }
}

void ModifyStrategyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyStrategyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyStrategyParam_descriptor_;
}

const ModifyStrategyParam& ModifyStrategyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyStrategyParam* ModifyStrategyParam::default_instance_ = NULL;

ModifyStrategyParam* ModifyStrategyParam::New() const {
  return new ModifyStrategyParam;
}

void ModifyStrategyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_strategyname()) {
      if (strategyname_ != &::google::protobuf::internal::kEmptyString) {
        strategyname_->clear();
      }
    }
    if (has_strategydata()) {
      if (strategydata_ != &::google::protobuf::internal::kEmptyString) {
        strategydata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyStrategyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StrategyName;
        break;
      }
      
      // required string StrategyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategyname().data(), this->strategyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StrategyData;
        break;
      }
      
      // required bytes StrategyData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrategyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyStrategyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string StrategyName = 2;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strategyname(), output);
  }
  
  // required bytes StrategyData = 3;
  if (has_strategydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strategydata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyStrategyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string StrategyName = 2;
  if (has_strategyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategyname().data(), this->strategyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strategyname(), target);
  }
  
  // required bytes StrategyData = 3;
  if (has_strategydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strategydata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyStrategyParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string StrategyName = 2;
    if (has_strategyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategyname());
    }
    
    // required bytes StrategyData = 3;
    if (has_strategydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategydata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyStrategyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyStrategyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyStrategyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyStrategyParam::MergeFrom(const ModifyStrategyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_strategyname()) {
      set_strategyname(from.strategyname());
    }
    if (from.has_strategydata()) {
      set_strategydata(from.strategydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyStrategyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyStrategyParam::CopyFrom(const ModifyStrategyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyStrategyParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ModifyStrategyParam::Swap(ModifyStrategyParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(strategyname_, other->strategyname_);
    std::swap(strategydata_, other->strategydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyStrategyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyStrategyParam_descriptor_;
  metadata.reflection = ModifyStrategyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioSwitchParam::kPortfIdFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoOpenFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoStopGainFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoStopLossFieldNumber;
const int ModifyPortfolioSwitchParam::kAutoTrackingFieldNumber;
const int ModifyPortfolioSwitchParam::kEnablePreferFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioSwitchParam::ModifyPortfolioSwitchParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioSwitchParam::InitAsDefaultInstance() {
}

ModifyPortfolioSwitchParam::ModifyPortfolioSwitchParam(const ModifyPortfolioSwitchParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioSwitchParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autoopen_ = false;
  autostopgain_ = false;
  autostoploss_ = false;
  autotracking_ = false;
  enableprefer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioSwitchParam::~ModifyPortfolioSwitchParam() {
  SharedDtor();
}

void ModifyPortfolioSwitchParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioSwitchParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioSwitchParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioSwitchParam_descriptor_;
}

const ModifyPortfolioSwitchParam& ModifyPortfolioSwitchParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioSwitchParam* ModifyPortfolioSwitchParam::default_instance_ = NULL;

ModifyPortfolioSwitchParam* ModifyPortfolioSwitchParam::New() const {
  return new ModifyPortfolioSwitchParam;
}

void ModifyPortfolioSwitchParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    autoopen_ = false;
    autostopgain_ = false;
    autostoploss_ = false;
    autotracking_ = false;
    enableprefer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioSwitchParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AutoOpen;
        break;
      }
      
      // required bool AutoOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoopen_)));
          set_has_autoopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AutoStopGain;
        break;
      }
      
      // required bool AutoStopGain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostopgain_)));
          set_has_autostopgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AutoStopLoss;
        break;
      }
      
      // required bool AutoStopLoss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoStopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autostoploss_)));
          set_has_autostoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AutoTracking;
        break;
      }
      
      // required bool AutoTracking = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoTracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autotracking_)));
          set_has_autotracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_EnablePrefer;
        break;
      }
      
      // required bool EnablePrefer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnablePrefer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableprefer_)));
          set_has_enableprefer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioSwitchParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required bool AutoOpen = 2;
  if (has_autoopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoopen(), output);
  }
  
  // required bool AutoStopGain = 3;
  if (has_autostopgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autostopgain(), output);
  }
  
  // required bool AutoStopLoss = 4;
  if (has_autostoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autostoploss(), output);
  }
  
  // required bool AutoTracking = 5;
  if (has_autotracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autotracking(), output);
  }
  
  // required bool EnablePrefer = 6;
  if (has_enableprefer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enableprefer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioSwitchParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required bool AutoOpen = 2;
  if (has_autoopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoopen(), target);
  }
  
  // required bool AutoStopGain = 3;
  if (has_autostopgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autostopgain(), target);
  }
  
  // required bool AutoStopLoss = 4;
  if (has_autostoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autostoploss(), target);
  }
  
  // required bool AutoTracking = 5;
  if (has_autotracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autotracking(), target);
  }
  
  // required bool EnablePrefer = 6;
  if (has_enableprefer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enableprefer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioSwitchParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required bool AutoOpen = 2;
    if (has_autoopen()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopGain = 3;
    if (has_autostopgain()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoStopLoss = 4;
    if (has_autostoploss()) {
      total_size += 1 + 1;
    }
    
    // required bool AutoTracking = 5;
    if (has_autotracking()) {
      total_size += 1 + 1;
    }
    
    // required bool EnablePrefer = 6;
    if (has_enableprefer()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioSwitchParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioSwitchParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioSwitchParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioSwitchParam::MergeFrom(const ModifyPortfolioSwitchParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_autoopen()) {
      set_autoopen(from.autoopen());
    }
    if (from.has_autostopgain()) {
      set_autostopgain(from.autostopgain());
    }
    if (from.has_autostoploss()) {
      set_autostoploss(from.autostoploss());
    }
    if (from.has_autotracking()) {
      set_autotracking(from.autotracking());
    }
    if (from.has_enableprefer()) {
      set_enableprefer(from.enableprefer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioSwitchParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioSwitchParam::CopyFrom(const ModifyPortfolioSwitchParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioSwitchParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ModifyPortfolioSwitchParam::Swap(ModifyPortfolioSwitchParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(autoopen_, other->autoopen_);
    std::swap(autostopgain_, other->autostopgain_);
    std::swap(autostoploss_, other->autostoploss_);
    std::swap(autotracking_, other->autotracking_);
    std::swap(enableprefer_, other->enableprefer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioSwitchParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioSwitchParam_descriptor_;
  metadata.reflection = ModifyPortfolioSwitchParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioQtyParam::kPortfIdFieldNumber;
const int ModifyPortfolioQtyParam::kOnceQtyFieldNumber;
const int ModifyPortfolioQtyParam::kMaxQtyFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioQtyParam::ModifyPortfolioQtyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioQtyParam::InitAsDefaultInstance() {
}

ModifyPortfolioQtyParam::ModifyPortfolioQtyParam(const ModifyPortfolioQtyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioQtyParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onceqty_ = 0;
  maxqty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioQtyParam::~ModifyPortfolioQtyParam() {
  SharedDtor();
}

void ModifyPortfolioQtyParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioQtyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioQtyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioQtyParam_descriptor_;
}

const ModifyPortfolioQtyParam& ModifyPortfolioQtyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioQtyParam* ModifyPortfolioQtyParam::default_instance_ = NULL;

ModifyPortfolioQtyParam* ModifyPortfolioQtyParam::New() const {
  return new ModifyPortfolioQtyParam;
}

void ModifyPortfolioQtyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    onceqty_ = 0;
    maxqty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioQtyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OnceQty;
        break;
      }
      
      // required int32 OnceQty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnceQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onceqty_)));
          set_has_onceqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxQty;
        break;
      }
      
      // required int32 MaxQty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxqty_)));
          set_has_maxqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioQtyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required int32 OnceQty = 2;
  if (has_onceqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onceqty(), output);
  }
  
  // required int32 MaxQty = 3;
  if (has_maxqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxqty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioQtyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required int32 OnceQty = 2;
  if (has_onceqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onceqty(), target);
  }
  
  // required int32 MaxQty = 3;
  if (has_maxqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxqty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioQtyParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required int32 OnceQty = 2;
    if (has_onceqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onceqty());
    }
    
    // required int32 MaxQty = 3;
    if (has_maxqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxqty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioQtyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioQtyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioQtyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioQtyParam::MergeFrom(const ModifyPortfolioQtyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_onceqty()) {
      set_onceqty(from.onceqty());
    }
    if (from.has_maxqty()) {
      set_maxqty(from.maxqty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioQtyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioQtyParam::CopyFrom(const ModifyPortfolioQtyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioQtyParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ModifyPortfolioQtyParam::Swap(ModifyPortfolioQtyParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(onceqty_, other->onceqty_);
    std::swap(maxqty_, other->maxqty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioQtyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioQtyParam_descriptor_;
  metadata.reflection = ModifyPortfolioQtyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyRunningStatusParam::kPortfIdFieldNumber;
const int ModifyRunningStatusParam::kEnabledFieldNumber;
#endif  // !_MSC_VER

ModifyRunningStatusParam::ModifyRunningStatusParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyRunningStatusParam::InitAsDefaultInstance() {
}

ModifyRunningStatusParam::ModifyRunningStatusParam(const ModifyRunningStatusParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyRunningStatusParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyRunningStatusParam::~ModifyRunningStatusParam() {
  SharedDtor();
}

void ModifyRunningStatusParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyRunningStatusParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyRunningStatusParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyRunningStatusParam_descriptor_;
}

const ModifyRunningStatusParam& ModifyRunningStatusParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyRunningStatusParam* ModifyRunningStatusParam::default_instance_ = NULL;

ModifyRunningStatusParam* ModifyRunningStatusParam::New() const {
  return new ModifyRunningStatusParam;
}

void ModifyRunningStatusParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyRunningStatusParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Enabled;
        break;
      }
      
      // required bool Enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyRunningStatusParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required bool Enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyRunningStatusParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required bool Enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyRunningStatusParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required bool Enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyRunningStatusParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyRunningStatusParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyRunningStatusParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyRunningStatusParam::MergeFrom(const ModifyRunningStatusParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyRunningStatusParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRunningStatusParam::CopyFrom(const ModifyRunningStatusParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRunningStatusParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ModifyRunningStatusParam::Swap(ModifyRunningStatusParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyRunningStatusParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyRunningStatusParam_descriptor_;
  metadata.reflection = ModifyRunningStatusParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyPortfolioPreferredLegParam::kPortfIdFieldNumber;
const int ModifyPortfolioPreferredLegParam::kLegSymbolFieldNumber;
#endif  // !_MSC_VER

ModifyPortfolioPreferredLegParam::ModifyPortfolioPreferredLegParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyPortfolioPreferredLegParam::InitAsDefaultInstance() {
}

ModifyPortfolioPreferredLegParam::ModifyPortfolioPreferredLegParam(const ModifyPortfolioPreferredLegParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyPortfolioPreferredLegParam::SharedCtor() {
  _cached_size_ = 0;
  portfid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyPortfolioPreferredLegParam::~ModifyPortfolioPreferredLegParam() {
  SharedDtor();
}

void ModifyPortfolioPreferredLegParam::SharedDtor() {
  if (portfid_ != &::google::protobuf::internal::kEmptyString) {
    delete portfid_;
  }
  if (legsymbol_ != &::google::protobuf::internal::kEmptyString) {
    delete legsymbol_;
  }
  if (this != default_instance_) {
  }
}

void ModifyPortfolioPreferredLegParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPortfolioPreferredLegParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPortfolioPreferredLegParam_descriptor_;
}

const ModifyPortfolioPreferredLegParam& ModifyPortfolioPreferredLegParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ModifyPortfolioPreferredLegParam* ModifyPortfolioPreferredLegParam::default_instance_ = NULL;

ModifyPortfolioPreferredLegParam* ModifyPortfolioPreferredLegParam::New() const {
  return new ModifyPortfolioPreferredLegParam;
}

void ModifyPortfolioPreferredLegParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portfid()) {
      if (portfid_ != &::google::protobuf::internal::kEmptyString) {
        portfid_->clear();
      }
    }
    if (has_legsymbol()) {
      if (legsymbol_ != &::google::protobuf::internal::kEmptyString) {
        legsymbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyPortfolioPreferredLegParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PortfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portfid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portfid().data(), this->portfid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LegSymbol;
        break;
      }
      
      // required string LegSymbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LegSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legsymbol().data(), this->legsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyPortfolioPreferredLegParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portfid(), output);
  }
  
  // required string LegSymbol = 2;
  if (has_legsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legsymbol().data(), this->legsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legsymbol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyPortfolioPreferredLegParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PortfId = 1;
  if (has_portfid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portfid().data(), this->portfid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portfid(), target);
  }
  
  // required string LegSymbol = 2;
  if (has_legsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legsymbol().data(), this->legsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legsymbol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyPortfolioPreferredLegParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PortfId = 1;
    if (has_portfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portfid());
    }
    
    // required string LegSymbol = 2;
    if (has_legsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legsymbol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPortfolioPreferredLegParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyPortfolioPreferredLegParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyPortfolioPreferredLegParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyPortfolioPreferredLegParam::MergeFrom(const ModifyPortfolioPreferredLegParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portfid()) {
      set_portfid(from.portfid());
    }
    if (from.has_legsymbol()) {
      set_legsymbol(from.legsymbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyPortfolioPreferredLegParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPortfolioPreferredLegParam::CopyFrom(const ModifyPortfolioPreferredLegParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPortfolioPreferredLegParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ModifyPortfolioPreferredLegParam::Swap(ModifyPortfolioPreferredLegParam* other) {
  if (other != this) {
    std::swap(portfid_, other->portfid_);
    std::swap(legsymbol_, other->legsymbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyPortfolioPreferredLegParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPortfolioPreferredLegParam_descriptor_;
  metadata.reflection = ModifyPortfolioPreferredLegParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelOrderParam::kOrderRefFieldNumber;
const int CancelOrderParam::kExchangeIdFieldNumber;
const int CancelOrderParam::kOrdSysIdFieldNumber;
const int CancelOrderParam::kUserIdFieldNumber;
const int CancelOrderParam::kSymbolFieldNumber;
#endif  // !_MSC_VER

CancelOrderParam::CancelOrderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelOrderParam::InitAsDefaultInstance() {
}

CancelOrderParam::CancelOrderParam(const CancelOrderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelOrderParam::SharedCtor() {
  _cached_size_ = 0;
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordsysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelOrderParam::~CancelOrderParam() {
  SharedDtor();
}

void CancelOrderParam::SharedDtor() {
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (ordsysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordsysid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void CancelOrderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelOrderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelOrderParam_descriptor_;
}

const CancelOrderParam& CancelOrderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

CancelOrderParam* CancelOrderParam::default_instance_ = NULL;

CancelOrderParam* CancelOrderParam::New() const {
  return new CancelOrderParam;
}

void CancelOrderParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_ordsysid()) {
      if (ordsysid_ != &::google::protobuf::internal::kEmptyString) {
        ordsysid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelOrderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string OrderRef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExchangeId;
        break;
      }
      
      // required string ExchangeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OrdSysId;
        break;
      }
      
      // required string OrdSysId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrdSysId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordsysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordsysid().data(), this->ordsysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_UserId;
        break;
      }
      
      // required string UserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Symbol;
        break;
      }
      
      // required string Symbol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelOrderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string OrderRef = 1;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderref(), output);
  }
  
  // required string ExchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exchangeid(), output);
  }
  
  // required string OrdSysId = 3;
  if (has_ordsysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordsysid().data(), this->ordsysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ordsysid(), output);
  }
  
  // required string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }
  
  // required string Symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->symbol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelOrderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string OrderRef = 1;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderref(), target);
  }
  
  // required string ExchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }
  
  // required string OrdSysId = 3;
  if (has_ordsysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordsysid().data(), this->ordsysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ordsysid(), target);
  }
  
  // required string UserId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }
  
  // required string Symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->symbol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelOrderParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string OrderRef = 1;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }
    
    // required string ExchangeId = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string OrdSysId = 3;
    if (has_ordsysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordsysid());
    }
    
    // required string UserId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string Symbol = 5;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelOrderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelOrderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelOrderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelOrderParam::MergeFrom(const CancelOrderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_ordsysid()) {
      set_ordsysid(from.ordsysid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelOrderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderParam::CopyFrom(const CancelOrderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CancelOrderParam::Swap(CancelOrderParam* other) {
  if (other != this) {
    std::swap(orderref_, other->orderref_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(ordsysid_, other->ordsysid_);
    std::swap(userid_, other->userid_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelOrderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelOrderParam_descriptor_;
  metadata.reflection = CancelOrderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualCloseOrderParam::kSymbolFieldNumber;
const int ManualCloseOrderParam::kDirectionFieldNumber;
const int ManualCloseOrderParam::kOpenDateFieldNumber;
const int ManualCloseOrderParam::kQuantityFieldNumber;
#endif  // !_MSC_VER

ManualCloseOrderParam::ManualCloseOrderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManualCloseOrderParam::InitAsDefaultInstance() {
}

ManualCloseOrderParam::ManualCloseOrderParam(const ManualCloseOrderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManualCloseOrderParam::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = 48;
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualCloseOrderParam::~ManualCloseOrderParam() {
  SharedDtor();
}

void ManualCloseOrderParam::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (this != default_instance_) {
  }
}

void ManualCloseOrderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualCloseOrderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualCloseOrderParam_descriptor_;
}

const ManualCloseOrderParam& ManualCloseOrderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ManualCloseOrderParam* ManualCloseOrderParam::default_instance_ = NULL;

ManualCloseOrderParam* ManualCloseOrderParam::New() const {
  return new ManualCloseOrderParam;
}

void ManualCloseOrderParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    direction_ = 48;
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualCloseOrderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Direction;
        break;
      }
      
      // required .trade.TradeDirectionType Direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (trade::TradeDirectionType_IsValid(value)) {
            set_direction(static_cast< trade::TradeDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OpenDate;
        break;
      }
      
      // required string OpenDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Quantity;
        break;
      }
      
      // required int32 Quantity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManualCloseOrderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }
  
  // required .trade.TradeDirectionType Direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }
  
  // required string OpenDate = 3;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opendate(), output);
  }
  
  // required int32 Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManualCloseOrderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }
  
  // required .trade.TradeDirectionType Direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }
  
  // required string OpenDate = 3;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opendate(), target);
  }
  
  // required int32 Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManualCloseOrderParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required .trade.TradeDirectionType Direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
    // required string OpenDate = 3;
    if (has_opendate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }
    
    // required int32 Quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualCloseOrderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualCloseOrderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualCloseOrderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualCloseOrderParam::MergeFrom(const ManualCloseOrderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualCloseOrderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualCloseOrderParam::CopyFrom(const ManualCloseOrderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualCloseOrderParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ManualCloseOrderParam::Swap(ManualCloseOrderParam* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(direction_, other->direction_);
    std::swap(opendate_, other->opendate_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualCloseOrderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualCloseOrderParam_descriptor_;
  metadata.reflection = ManualCloseOrderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolInfo::kInstrumentFieldNumber;
const int SymbolInfo::kExchangeIDFieldNumber;
const int SymbolInfo::kExchangeInstIDFieldNumber;
const int SymbolInfo::kProductIDFieldNumber;
const int SymbolInfo::kVolumeMultipleFieldNumber;
const int SymbolInfo::kPriceTickFieldNumber;
#endif  // !_MSC_VER

SymbolInfo::SymbolInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolInfo::InitAsDefaultInstance() {
}

SymbolInfo::SymbolInfo(const SymbolInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolInfo::SharedCtor() {
  _cached_size_ = 0;
  instrument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volumemultiple_ = 0;
  pricetick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolInfo::~SymbolInfo() {
  SharedDtor();
}

void SymbolInfo::SharedDtor() {
  if (instrument_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (this != default_instance_) {
  }
}

void SymbolInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolInfo_descriptor_;
}

const SymbolInfo& SymbolInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SymbolInfo* SymbolInfo::default_instance_ = NULL;

SymbolInfo* SymbolInfo::New() const {
  return new SymbolInfo;
}

void SymbolInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument()) {
      if (instrument_ != &::google::protobuf::internal::kEmptyString) {
        instrument_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    volumemultiple_ = 0;
    pricetick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Instrument = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument().data(), this->instrument().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeInstID;
        break;
      }
      
      // required string ExchangeInstID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ProductID;
        break;
      }
      
      // required string ProductID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VolumeMultiple;
        break;
      }
      
      // required int32 VolumeMultiple = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumemultiple_)));
          set_has_volumemultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PriceTick;
        break;
      }
      
      // required double PriceTick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Instrument = 1;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument(), output);
  }
  
  // required string ExchangeID = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exchangeid(), output);
  }
  
  // required string ExchangeInstID = 3;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchangeinstid(), output);
  }
  
  // required string ProductID = 4;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->productid(), output);
  }
  
  // required int32 VolumeMultiple = 5;
  if (has_volumemultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volumemultiple(), output);
  }
  
  // required double PriceTick = 6;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pricetick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Instrument = 1;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument(), target);
  }
  
  // required string ExchangeID = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }
  
  // required string ExchangeInstID = 3;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeinstid(), target);
  }
  
  // required string ProductID = 4;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->productid(), target);
  }
  
  // required int32 VolumeMultiple = 5;
  if (has_volumemultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volumemultiple(), target);
  }
  
  // required double PriceTick = 6;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pricetick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Instrument = 1;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument());
    }
    
    // required string ExchangeID = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string ExchangeInstID = 3;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }
    
    // required string ProductID = 4;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }
    
    // required int32 VolumeMultiple = 5;
    if (has_volumemultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumemultiple());
    }
    
    // required double PriceTick = 6;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolInfo::MergeFrom(const SymbolInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument()) {
      set_instrument(from.instrument());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_volumemultiple()) {
      set_volumemultiple(from.volumemultiple());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolInfo::CopyFrom(const SymbolInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SymbolInfo::Swap(SymbolInfo* other) {
  if (other != this) {
    std::swap(instrument_, other->instrument_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(productid_, other->productid_);
    std::swap(volumemultiple_, other->volumemultiple_);
    std::swap(pricetick_, other->pricetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolInfo_descriptor_;
  metadata.reflection = SymbolInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity

// @@protoc_insertion_point(global_scope)
